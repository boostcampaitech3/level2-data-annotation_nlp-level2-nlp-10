id,sentence,subject_entity,object_entity,label
0,"파스칼(Pascal)은 1969년에 스위스 ETH 취리히의 컴퓨터 과학자 니클라우스 비르트가 개발한 프로그래밍 언어로, 당대의 가장 인기있는 교육용 언어 중 하나였으며, 1980년대와 1990년대 초반에 걸쳐 널리 사용되었다.","{'word': '니클라우스 비르트', 'start': 41, 'end': 49, 'type': 'PER'}","{'word': '컴퓨터 과학자', 'start': 33, 'end': 39, 'type': 'POH'}",per:title
1,파스칼이라는 이름은 프랑스의 수학자이자 철학자 블레즈 파스칼의 이름을 딴 것이다.,"{'word': '블레즈 파스칼', 'start': 218, 'end': 224, 'type': 'PER'}","{'word': '수학자이자 철학자', 'start': 208, 'end': 216, 'type': 'POH'}",per:title
2,"파스칼(Pascal)은 1969년에 스위스 ETH 취리히의 컴퓨터 과학자 니클라우스 비르트가 개발한 프로그래밍 언어로, 당대의 가장 인기있는 교육용 언어 중 하나였으며, 1980년대와 1990년대 초반에 걸쳐 널리 사용되었다.","{'word': '파스칼(Pascal)', 'start': 0, 'end': 10, 'type': 'COM'}","{'word': '1969년', 'start': 13, 'end': 17, 'type': 'DAT'}",com:date_of_prod
3,"파스칼(Pascal)은 1969년에 스위스 ETH 취리히의 컴퓨터 과학자 니클라우스 비르트가 개발한 프로그래밍 언어로, 당대의 가장 인기있는 교육용 언어 중 하나였으며, 1980년대와 1990년대 초반에 걸쳐 널리 사용되었다.","{'word': '프로그래밍 언어', 'start': 56, 'end': 63, 'type': 'COM'}","{'word': '파스칼(Pascal)', 'start': 0, 'end': 10, 'type': 'COM'}",com:sub_concept
4,파스칼은 발표 당시에는 아주 기본적인 컴퓨터 언어의 요소만을 가지고 있었으므로 시스템을 직접 다루기에는 부족하였다.,"{'word': '파스칼', 'start': 127, 'end': 129, 'type': 'COM'}","{'word': '기본적인 컴퓨터 언어의 요소', 'start': 143, 'end': 157, 'type': 'COM'}",com:sub_concept
5,"과학연구를 목적으로 만들어진 고급언어인 알골 60의 영향을 받은 까닭에, 같은 시기에 마찬가지 영향을 받아 제작된 C와 여러가지 면에서 유사한 점을 갖는다.","{'word': '고급언어', 'start': 312, 'end': 315, 'type': 'COM'}","{'word': '알골 60', 'start': 318, 'end': 322, 'type': 'COM'}",com:sub_concept
6,"델파이 언어로 불리는 변종 오브젝트 파스칼은 델파이, 프리 파스칼 IDE, 라자루스 등에서 개발할 수 있다.","{'word': '변종 오브젝트 파스칼', 'start': 899, 'end': 909, 'type': 'COM'}","{'word': '델파이 언어', 'start': 887, 'end': 892, 'type': 'COM'}",com:alter_names
7,"볼랜드 파스칼이라 불리는 델파이 이전의 오브젝트 파스칼은 터보 파스칼, 프리 파스칼 IDE에서 개발할 수 있다.","{'word': '델파이 이전의 오브젝트 파스칼', 'start': 962, 'end': 977, 'type': 'COM'}","{'word': '볼랜드 파스칼', 'start': 948, 'end': 954, 'type': 'COM'}",com:alter_names
8,파스칼 구조는 절차와 함수로 짜여진다.,"{'word': '파스칼 구조', 'start': 2247, 'end': 2252, 'type': 'COM'}","{'word': '절차와 함수', 'start': 2255, 'end': 2260, 'type': 'COM'}",com:made_of
9,엠바카데로 사의 델파이와 카일릭스는 파스칼의 직계 후손이라 할 수 있는 오브젝트 파스칼을 사용한다.,"{'word': '오브젝트 파스칼', 'start': 807, 'end': 814, 'type': 'COM'}","{'word': '파스칼', 'start': 787, 'end': 789, 'type': 'COM'}",com:prior_tech
10,"많은 변종들이 존재하며, 객체 지향 프로그래밍을 위해 기능을 추가한 변종들도 다수 존재한다.","{'word': '객체 지향 프로그래밍', 'start': 729, 'end': 739, 'type': 'COM'}","{'word': '변종', 'start': 718, 'end': 719, 'type': 'POH'}",no_relation
11,집합은 현대 수학에 있어 기본적인 개념이며 수많은 알고리즘이 집합을 사용하여 정의된다.,"{'word': '알고리즘', 'start': 1406, 'end': 1409, 'type': 'COM'}","{'word': '집합', 'start': 1378, 'end': 1379, 'type': 'POH'}",no_relation
12,포인터를 사용한 구조적 프로그래밍과 데이터 구조화(data structuring)를 그 특징으로 한다.,"{'word': '구조적 프로그래밍', 'start': 247, 'end': 255, 'type': 'COM'}","{'word': '데이터 구조화(data structuring)', 'start': 258, 'end': 282, 'type': 'COM'}",no_relation
13,그러나 코드를 간결하게 하고 버그를 더 쉽게 잡아내기 위한 목적으로 몇가지 기능을 제한함으로써 결과적으로 C 언어에 비해 활용도가 떨어지는 언어가 되었다.,"{'word': '코드', 'start': 388, 'end': 389, 'type': 'COM'}","{'word': '버그', 'start': 400, 'end': 401, 'type': 'COM'}",no_relation
14,"그러나 완전히 비실용적인 언어라는 뜻은 아니며, 실제로 TeX나 초기 매킨토시 운영 체제 제작에 사용되기도 하였다.","{'word': 'TeX', 'start': 502, 'end': 504, 'type': 'COM'}","{'word': '매킨토시 운영 체제', 'start': 510, 'end': 519, 'type': 'COM'}",no_relation
15,최근에는 파스칼 컴파일러 자체가 크게 개선되고 소프트웨어 개발 기술의 발전으로 이런 사소한 차이점은 거의 무시할 수 있는 단점이 되었다.,"{'word': '파스칼 컴파일러', 'start': 541, 'end': 548, 'type': 'COM'}","{'word': '소프트웨어 개발 기술', 'start': 562, 'end': 572, 'type': 'COM'}",no_relation
16,"다른 프로그래밍 언어와 달리, 파스칼은 집합 유형을 지원한다:","{'word': '프로그래밍 언어', 'start': 1276, 'end': 1283, 'type': 'COM'}","{'word': '파스칼', 'start': 1290, 'end': 1292, 'type': 'COM'}",no_relation
17,그러므로 이러한 알고리즘을 추가하는 것은 파스칼에 매우 알맞다고 볼 수 있다.,"{'word': '알고리즘', 'start': 1436, 'end': 1439, 'type': 'COM'}","{'word': '파스칼', 'start': 1450, 'end': 1452, 'type': 'COM'}",no_relation
18,파스칼은 포인터 사용을 지원한다:,"{'word': '파스칼', 'start': 1636, 'end': 1638, 'type': 'COM'}","{'word': '포인터', 'start': 1641, 'end': 1643, 'type': 'COM'}",no_relation
19,가변 codice_1가 자료형 codice_2 레코드의 포인터이다.,"{'word': '자료형', 'start': 1685, 'end': 1687, 'type': 'COM'}","{'word': '포인터', 'start': 1703, 'end': 1705, 'type': 'COM'}",no_relation
20,"새로운 레코드를 만들어 값codice_3과 codice_4를 레코드 안의 필드 codice_5로 할당하려면, 다음과 같은 명령어를 사용하면 된다:","{'word': '레코드', 'start': 1736, 'end': 1738, 'type': 'COM'}","{'word': '명령어', 'start': 1800, 'end': 1802, 'type': 'COM'}",no_relation
21,"파스칼은 구조 프로그래밍 언어이며, 제어 흐름을 goto 문 없이 표준화할 수 있다.","{'word': '파스칼', 'start': 2006, 'end': 2008, 'type': 'COM'}","{'word': '구조 프로그래밍 언어', 'start': 2011, 'end': 2021, 'type': 'COM'}",no_relation
22,"절차와 함수는 어느 깊이로든 놓일 수 있으며, 프로그램 구조는 논리 외부 블록이다.","{'word': '절차', 'start': 2436, 'end': 2437, 'type': 'COM'}","{'word': '함수', 'start': 2440, 'end': 2441, 'type': 'COM'}",no_relation
23,"현재는 초기의 파스칼에 비해 많은 부분이 추가, 개선되고 다른언어의 장점들을 따와 상용 파스칼 컴파일러인 델파이는 C++과 거의 기능 차이가 없다.","{'word': '델파이', 'start': 691, 'end': 693, 'type': 'COM'}","{'word': 'C++', 'start': 696, 'end': 698, 'type': 'COM'}",com:similar_tech
24,오픈 소스로 제작된 프리 파스칼이나 GNU 파스칼도 있다.,"{'word': '프리 파스칼', 'start': 865, 'end': 870, 'type': 'COM'}","{'word': 'GNU 파스칼', 'start': 874, 'end': 880, 'type': 'COM'}",com:similar_tech
25,엠바카데로 사의 델파이와 카일릭스는 파스칼의 직계 후손이라 할 수 있는 오브젝트 파스칼을 사용한다.,"{'word': '엠바카데로', 'start': 767, 'end': 771, 'type': 'ORG'}","{'word': '델파이와 카일릭스', 'start': 776, 'end': 784, 'type': 'COM'}",org:production
26,"파스칼(Pascal)은 1969년에 스위스 ETH 취리히의 컴퓨터 과학자 니클라우스 비르트가 개발한 프로그래밍 언어로, 당대의 가장 인기있는 교육용 언어 중 하나였으며, 1980년대와 1990년대 초반에 걸쳐 널리 사용되었다.","{'word': '니클라우스 비르트', 'start': 41, 'end': 49, 'type': 'PER'}","{'word': '파스칼(Pascal)', 'start': 0, 'end': 10, 'type': 'COM'}",per:production
27,"최초의 고급 프로그래밍 언어, 즉 3세대 프로그래밍 언어(3GL)는 1950년대에 작성되었다.","{'word': '최초의 고급 프로그래밍 언어', 'start': 648, 'end': 662, 'type': 'COM'}","{'word': '1950년대', 'start': 686, 'end': 691, 'type': 'DAT'}",com:date_of_prod
28,"컴퓨터용으로 설계될 초기의 고급 프로그래밍 언어는 Plankalkül였으며, 콘라트 추제가 1943년부터 1945년까지 독일의 Z3용으로 개발될 것이었다.","{'word': 'Plankalkül', 'start': 729, 'end': 738, 'type': 'COM'}","{'word': '1943년부터 1945년', 'start': 752, 'end': 764, 'type': 'DAT'}",com:date_of_prod
29,"컴퓨터 프로그램은 데이터(data)와 명령어(instruction), 이렇게 두 부분으로 나뉜다.","{'word': '컴퓨터 프로그램', 'start': 1070, 'end': 1077, 'type': 'COM'}","{'word': '데이터(data)와 명령어(instruction)', 'start': 1080, 'end': 1106, 'type': 'COM'}",com:sub_concept
30,"예를 들어, C 언어는 검색, 정렬, 입출력에 관련된 다양하고 풍부한 표준 함수(standard functions)들을 제공한다.","{'word': 'C 언어', 'start': 2417, 'end': 2420, 'type': 'COM'}","{'word': '표준 함수(standard functions)', 'start': 2449, 'end': 2473, 'type': 'COM'}",com:sub_concept
31,"연결된 함수들을 한데 묶어 놓은 것은 모듈(module)이라 하고, 모듈들의 상호 연결로 하나의 프로그램이 구성된다.","{'word': '모듈(module)', 'start': 2558, 'end': 2567, 'type': 'COM'}","{'word': '함수', 'start': 2541, 'end': 2542, 'type': 'COM'}",com:sub_concept
32,"연결된 함수들을 한데 묶어 놓은 것은 모듈(module)이라 하고, 모듈들의 상호 연결로 하나의 프로그램이 구성된다.","{'word': '프로그램', 'start': 2591, 'end': 2594, 'type': 'COM'}","{'word': '모듈', 'start': 2575, 'end': 2576, 'type': 'COM'}",com:sub_concept
33,그리고 이러한 모듈들을 재사용할 수 있게 모아둔 것을 라이브러리라 한다.,"{'word': '라이브러리', 'start': 2633, 'end': 2637, 'type': 'COM'}","{'word': '모듈', 'start': 2611, 'end': 2612, 'type': 'COM'}",com:sub_concept
34,"한편 객체 지향 프로그래밍언어(OOP)인 자바스크립트에서 사용되는 기초적인 문법의 개념으로는 속성과 메쏘드를 갖는 객체(오브젝트) 개념이 있으며,","{'word': '자바스크립트에서 사용되는 기초적인 문법', 'start': 2667, 'end': 2687, 'type': 'COM'}","{'word': '객체(오브젝트)', 'start': 2708, 'end': 2715, 'type': 'COM'}",com:sub_concept
35,"한편 객체 지향 프로그래밍언어(OOP)인 자바스크립트에서 사용되는 기초적인 문법의 개념으로는 속성과 메쏘드를 갖는 객체(오브젝트) 개념이 있으며, 변수 선언, 함수 정의, 연산자 그리고 제어문등을 주요하게 들수 있다.","{'word': '자바스크립트에서 사용되는 기초적인 문법', 'start': 2667, 'end': 2687, 'type': 'COM'}","{'word': '변수 선언, 함수 정의, 연산자 그리고 제어문', 'start': 2726, 'end': 2750, 'type': 'COM'}",com:sub_concept
36,절대적인 기계어는 나중에 1 세대 프로그래밍 언어(1GL)로 명칭이 정해졌다.,"{'word': '절대적인 기계어', 'start': 443, 'end': 450, 'type': 'COM'}","{'word': '1 세대 프로그래밍 언어(1GL)', 'start': 457, 'end': 474, 'type': 'COM'}",com:alter_names
37,"다음 단계로 이른바 2세대 프로그래밍 언어(2GL), 곧 어셈블리어가 개발되었으며 여전히 특정 컴퓨터의 명령어 집합 구조와 밀접하게 관계되었다.","{'word': '2세대 프로그래밍 언어(2GL)', 'start': 498, 'end': 514, 'type': 'COM'}","{'word': '어셈블리어', 'start': 519, 'end': 523, 'type': 'COM'}",com:alter_names
38,"최초의 고급 프로그래밍 언어, 즉 3세대 프로그래밍 언어(3GL)는 1950년대에 작성되었다.","{'word': '최초의 고급 프로그래밍 언어', 'start': 648, 'end': 662, 'type': 'COM'}","{'word': '3세대 프로그래밍 언어(3GL)', 'start': 667, 'end': 683, 'type': 'COM'}",com:alter_names
39,"4세대 프로그래밍 언어(4GL)는 3세대 프로그래밍 언어 보다 내부 컴퓨터 하드웨어의 상세한 부분을 더 고급적으로 추상화시키는 것을 목적으로 한다. 5세대 프로그래밍 언어(5GL)는 프로그래머가 작성한 알고리즘을 이용하지 않고, 프로그램에 주어지는 제약을 사용하여 문제를 해결하는 언어이다.","{'word': '4세대 프로그래밍 언어(4GL)', 'start': 817, 'end': 833, 'type': 'COM'}","{'word': '3세대 프로그래밍 언어', 'start': 836, 'end': 847, 'type': 'COM'}",com:prior_tech
40,"통상 A언어부터 B언어, C언어 순으로 발전해 왔다고 일컬어진다.","{'word': 'B언어', 'start': 1042, 'end': 1044, 'type': 'COM'}","{'word': 'A언어', 'start': 1036, 'end': 1038, 'type': 'COM'}",com:prior_tech
41,"통상 A언어부터 B언어, C언어 순으로 발전해 왔다고 일컬어진다.","{'word': 'C언어', 'start': 1047, 'end': 1049, 'type': 'COM'}","{'word': 'B언어', 'start': 1042, 'end': 1044, 'type': 'COM'}",com:prior_tech
42,컴퓨터 언어는 컴퓨터의 하드웨어를 직접 제어하는 초기의 어셈블리와 같은 언어에서부터 시작하여 현재에는 C 언어와 같은 고급 언어(high-level language)로 발전되어 왔다.,"{'word': 'C 언어와 같은 고급 언어(high-level language)', 'start': 2069, 'end': 2103, 'type': 'COM'}","{'word': '컴퓨터의 하드웨어를 직접 제어하는 초기의 어셈블리', 'start': 2020, 'end': 2046, 'type': 'COM'}",com:prior_tech
43,사용자는 필요에 따라 데이터를 다음과 같이 선언(declaration)할 수 있다.,"{'word': '사용자', 'start': 1182, 'end': 1184, 'type': 'PER'}","{'word': '데이터', 'start': 1194, 'end': 1196, 'type': 'COM'}",no_relation
44,프로그래머는 상위 레벨의 지시문으로 프로그램을 작성하면 컴파일러가 이 지시문을 컴퓨터가 이해할 수 있는 기계어로 번역한다.,"{'word': '프로그래머', 'start': 2206, 'end': 2210, 'type': 'PER'}","{'word': '컴파일러', 'start': 2237, 'end': 2240, 'type': 'COM'}",no_relation
45,이런 표준 함수가 제공되는 덕분에 사용자는 해당 함수를 만드는 데 드는 노력을 절약할 수 있다.,"{'word': '사용자', 'start': 2502, 'end': 2504, 'type': 'PER'}","{'word': '표준 함수', 'start': 2486, 'end': 2490, 'type': 'COM'}",no_relation
46,고급 언어일수록 사람이 사용하는 언어에 가깝다.,"{'word': '고급 언어', 'start': 48, 'end': 52, 'type': 'COM'}","{'word': '언어', 'start': 66, 'end': 67, 'type': 'POH'}",no_relation
47,"예를 들어, 사각형을 만드는 데 필요한 자료형을 정의한다고 하자.","{'word': '자료형', 'start': 1596, 'end': 1598, 'type': 'COM'}","{'word': '사각형', 'start': 1581, 'end': 1583, 'type': 'POH'}",no_relation
48,프로그래밍 언어는 컴퓨터 시스템을 구동시키는 소프트웨어를 작성하기 위한 형식언어이다.,"{'word': '프로그래밍 언어', 'start': 0, 'end': 7, 'type': 'COM'}","{'word': '컴퓨터 시스템', 'start': 10, 'end': 16, 'type': 'COM'}",no_relation
49,"일반적으로 말할 때에는 프로그래밍 언어를 지원하는 소프트웨어, 곧 소프트웨어를 작성하기 위한 소프트웨어를 가리키는 때가 많고, 이때에는 프로그래밍 언어와 소프트웨어를 구분하지 않고 소프트웨어를 프로그래밍 언어로 보기도 한다.","{'word': '프로그래밍 언어', 'start': 88, 'end': 95, 'type': 'COM'}","{'word': '소프트웨어', 'start': 103, 'end': 107, 'type': 'COM'}",no_relation
50,"예를 들면, 델파이는 프로그래밍 언어인 오브젝트 파스칼을 지원하는 소프트웨어를 작성하기 위한 소프트웨어일 뿐이지만, 델파이를 별개의 프로그래밍 언어로 보는 때가 더 많다.","{'word': '델파이', 'start': 208, 'end': 210, 'type': 'COM'}","{'word': '프로그래밍 언어', 'start': 213, 'end': 220, 'type': 'COM'}",no_relation
51,"최초의 컴퓨터는 종종 프로그래밍 언어의 도움 없이 프로그래밍되었는데, 이는 프로그램들을 절대적인 기계어로 작성함으로써 이루어졌다.","{'word': '컴퓨터', 'start': 301, 'end': 303, 'type': 'COM'}","{'word': '프로그래밍 언어', 'start': 309, 'end': 316, 'type': 'COM'}",no_relation
52,10진이나 이진 형태의 프로그램들은 천공 카드나 자기 테이프로부터 읽거나 컴퓨터 프론트 패널의 스위치를 켜고 끔으로써 불러들였다.,"{'word': '프로그램', 'start': 383, 'end': 386, 'type': 'COM'}","{'word': '천공 카드', 'start': 390, 'end': 394, 'type': 'COM'}",no_relation
53,"프로그램을 훨씬 더 인간이 읽기 쉽게 만들어주었을 뿐 아니라, 주소 계산 시 따분하고 오류가 발생할 경향이 있는 프로그래머를 안심시켜 주었다.","{'word': '프로그램', 'start': 568, 'end': 571, 'type': 'COM'}","{'word': '프로그래머', 'start': 631, 'end': 635, 'type': 'COM'}",no_relation
54,프로그래밍 언어는 이런 바이트들을 유용한 형태로 정리한다.,"{'word': '프로그래밍 언어', 'start': 1149, 'end': 1156, 'type': 'COM'}","{'word': '바이트', 'start': 1162, 'end': 1164, 'type': 'COM'}",no_relation
55,"이와 같이 선언하면, 컴퓨터 메모리의 한 영역을 'MyData'라는 이름의 정수(integer) 타입으로 저장한다.","{'word': '컴퓨터 메모리', 'start': 1264, 'end': 1270, 'type': 'COM'}","{'word': '정수(integer) 타입', 'start': 1294, 'end': 1307, 'type': 'COM'}",no_relation
56,메모리의 어느 영역에 데이터를 저장할 것인가는 컴파일러가 결정한다.,"{'word': '메모리', 'start': 1317, 'end': 1319, 'type': 'COM'}","{'word': '데이터', 'start': 1329, 'end': 1331, 'type': 'COM'}",no_relation
57,"일반적으로 사용자는 컴파일러의 내부가 어떻게 동작하는지 몰라도 프로그램을 만들 수 있다. 'MyData'는 간단한 변수(variable)이고, 한 개의 정수만 변수에 담을 수 있다.","{'word': '컴파일러', 'start': 1366, 'end': 1369, 'type': 'COM'}","{'word': '프로그램', 'start': 1390, 'end': 1393, 'type': 'COM'}",no_relation
58,여러 개의 변수를 만들고 싶으면 아주 간단하게 배열(array)을 만들 수 있다.,"{'word': '변수', 'start': 1463, 'end': 1464, 'type': 'COM'}","{'word': '배열(array)', 'start': 1483, 'end': 1491, 'type': 'COM'}",no_relation
59,소프트웨어 공학의 발달로 보다 복잡한 자료형들이 필요해졌다.,"{'word': '소프트웨어 공학', 'start': 1540, 'end': 1547, 'type': 'COM'}","{'word': '자료형', 'start': 1561, 'end': 1563, 'type': 'COM'}",no_relation
60,"따라서, 위와 같은 변수나 배열의 선언만으로는 이런 정보들을 잘 정의하기가 어렵다.","{'word': '변수', 'start': 1666, 'end': 1667, 'type': 'COM'}","{'word': '배열', 'start': 1670, 'end': 1671, 'type': 'COM'}",no_relation
61,C 언어와 같은 고급 언어(high-level language)는 보다 정교한 자료형의 선언을 지원하여 여러 가지 다른 형식의 데이터 선언들을 한데 엮은 새로운 자료형을 만들 수 있다.,"{'word': 'C 언어와 같은 고급 언어(high-level language)', 'start': 1702, 'end': 1736, 'type': 'COM'}","{'word': '자료형', 'start': 1746, 'end': 1748, 'type': 'COM'}",no_relation
62,이러한 데이터들을 활용하기 위해서는 컴퓨터에게 지시를 내려야 한다.,"{'word': '데이터', 'start': 1931, 'end': 1933, 'type': 'COM'}","{'word': '컴퓨터', 'start': 1947, 'end': 1949, 'type': 'COM'}",no_relation
63,프로그램 언어가 상위 레벨로 발전될수록 프로그램은 좀 더 인간의 언어에 가까운 형태가 된다.,"{'word': '프로그램 언어', 'start': 2115, 'end': 2121, 'type': 'COM'}","{'word': '프로그램', 'start': 2137, 'end': 2140, 'type': 'COM'}",no_relation
64,이에 따라 프로그램 언어의 학습과 프로그램의 구현이 보다 수월해진다.,"{'word': '프로그램 언어', 'start': 2173, 'end': 2179, 'type': 'COM'}","{'word': '프로그램의 구현', 'start': 2186, 'end': 2193, 'type': 'COM'}",no_relation
65,지시문들을 한데 묶어 놓은 것들을 함수(function)이라 한다.,"{'word': '지시문', 'start': 2275, 'end': 2277, 'type': 'COM'}","{'word': '함수(function)', 'start': 2294, 'end': 2305, 'type': 'COM'}",no_relation
66,함수는 특정한 동작을 일반적인 형태로 정의해 놓은 지시문의 집합이다.,"{'word': '함수', 'start': 2313, 'end': 2314, 'type': 'COM'}","{'word': '지시문', 'start': 2341, 'end': 2343, 'type': 'COM'}",no_relation
67,똑같은 동작이 필요하면 지시문을 다시 작성할 필요없이 함수의 매개변수를 이용하여 계속 사용할 수 있다.,"{'word': '지시문', 'start': 2365, 'end': 2367, 'type': 'COM'}","{'word': '함수의 매개변수', 'start': 2382, 'end': 2389, 'type': 'COM'}",no_relation
68,"컴퓨터용으로 설계될 초기의 고급 프로그래밍 언어는 Plankalkül였으며, 콘라트 추제가 1943년부터 1945년까지 독일의 Z3용으로 개발될 것이었다.","{'word': '콘라트 추제', 'start': 744, 'end': 749, 'type': 'PER'}","{'word': 'Plankalkül', 'start': 729, 'end': 738, 'type': 'COM'}",per:production
69,함수들에 경계 검사와 자동 버퍼 할당을 채택하는 것을 제안하기 위해 ISO C 윈원회는 기술 보고서 TR 24731-1를 발행하였고 TR 24731-2를 작성중에 있다.,"{'word': 'ISO C 윈원회', 'start': 2137, 'end': 2145, 'type': 'ORG'}","{'word': '기술 보고서 TR 24731-1', 'start': 2148, 'end': 2164, 'type': 'POH'}",org:production
70,유닉스와 C는 모두 벨 연구소에서 1960년대에에서 1970년대에 만들어졌다.,"{'word': '유닉스와 C', 'start': 2791, 'end': 2796, 'type': 'COM'}","{'word': '1960년대에에서 1970년대', 'start': 2810, 'end': 2825, 'type': 'DAT'}",com:date_of_prod
71,1983년 미국 국립 표준 협회(ANSI)는 위원회를 구성해서 C의 표준 명세를 확립하였고 이것은 ANSI C로 불린다.,"{'word': 'C의 표준 명세', 'start': 2978, 'end': 2985, 'type': 'COM'}","{'word': '1983년', 'start': 2943, 'end': 2947, 'type': 'DAT'}",com:date_of_prod
72,이 작업은 1989년 C89라고 불리는 것이 만들어짐으로써 끝이나게 된다.,"{'word': 'C89', 'start': 3023, 'end': 3025, 'type': 'COM'}","{'word': '1989', 'start': 3017, 'end': 3020, 'type': 'DAT'}",com:date_of_prod
73,이것은 1994년 릴리즈된 4.4BSD에서 처음 선보여졌다.,"{'word': '4.4BSD', 'start': 3422, 'end': 3427, 'type': 'COM'}","{'word': '1994년', 'start': 3411, 'end': 3415, 'type': 'DAT'}",com:date_of_prod
74,각 헤더 파일은 하나 이상의 함수 정의와 데이터 타입 정의 그리고 매크로들을 포함한다.,"{'word': '헤더 파일', 'start': 338, 'end': 342, 'type': 'COM'}","{'word': '하나 이상의 함수 정의', 'start': 345, 'end': 356, 'type': 'COM'}",com:sub_concept
75,각 헤더 파일은 하나 이상의 함수 정의와 데이터 타입 정의 그리고 매크로들을 포함한다.,"{'word': '헤더 파일', 'start': 338, 'end': 342, 'type': 'COM'}","{'word': '데이터 타입 정의', 'start': 359, 'end': 367, 'type': 'COM'}",com:sub_concept
76,각 헤더 파일은 하나 이상의 함수 정의와 데이터 타입 정의 그리고 매크로들을 포함한다.,"{'word': '헤더 파일', 'start': 338, 'end': 342, 'type': 'COM'}","{'word': '매크로들', 'start': 373, 'end': 376, 'type': 'COM'}",com:sub_concept
77,"유닉스 계열 시스템들은 일반적으로 공유 라이브러리 형태로 C 라이브러리를 가지지만, 헤더 파일들이 설치 시에 존재하지 않아서 C 개발이 불가능할 수도 있다.","{'word': '유닉스 계열 시스템', 'start': 572, 'end': 581, 'type': 'COM'}","{'word': 'C 라이브러리', 'start': 604, 'end': 610, 'type': 'COM'}",com:sub_concept
78,C 라이브러리는 유닉스 계열 운영 체제에서 한 부분으로 여겨진다.,"{'word': '유닉스 계열 운영 체제', 'start': 669, 'end': 680, 'type': 'COM'}","{'word': 'C 라이브러리', 'start': 660, 'end': 666, 'type': 'COM'}",com:sub_concept
79,"ISO C 표준을 포함한 C 함수들은 프로그램들에서 널리 사용되지만, 운영 체제 인터페이스의 한 부분이다.","{'word': '운영 체제 인터페이스', 'start': 736, 'end': 746, 'type': 'COM'}","{'word': 'ISO C 표준을 포함한 C 함수', 'start': 697, 'end': 714, 'type': 'COM'}",com:sub_concept
80,"마이크로소프트 윈도우에서, 핵심 시스템 동적 라이브러리들은 C 표준 라이브러리의 구현을 제공한다.","{'word': '마이크로소프트 윈도우', 'start': 800, 'end': 810, 'type': 'COM'}","{'word': '핵심 시스템 동적 라이브러리', 'start': 815, 'end': 829, 'type': 'COM'}",com:sub_concept
81,컴파일러의 C 라이브러리에 존재하는 함수들은 마이크로소프트 윈도우와의 인터페이스로 여겨지지 않는다.,"{'word': '컴파일러', 'start': 919, 'end': 922, 'type': 'COM'}","{'word': 'C 라이브러리에 존재하는 함수', 'start': 925, 'end': 940, 'type': 'COM'}",com:sub_concept
82,"몇몇 컴파일러들은(예를 들면GCC) C 표준 라이브러리에서 많은 함수들의 빌트인 버전들을 제공한다; 즉, 함수들의 구현들은 컴파일된 목적 파일로 쓰여지며 프로그램은 C 라이브러리 공유 목적 파일에 있는 함수들 대신 빌트인 버전들을 호출한다.","{'word': '컴파일러', 'start': 1033, 'end': 1036, 'type': 'COM'}","{'word': 'GCC', 'start': 1045, 'end': 1047, 'type': 'COM'}",com:sub_concept
83,호스트된 구현은 C 표준에 명시된 모든 헤더들을 갖는다.,"{'word': '호스트된 구현', 'start': 1730, 'end': 1736, 'type': 'COM'}","{'word': 'C 표준에 명시된 모든 헤더', 'start': 1739, 'end': 1753, 'type': 'COM'}",com:sub_concept
84,"그럼에도 불구하고TR 24731-1는 마이크로소프트의 C 표준 라이브러리에 구현되었으며, 이것의 컴파일러는 오래된 불안정한 함수들을 사용할 때 경고를 발생시킨다.","{'word': '마이크로소프트의 C 표준 라이브러리', 'start': 2251, 'end': 2269, 'type': 'COM'}","{'word': 'TR 24731-1', 'start': 2239, 'end': 2248, 'type': 'COM'}",com:sub_concept
85,"소수의 함수들은 errno를 설정하지만, 예외를 일으키지는 않는다.","{'word': '함수', 'start': 2578, 'end': 2579, 'type': 'COM'}","{'word': 'errno', 'start': 2583, 'end': 2587, 'type': 'COM'}",com:sub_concept
86,"POSIX, 또는SUS는 기본 C 표준 라이브러리에서 사용 가능한 많은 수의 루틴들을 명시하였다.","{'word': 'POSIX', 'start': 3053, 'end': 3057, 'type': 'COM'}","{'word': '기본 C 표준 라이브러리에서 사용 가능한 많은 수의 루틴', 'start': 3067, 'end': 3097, 'type': 'COM'}",com:sub_concept
87,"POSIX, 또는SUS는 기본 C 표준 라이브러리에서 사용 가능한 많은 수의 루틴들을 명시하였다.","{'word': 'SUS', 'start': 3062, 'end': 3064, 'type': 'COM'}","{'word': '기본 C 표준 라이브러리에서 사용 가능한 많은 수의 루틴', 'start': 3067, 'end': 3097, 'type': 'COM'}",com:sub_concept
88,"POSIX 명세는 멀티 스레드, 네트워킹 그리고 정규 표현식에 대한 헤더 파일들을 포함한다.","{'word': 'POSIX 명세', 'start': 3108, 'end': 3115, 'type': 'COM'}","{'word': '멀티 스레드, 네트워킹 그리고 정규 표현식에 대한 헤더 파일', 'start': 3118, 'end': 3150, 'type': 'COM'}",com:sub_concept
89,예를 들면glibc는codice_19내의 fork 같은 함수들을 구현하였다.,"{'word': 'glibc', 'start': 3203, 'end': 3207, 'type': 'COM'}","{'word': 'codice_19내의 fork 같은 함수', 'start': 3209, 'end': 3230, 'type': 'COM'}",com:sub_concept
90,종종 POSIX 명세의 기능은 라이브러리의 한 부분으로 여겨질 수 있다; 기본 C 라이브러리는 ANSI 또는 ISO C 라이브러리로 식별된다.,"{'word': '라이브러리', 'start': 3258, 'end': 3262, 'type': 'COM'}","{'word': 'POSIX 명세의 기능', 'start': 3244, 'end': 3255, 'type': 'COM'}",com:sub_concept
91,"BSD libc는 POSIX 표준 라이브러리의 상위 집합으로서 FreeBSD, NetBSD, OpenBSD그리고OSX같은 BSD 운영 체제에서 사용된다.","{'word': 'BSD libc', 'start': 3321, 'end': 3328, 'type': 'COM'}","{'word': 'POSIX 표준 라이브러리', 'start': 3331, 'end': 3344, 'type': 'COM'}",com:sub_concept
92,BSD libc는 원본 표준에서 정의되지 않은 몇몇 확장들을 갖는다.,"{'word': 'BSD libc', 'start': 3441, 'end': 3448, 'type': 'COM'}","{'word': '원본 표준에서 정의되지 않은 몇몇 확장', 'start': 3451, 'end': 3471, 'type': 'COM'}",com:sub_concept
93,몇몇 언어들은 자신의 라이브러리에 표준 C 라이브러리의 기능을 포함한다.,"{'word': '몇몇 언어', 'start': 3530, 'end': 3534, 'type': 'COM'}","{'word': '표준 C 라이브러리의 기능', 'start': 3549, 'end': 3562, 'type': 'COM'}",com:sub_concept
94,"예를 들면 C++ 언어는 이름공간codice_33 (예를 들면codice_34, codice_35, codice_36)에서 C 표준 라이브러리의 기능을 포함하는데, 헤더 파일도 C의 것과 비슷하다(codice_37, codice_38, codice_39, 등). 다른 언어들은 D와 비슷한 접근법을 갖는데 파이썬의 경우 C파이썬이 있다.","{'word': 'C++ 언어', 'start': 3625, 'end': 3630, 'type': 'COM'}","{'word': 'C 표준 라이브러리의 기능', 'start': 3688, 'end': 3701, 'type': 'COM'}",com:sub_concept
95,"C 라이브러리는 수학, 문자열 조작, 형 변환 그리고 파일과 콘솔 기반 입출력 함수들의 기본 집합을 제공한다.","{'word': 'C 라이브러리', 'start': 4011, 'end': 4017, 'type': 'COM'}","{'word': '수학, 문자열 조작, 형 변환 그리고 파일과 콘솔 기반 입출력 함수들의 기본 집합', 'start': 4020, 'end': 4064, 'type': 'COM'}",com:sub_concept
96,"ANSI C가 국제 표준화 기구에 의해서 채택됨에 따라,C 표준 라이브러리는 또한 ISO C library로도 불린다.","{'word': 'C 표준 라이브러리', 'start': 142, 'end': 151, 'type': 'COM'}","{'word': 'ISO C library', 'start': 157, 'end': 169, 'type': 'COM'}",com:alter_names
97,1983년 미국 국립 표준 협회(ANSI)는 위원회를 구성해서 C의 표준 명세를 확립하였고 이것은 ANSI C로 불린다.,"{'word': 'C의 표준 명세', 'start': 2978, 'end': 2985, 'type': 'COM'}","{'word': 'ANSI C', 'start': 2998, 'end': 3003, 'type': 'COM'}",com:alter_names
98,종종 POSIX 명세의 기능은 라이브러리의 한 부분으로 여겨질 수 있다; 기본 C 라이브러리는 ANSI 또는 ISO C 라이브러리로 식별된다.,"{'word': '기본 C 라이브러리', 'start': 3282, 'end': 3291, 'type': 'COM'}","{'word': 'ANSI', 'start': 3294, 'end': 3297, 'type': 'COM'}",com:alter_names
99,종종 POSIX 명세의 기능은 라이브러리의 한 부분으로 여겨질 수 있다; 기본 C 라이브러리는 ANSI 또는 ISO C 라이브러리로 식별된다.,"{'word': '기본 C 라이브러리', 'start': 3282, 'end': 3291, 'type': 'COM'}","{'word': 'ISO C 라이브러리', 'start': 3302, 'end': 3312, 'type': 'COM'}",com:alter_names
100,"예를 들면 파이썬 2에서 빌트인 파일 객체들은 ""C의codice_40패키지를 사용해서 구현되었다""고 정의되어서, 사용 가능한 연산들(open, read, write 등)은 상응하는 C 함수들과 같은 동작을 한다고 기대할 수 있다.","{'word': '파이썬 2에서 빌트인 파일 객체', 'start': 3814, 'end': 3830, 'type': 'COM'}","{'word': 'C의codice_40패키지', 'start': 3835, 'end': 3848, 'type': 'COM'}",com:made_of
101,1970년대 동안 C 언어는 점점 유명해 졌다.,"{'word': 'C 언어', 'start': 2845, 'end': 2848, 'type': 'COM'}","{'word': '1970년대', 'start': 2835, 'end': 2840, 'type': 'DAT'}",no_relation
102,"C 표준 라이브러리(C standard library)는 C 언어를 위한 표준 라이브러리로서, ANSI C 표준에 의해 명시되었다.","{'word': 'C 언어', 'start': 32, 'end': 35, 'type': 'COM'}","{'word': 'ANSI C 표준', 'start': 53, 'end': 61, 'type': 'COM'}",no_relation
103,"C 표준 라이브러리는 매크로, 타입 정의 그리고 문자열 처리나 수학적 연산, 입출력 프로세스, 메모리 할당과 다른 운영 체제 서비스 같은 작업을 위한 함수들을 제공한다.","{'word': 'C 표준 라이브러리', 'start': 178, 'end': 187, 'type': 'COM'}","{'word': '운영 체제 서비스', 'start': 242, 'end': 250, 'type': 'COM'}",no_relation
104,C 표준 라이브러리의 API는 많은 헤더 파일들에 정의되어 있다.,"{'word': 'C 표준 라이브러리', 'start': 299, 'end': 308, 'type': 'COM'}","{'word': '헤더 파일', 'start': 319, 'end': 323, 'type': 'COM'}",no_relation
105,"세 헤더 파일들의(codice_1, codice_2,codice_3) 구현은 필수는 아니다.","{'word': '헤더 파일', 'start': 387, 'end': 391, 'type': 'COM'}","{'word': 'codice_1', 'start': 395, 'end': 402, 'type': 'COM'}",no_relation
106,POSIX표준은 유닉스를 위한 기능을 위해 여러 표준이 아닌 C 헤더들을 추가하였다.,"{'word': 'POSIX표준', 'start': 437, 'end': 443, 'type': 'COM'}","{'word': 'C 헤더', 'start': 471, 'end': 474, 'type': 'COM'}",no_relation
107,예를 들면codice_4그리고codice_5가 있다.,"{'word': 'codice_4', 'start': 490, 'end': 497, 'type': 'COM'}","{'word': 'codice_5', 'start': 501, 'end': 508, 'type': 'COM'}",no_relation
108,유닉스 계열 시스템들에서 실제 구현된 API의 권위 있는 문서화는 man page의 형태로 제공된다.,"{'word': '유닉스 계열 시스템', 'start': 515, 'end': 524, 'type': 'COM'}","{'word': 'man page', 'start': 552, 'end': 559, 'type': 'COM'}",no_relation
109,유닉스 계열 시스템들은 일반적으로 C 라이브러리가 제거되면 동작할 수 없다.,"{'word': '유닉스 계열 시스템', 'start': 757, 'end': 766, 'type': 'COM'}","{'word': 'C 라이브러리', 'start': 776, 'end': 782, 'type': 'COM'}",no_relation
110,C 로 쓰여진 컴파일된 애플리케이션들은 C 라이브러리와 정적으로 링크되거나 딸려온 라이브러리와 동적으로 링크된다.,"{'word': 'C 로 쓰여진 컴파일된 애플리케이션', 'start': 855, 'end': 873, 'type': 'COM'}","{'word': 'C 라이브러리', 'start': 877, 'end': 883, 'type': 'COM'}",no_relation
111,운영 체제와 C 컴파일러에서 제공되는 많은 구현들이 존재한다.,"{'word': '운영 체제', 'start': 975, 'end': 979, 'type': 'COM'}","{'word': 'C 컴파일러', 'start': 982, 'end': 987, 'type': 'COM'}",no_relation
112,"이것은 특히 만약 함수 호출들이 인라인 형태로 대체된다면 함수 호출 오버헤드를 감소시키며, 최적화의 다른 형태(컴파일러가 빌트인 형태의 제어 흐름 특징을 알 때)를 허용하지만 디버깅 시에 혼란을 야기할 수 있다. (예를 들면 빌트인 버전들은 인스트루멘트된 형태로 대체될 수 없다)","{'word': '함수 호출 오버헤드', 'start': 1197, 'end': 1206, 'type': 'COM'}","{'word': '디버깅', 'start': 1263, 'end': 1265, 'type': 'COM'}",no_relation
113,그러나 빌트인 함수들은 반드시 ISO C에 따라 기본 함수들처럼 행동해야 한다.,"{'word': '빌트인 함수', 'start': 1326, 'end': 1331, 'type': 'COM'}","{'word': 'ISO C', 'start': 1339, 'end': 1343, 'type': 'COM'}",no_relation
114,"중요한 것은 프로그램이 반드시 이러한 함수들을 가리키는 포인터를 주소를 사용해서 생성할 수 있어야 하고, 이 포인터로 함수를 발생시킬 수 있어야 한다.","{'word': '프로그램', 'start': 1374, 'end': 1377, 'type': 'COM'}","{'word': '포인터', 'start': 1398, 'end': 1400, 'type': 'COM'}",no_relation
115,"만약 같은 함수에 대한 두 포인터들이 프로그램에서 두 다른 변환 유닛으로 만들어진다면, 이러한 두 포인터들은 반드시 같아야 한다.","{'word': '포인터', 'start': 1467, 'end': 1469, 'type': 'COM'}","{'word': '프로그램', 'start': 1473, 'end': 1476, 'type': 'COM'}",no_relation
116,"리눅스 그리고 FreeBSD에서,수학 함수들(codice_6에 정의된)은 수학 라이브러리libm에서 따로 묶어져야 한다.","{'word': '리눅스', 'start': 1561, 'end': 1563, 'type': 'COM'}","{'word': 'FreeBSD', 'start': 1569, 'end': 1575, 'type': 'COM'}",no_relation
117,"만약 이것들 중 어느 것이 사용된다면, 링커는 반드시 지시자codice_7을 받아야 한다.","{'word': '링커', 'start': 1651, 'end': 1652, 'type': 'COM'}","{'word': '지시자codice_7', 'start': 1659, 'end': 1669, 'type': 'COM'}",no_relation
118,"C 표준에 따르면, 만약 구현이 호스트된다면 매크로codice_8는 1로 정의될 것이다.","{'word': 'C 표준', 'start': 1680, 'end': 1683, 'type': 'COM'}","{'word': '매크로codice_8', 'start': 1705, 'end': 1715, 'type': 'COM'}",no_relation
119,"구현은 또한 ""freestanding""일 수 있는데 이것은 이러한 헤더들이 존재하지 않는다는 의미이다.","{'word': 'freestanding', 'start': 1770, 'end': 1781, 'type': 'COM'}","{'word': '헤더', 'start': 1799, 'end': 1800, 'type': 'COM'}",no_relation
120,"만약 구현이""freestanding""이라면, 이것은codice_8을0으로 정의할 것이다.","{'word': 'freestanding', 'start': 1827, 'end': 1838, 'type': 'COM'}","{'word': 'codice_8', 'start': 1848, 'end': 1855, 'type': 'COM'}",no_relation
121,C 표준 라이브러리에 있는 몇몇 함수들은 버퍼 오버플로우 취약점들과 채택 이후의 버그를 유발하는 프로그래밍을 조장하는 것으로 악명 높다.,"{'word': 'C 표준 라이브러리', 'start': 1870, 'end': 1879, 'type': 'COM'}","{'word': '버그', 'start': 1915, 'end': 1916, 'type': 'COM'}",no_relation
122,"codice_13를 사용한 극단적인 경우를 제외하고, 모든 보안 취약점들은 보조 코드가 메모리 관리, 경계 검사, 입력 검사 등을 수행하게 함으로써 피할 수 있다.","{'word': 'codice_13', 'start': 1947, 'end': 1955, 'type': 'COM'}","{'word': '메모리 관리', 'start': 1996, 'end': 2001, 'type': 'COM'}",no_relation
123,이것은 종종 표준 라이브러리 함수들을 사용하기 쉽고 안전하게 만들어 주는 래퍼의 형태를 통해 가능해 진다.,"{'word': '표준 라이브러리 함수', 'start': 2046, 'end': 2056, 'type': 'COM'}","{'word': '래퍼', 'start': 2080, 'end': 2081, 'type': 'COM'}",no_relation
124,codice_16과codice_17루틴들은 스레드 안전와 경쟁 상태에 대한 취약점 때문에 비판을 받았다.,"{'word': 'codice_16', 'start': 2344, 'end': 2352, 'type': 'COM'}","{'word': 'codice_17', 'start': 2354, 'end': 2362, 'type': 'COM'}",no_relation
125,C 표준 라이브러리에서 함수들의 오류 처리는 일관되지 않으며 가끔은 혼란스럽다.,"{'word': 'C 표준 라이브러리', 'start': 2403, 'end': 2412, 'type': 'COM'}","{'word': '함수', 'start': 2416, 'end': 2417, 'type': 'COM'}",no_relation
126,"""glibc 하의 현재(버전 2.8) 상황은 엉망이다.","{'word': 'glibc', 'start': 2486, 'end': 2490, 'type': 'COM'}","{'word': '버전 2.8', 'start': 2498, 'end': 2503, 'type': 'COM'}",no_relation
127,대부분의(모두는 아니지만) 함수들은 오류들에 대해 예외를 일으킨다.,"{'word': '함수', 'start': 2531, 'end': 2532, 'type': 'COM'}","{'word': '오류', 'start': 2536, 'end': 2537, 'type': 'COM'}",no_relation
128,"다른 언어들과 달리, 원본 C 언어는 입출력 동작 같은 빌트인 함수들을 제공하지 않았다.","{'word': 'C 언어', 'start': 2653, 'end': 2656, 'type': 'COM'}","{'word': '빌트인 함수', 'start': 2669, 'end': 2674, 'type': 'COM'}",no_relation
129,많은 대학교들과 단체들이 자신의 프로젝트를 위해 이 언어를 자신만의 형태로 만들었다.,"{'word': '프로젝트', 'start': 2880, 'end': 2883, 'type': 'COM'}","{'word': '언어', 'start': 2891, 'end': 2892, 'type': 'COM'}",no_relation
130,C 표준 라이브러리는 다른 언어들의 표준 라이브러리들과 비교했을 때 작다고 할 수 있다.,"{'word': 'C 표준 라이브러리', 'start': 3961, 'end': 3970, 'type': 'COM'}","{'word': '다른 언어들의 표준 라이브러리', 'start': 3973, 'end': 3988, 'type': 'COM'}",no_relation
131,이것은 C++ 표준 템플릿 라이브러리처럼 컨테이너 타입의 표준 집합을 포함하지 않는다.,"{'word': 'C++ 표준 템플릿 라이브러리', 'start': 4077, 'end': 4092, 'type': 'COM'}","{'word': '컨테이너 타입의 표준 집합', 'start': 4096, 'end': 4109, 'type': 'COM'}",no_relation
132,"이러한 작은 표준 라이브러리의 장점은 일할 ISO C 환경을 다른 언어들 보다 더 쉽게 제공한다는 것이며, 결과적으로 C를 새로운 플랫폼에 포팅하는 것이 상대적으로 쉽게 된다.","{'word': '표준 라이브러리', 'start': 4129, 'end': 4136, 'type': 'COM'}","{'word': 'ISO C 환경', 'start': 4146, 'end': 4153, 'type': 'COM'}",no_relation
133,"BSD libc는 POSIX 표준 라이브러리의 상위 집합으로서 FreeBSD, NetBSD, OpenBSD그리고OSX같은 BSD 운영 체제에서 사용된다.","{'word': 'BSD 운영 체제', 'start': 3389, 'end': 3397, 'type': 'COM'}","{'word': 'NetBSD', 'start': 3365, 'end': 3370, 'type': 'COM'}",com:similar_tech
134,"BSD libc는 POSIX 표준 라이브러리의 상위 집합으로서 FreeBSD, NetBSD, OpenBSD그리고OSX같은 BSD 운영 체제에서 사용된다.","{'word': 'BSD 운영 체제', 'start': 3389, 'end': 3397, 'type': 'COM'}","{'word': 'OpenBSD', 'start': 3373, 'end': 3379, 'type': 'COM'}",com:similar_tech
135,"BSD libc는 POSIX 표준 라이브러리의 상위 집합으로서 FreeBSD, NetBSD, OpenBSD그리고OSX같은 BSD 운영 체제에서 사용된다.","{'word': 'BSD 운영 체제', 'start': 3389, 'end': 3397, 'type': 'COM'}","{'word': 'OSX', 'start': 3383, 'end': 3385, 'type': 'COM'}",com:similar_tech
136,"BSD libc는 POSIX 표준 라이브러리의 상위 집합으로서 FreeBSD, NetBSD, OpenBSD그리고OSX같은 BSD 운영 체제에서 사용된다.","{'word': 'BSD 운영 체제', 'start': 3389, 'end': 3397, 'type': 'COM'}","{'word': 'FreeBSD', 'start': 3356, 'end': 3362, 'type': 'COM'}",com:similar_tech
137,"예를 들면 C++ 언어는 이름공간codice_33 (예를 들면codice_34, codice_35, codice_36)에서 C 표준 라이브러리의 기능을 포함하는데, 헤더 파일도 C의 것과 비슷하다(codice_37, codice_38, codice_39, 등). 다른 언어들은 D와 비슷한 접근법을 갖는데 파이썬의 경우 C파이썬이 있다.","{'word': 'codice_33', 'start': 3637, 'end': 3645, 'type': 'COM'}","{'word': 'codice_34', 'start': 3653, 'end': 3661, 'type': 'COM'}",com:similar_tech
138,"예를 들면 C++ 언어는 이름공간codice_33 (예를 들면codice_34, codice_35, codice_36)에서 C 표준 라이브러리의 기능을 포함하는데, 헤더 파일도 C의 것과 비슷하다(codice_37, codice_38, codice_39, 등). 다른 언어들은 D와 비슷한 접근법을 갖는데 파이썬의 경우 C파이썬이 있다.","{'word': 'codice_33', 'start': 3637, 'end': 3645, 'type': 'COM'}","{'word': 'codice_35', 'start': 3664, 'end': 3672, 'type': 'COM'}",com:similar_tech
139,"예를 들면 C++ 언어는 이름공간codice_33 (예를 들면codice_34, codice_35, codice_36)에서 C 표준 라이브러리의 기능을 포함하는데, 헤더 파일도 C의 것과 비슷하다(codice_37, codice_38, codice_39, 등). 다른 언어들은 D와 비슷한 접근법을 갖는데 파이썬의 경우 C파이썬이 있다.","{'word': 'codice_33', 'start': 3637, 'end': 3645, 'type': 'COM'}","{'word': 'codice_36', 'start': 3675, 'end': 3683, 'type': 'COM'}",com:similar_tech
140,"예를 들면 파이썬 2에서 빌트인 파일 객체들은 ""C의codice_40패키지를 사용해서 구현되었다""고 정의되어서, 사용 가능한 연산들(open, read, write 등)은 상응하는 C 함수들과 같은 동작을 한다고 기대할 수 있다.","{'word': '사용 가능한 연산', 'start': 3871, 'end': 3879, 'type': 'COM'}","{'word': 'open', 'start': 3882, 'end': 3885, 'type': 'COM'}",com:similar_tech
141,"예를 들면 파이썬 2에서 빌트인 파일 객체들은 ""C의codice_40패키지를 사용해서 구현되었다""고 정의되어서, 사용 가능한 연산들(open, read, write 등)은 상응하는 C 함수들과 같은 동작을 한다고 기대할 수 있다.","{'word': '사용 가능한 연산', 'start': 3871, 'end': 3879, 'type': 'COM'}","{'word': 'read', 'start': 3888, 'end': 3891, 'type': 'COM'}",com:similar_tech
142,"예를 들면 파이썬 2에서 빌트인 파일 객체들은 ""C의codice_40패키지를 사용해서 구현되었다""고 정의되어서, 사용 가능한 연산들(open, read, write 등)은 상응하는 C 함수들과 같은 동작을 한다고 기대할 수 있다.","{'word': '사용 가능한 연산', 'start': 3871, 'end': 3879, 'type': 'COM'}","{'word': 'write', 'start': 3894, 'end': 3898, 'type': 'COM'}",com:similar_tech
143,시간이 지나면서 C의 사용자 커뮤니티들은 생각을 공유하고 현재 C 표준 라이브러리라고 불리는 것을 구현하였다.,"{'word': 'C의 사용자 커뮤니티', 'start': 2697, 'end': 2707, 'type': 'ORG'}","{'word': '현재 C 표준 라이브러리', 'start': 2720, 'end': 2732, 'type': 'COM'}",org:production
144,유닉스와 C는 모두 벨 연구소에서 1960년대에에서 1970년대에 만들어졌다.,"{'word': '벨 연구소', 'start': 2802, 'end': 2806, 'type': 'ORG'}","{'word': '유닉스와 C', 'start': 2791, 'end': 2796, 'type': 'COM'}",org:production
145,"이반 서덜랜드가 1963년에 개발한 스케치패드는 컴퓨터 지원 설계(CAD) 소프트웨어의 조상이자 최초로 완전한 그래픽 사용자 인터페이스를 구현한 것이었으며, 비슷한 시기에 더글라스 엥겔바트를 비롯한 SRI 인터내셔널의 연구자들은 하이퍼링크를 기반으로 마우스를 사용하는 NLS(On-line System)를 개발하였다.","{'word': '스케치패드', 'start': 802, 'end': 806, 'type': 'COM'}","{'word': '1963년', 'start': 791, 'end': 795, 'type': 'DAT'}",com:date_of_prod
146,"NLS의 하이퍼링크 개념은 제록스 파크에서 그래픽으로 확장되었으며, 1973년에 개발된 제록스 알토 컴퓨터는 그래픽 사용자 인터페이스를 사용하는 최초의 컴퓨터가 되었다.","{'word': '제록스 알토 컴퓨터', 'start': 1009, 'end': 1018, 'type': 'COM'}","{'word': '1973년', 'start': 998, 'end': 1002, 'type': 'DAT'}",com:date_of_prod
147,1981년에 개인용 컴퓨터인 1983년에 그래픽 사용자 인터페이스에 기반한 컴퓨터 리사(LISA)를 출시했지만 값이 너무 비싼 탓에 실패하였다.,"{'word': '리사(LISA)', 'start': 1379, 'end': 1386, 'type': 'COM'}","{'word': '1983년', 'start': 1349, 'end': 1353, 'type': 'DAT'}",com:date_of_prod
148,그러나 이후 1984년에 나온 애플의 매킨토시는 상업적인 성공을 이뤘다.,"{'word': '매킨토시', 'start': 1435, 'end': 1438, 'type': 'COM'}","{'word': '1984년', 'start': 1421, 'end': 1425, 'type': 'DAT'}",com:date_of_prod
149,1995년 마이크로소프트사가 윈도우 95를 출시하여 성공을 거둠으로써 본격적인 그래픽 사용자 인터페이스의 대중화를 이루었다.,"{'word': '윈도우 95', 'start': 1569, 'end': 1574, 'type': 'COM'}","{'word': '1995년', 'start': 1553, 'end': 1557, 'type': 'DAT'}",com:date_of_prod
150,그래픽 사용자 인터페이스에서 어떤 요소를 제어하려면 그 요소에 해당하는 그래픽을 직접 조작하여야 한다.,"{'word': '그래픽 사용자 인터페이스', 'start': 163, 'end': 175, 'type': 'COM'}","{'word': '요소에 해당하는 그래픽', 'start': 194, 'end': 205, 'type': 'COM'}",com:sub_concept
151,"컴퓨터를 넘어 GUI는 MP3 플레이어 등, 포터블 미디어 플레이어, 게이밍 장치, 스마트폰, 소형 가전, 사무 및 산업 제어 등 수많은 휴대용 모바일 장치에 사용된다.","{'word': '휴대용 모바일 장치', 'start': 598, 'end': 607, 'type': 'COM'}","{'word': 'GUI', 'start': 529, 'end': 531, 'type': 'COM'}",com:sub_concept
152,"윈도우와 리눅스, OS X을 비롯한 대부분의 현대 운영 체제들이 그래픽 사용자 인터페이스를 지원한다.","{'word': '현대 운영 체제', 'start': 641, 'end': 648, 'type': 'COM'}","{'word': '윈도우', 'start': 616, 'end': 618, 'type': 'COM'}",com:sub_concept
153,"윈도우와 리눅스, OS X을 비롯한 대부분의 현대 운영 체제들이 그래픽 사용자 인터페이스를 지원한다.","{'word': '현대 운영 체제', 'start': 641, 'end': 648, 'type': 'COM'}","{'word': '리눅스', 'start': 621, 'end': 623, 'type': 'COM'}",com:sub_concept
154,"윈도우와 리눅스, OS X을 비롯한 대부분의 현대 운영 체제들이 그래픽 사용자 인터페이스를 지원한다.","{'word': '현대 운영 체제', 'start': 641, 'end': 648, 'type': 'COM'}","{'word': 'OS X', 'start': 626, 'end': 629, 'type': 'COM'}",com:sub_concept
155,"윈도우와 리눅스, OS X을 비롯한 대부분의 현대 운영 체제들이 그래픽 사용자 인터페이스를 지원한다.","{'word': '현대 운영 체제', 'start': 641, 'end': 648, 'type': 'COM'}","{'word': '그래픽 사용자 인터페이스', 'start': 652, 'end': 664, 'type': 'COM'}",com:sub_concept
156,"리눅스 및 유닉스 계열 운영 체제에서는 X 윈도 시스템을 주로 사용하며, 모티프, Qt, GTK+ 등의 툴킷으로 확장할 수 있다.","{'word': '리눅스 및 유닉스 계열 운영 체제', 'start': 673, 'end': 690, 'type': 'COM'}","{'word': 'X 윈도 시스템', 'start': 695, 'end': 702, 'type': 'COM'}",com:sub_concept
157,"NLS의 하이퍼링크 개념은 제록스 파크에서 그래픽으로 확장되었으며, 1973년에 개발된 제록스 알토 컴퓨터는 그래픽 사용자 인터페이스를 사용하는 최초의 컴퓨터가 되었다.","{'word': '제록스 알토 컴퓨터', 'start': 1009, 'end': 1018, 'type': 'COM'}","{'word': '그래픽 사용자 인터페이스', 'start': 1021, 'end': 1033, 'type': 'COM'}",com:sub_concept
158,"파크 사용자 인터페이스는 윈도, 메뉴, 아이콘, 라디오 단추, 체크 상자 등의 그래픽 요소들을 사용하며, 마우스와 같은 포인팅 장치를 키보드와 함께 사용한다.","{'word': '파크 사용자 인터페이스', 'start': 1145, 'end': 1156, 'type': 'COM'}","{'word': '윈도, 메뉴, 아이콘, 라디오 단추, 체크 상자 등의 그래픽 요소', 'start': 1159, 'end': 1194, 'type': 'COM'}",com:sub_concept
159,"파크 사용자 인터페이스는 윈도, 메뉴, 아이콘, 라디오 단추, 체크 상자 등의 그래픽 요소들을 사용하며, 마우스와 같은 포인팅 장치를 키보드와 함께 사용한다.","{'word': '포인팅 장치', 'start': 1212, 'end': 1217, 'type': 'COM'}","{'word': '마우스', 'start': 1204, 'end': 1206, 'type': 'COM'}",com:sub_concept
160,"한편 CUI(character user interface, 명령 줄 인터페이스) OS인 유닉스(UNIX)와 그 계열의 리눅스에서는, X 윈도 시스템을 통해 그래픽 사용자 인터페이스를 구현하고 있다.","{'word': '유닉스(UNIX)와 그 계열의 리눅스', 'start': 1672, 'end': 1691, 'type': 'COM'}","{'word': '그래픽 사용자 인터페이스', 'start': 1710, 'end': 1722, 'type': 'COM'}",com:sub_concept
161,컴퓨터 자판의 명령어 입력이 요구되는 명령 줄 인터페이스(CLI)의 가파른 학습 곡선에 대응하여 GUI가 도입되었다.,"{'word': '명령 줄 인터페이스', 'start': 437, 'end': 446, 'type': 'COM'}","{'word': 'CLI', 'start': 448, 'end': 450, 'type': 'COM'}",com:alter_names
162,"현재 대부분의 그래픽 사용자 인터페이스들은 기본적으로 이 인터페이스로부터 유래했으며, 어떤 사람들은 이들을 ‘파크 사용자 인터페이스(PUI)’라 부르기도 한다.","{'word': '그래픽 사용자 인터페이스', 'start': 1063, 'end': 1075, 'type': 'COM'}","{'word': '파크 사용자 인터페이스(PUI)', 'start': 1116, 'end': 1132, 'type': 'COM'}",com:alter_names
163,그래픽 사용자 인터페이스()는 사용자가 편리하게 사용할 수 있도록 입출력 등의 기능을 알기 쉬운 아이콘 따위의 그래픽으로 나타낸 것이다.,"{'word': '그래픽 사용자 인터페이스', 'start': 0, 'end': 12, 'type': 'COM'}","{'word': '아이콘 따위의 그래픽', 'start': 54, 'end': 64, 'type': 'COM'}",com:made_of
164,"이반 서덜랜드가 1963년에 개발한 스케치패드는 컴퓨터 지원 설계(CAD) 소프트웨어의 조상이자 최초로 완전한 그래픽 사용자 인터페이스를 구현한 것이었으며, 비슷한 시기에 더글라스 엥겔바트를 비롯한 SRI 인터내셔널의 연구자들은 하이퍼링크를 기반으로 마우스를 사용하는 NLS(On-line System)를 개발하였다.","{'word': '컴퓨터 지원 설계(CAD) 소프트웨어', 'start': 809, 'end': 828, 'type': 'COM'}","{'word': '스케치패드', 'start': 802, 'end': 806, 'type': 'COM'}",com:prior_tech
165,그래픽 사용자 인터페이스의 아이디어는 1960년대에 제안되었다.,"{'word': '그래픽 사용자 인터페이스', 'start': 746, 'end': 758, 'type': 'COM'}","{'word': '1960년대', 'start': 767, 'end': 772, 'type': 'DAT'}",no_relation
166,"컴퓨터를 사용하면서, 화면 위의 물체나 틀, 색상과 같은 그래픽 요소들을 어떠한 기능과 용도를 나타내기 위해 고안된 사용자를 위한 컴퓨터 인터페이스이다.","{'word': '그래픽 요소', 'start': 109, 'end': 114, 'type': 'COM'}","{'word': '컴퓨터 인터페이스', 'start': 150, 'end': 158, 'type': 'COM'}",no_relation
167,"이를테면, X자와 같은 형태의 그래픽 요소는 이를 선택하면 삭제하거나 취소하는 기능을 수행하게 되며 어떤 파일을 나타내는 아이콘을 어느 위치에서 다른 하드 디스크의 장소를 나타내는 공간으로 이동하면 복사가 된다.","{'word': '아이콘', 'start': 365, 'end': 367, 'type': 'COM'}","{'word': '하드 디스크', 'start': 381, 'end': 386, 'type': 'COM'}",no_relation
168,GUI의 동작은 일반적으로 그래픽 요소의 직접 조작을 통해 수행된다.,"{'word': 'GUI', 'start': 482, 'end': 484, 'type': 'COM'}","{'word': '그래픽 요소', 'start': 497, 'end': 502, 'type': 'COM'}",no_relation
169,"컴퓨터를 넘어 GUI는 MP3 플레이어 등, 포터블 미디어 플레이어, 게이밍 장치, 스마트폰, 소형 가전, 사무 및 산업 제어 등 수많은 휴대용 모바일 장치에 사용된다.","{'word': '포터블 미디어 플레이어', 'start': 546, 'end': 557, 'type': 'COM'}","{'word': '게이밍 장치', 'start': 560, 'end': 565, 'type': 'COM'}",com:similar_tech
170,"컴퓨터를 넘어 GUI는 MP3 플레이어 등, 포터블 미디어 플레이어, 게이밍 장치, 스마트폰, 소형 가전, 사무 및 산업 제어 등 수많은 휴대용 모바일 장치에 사용된다.","{'word': '포터블 미디어 플레이어', 'start': 546, 'end': 557, 'type': 'COM'}","{'word': '스마트폰', 'start': 568, 'end': 571, 'type': 'COM'}",com:similar_tech
171,"컴퓨터를 넘어 GUI는 MP3 플레이어 등, 포터블 미디어 플레이어, 게이밍 장치, 스마트폰, 소형 가전, 사무 및 산업 제어 등 수많은 휴대용 모바일 장치에 사용된다.","{'word': '포터블 미디어 플레이어', 'start': 546, 'end': 557, 'type': 'COM'}","{'word': '소형 가전', 'start': 574, 'end': 578, 'type': 'COM'}",com:similar_tech
172,"컴퓨터를 넘어 GUI는 MP3 플레이어 등, 포터블 미디어 플레이어, 게이밍 장치, 스마트폰, 소형 가전, 사무 및 산업 제어 등 수많은 휴대용 모바일 장치에 사용된다.","{'word': '포터블 미디어 플레이어', 'start': 546, 'end': 557, 'type': 'COM'}","{'word': '사무 및 산업 제어', 'start': 581, 'end': 590, 'type': 'COM'}",com:similar_tech
173,"리눅스 및 유닉스 계열 운영 체제에서는 X 윈도 시스템을 주로 사용하며, 모티프, Qt, GTK+ 등의 툴킷으로 확장할 수 있다.","{'word': '모티프', 'start': 714, 'end': 716, 'type': 'COM'}","{'word': 'Qt', 'start': 719, 'end': 720, 'type': 'COM'}",com:similar_tech
174,"리눅스 및 유닉스 계열 운영 체제에서는 X 윈도 시스템을 주로 사용하며, 모티프, Qt, GTK+ 등의 툴킷으로 확장할 수 있다.","{'word': '모티프', 'start': 714, 'end': 716, 'type': 'COM'}","{'word': 'GTK+', 'start': 723, 'end': 726, 'type': 'COM'}",com:similar_tech
175,"한편 CUI(character user interface, 명령 줄 인터페이스) OS인 유닉스(UNIX)와 그 계열의 리눅스에서는, X 윈도 시스템을 통해 그래픽 사용자 인터페이스를 구현하고 있다.","{'word': 'CUI(character user interface, 명령 줄 인터페이스) OS', 'start': 1626, 'end': 1669, 'type': 'COM'}","{'word': '유닉스(UNIX)', 'start': 1672, 'end': 1680, 'type': 'COM'}",com:similar_tech
176,이후 애플 컴퓨터는 제록스 파크에서 만든 이러한 그래픽 사용자 인터페이스를 보고 당시 비상장이었던 애플의 주식 액면가 100만 달러 어치를 지불하고 기본적인 기술을 전수받았다.,"{'word': '제록스 파크', 'start': 1245, 'end': 1250, 'type': 'ORG'}","{'word': '그래픽 사용자 인터페이스', 'start': 1261, 'end': 1273, 'type': 'COM'}",org:production
177,그러나 이후 1984년에 나온 애플의 매킨토시는 상업적인 성공을 이뤘다.,"{'word': '애플', 'start': 1431, 'end': 1432, 'type': 'ORG'}","{'word': '매킨토시', 'start': 1435, 'end': 1438, 'type': 'COM'}",org:production
178,한편 매킨토시가 이러한 성공을 거두자 마이크로소프트사는 마이크로소프트 윈도우를 개발하였다.,"{'word': '마이크로소프트사', 'start': 1476, 'end': 1483, 'type': 'ORG'}","{'word': '마이크로소프트 윈도우', 'start': 1486, 'end': 1496, 'type': 'COM'}",org:production
179,1995년 마이크로소프트사가 윈도우 95를 출시하여 성공을 거둠으로써 본격적인 그래픽 사용자 인터페이스의 대중화를 이루었다.,"{'word': '마이크로소프트사', 'start': 1559, 'end': 1566, 'type': 'ORG'}","{'word': '윈도우 95', 'start': 1569, 'end': 1574, 'type': 'COM'}",org:production
180,"이반 서덜랜드가 1963년에 개발한 스케치패드는 컴퓨터 지원 설계(CAD) 소프트웨어의 조상이자 최초로 완전한 그래픽 사용자 인터페이스를 구현한 것이었으며, 비슷한 시기에 더글라스 엥겔바트를 비롯한 SRI 인터내셔널의 연구자들은 하이퍼링크를 기반으로 마우스를 사용하는 NLS(On-line System)를 개발하였다.","{'word': '이반 서덜랜드', 'start': 782, 'end': 788, 'type': 'PER'}","{'word': '스케치패드', 'start': 802, 'end': 806, 'type': 'COM'}",per:production
181,"이반 서덜랜드가 1963년에 개발한 스케치패드는 컴퓨터 지원 설계(CAD) 소프트웨어의 조상이자 최초로 완전한 그래픽 사용자 인터페이스를 구현한 것이었으며, 비슷한 시기에 더글라스 엥겔바트를 비롯한 SRI 인터내셔널의 연구자들은 하이퍼링크를 기반으로 마우스를 사용하는 NLS(On-line System)를 개발하였다.","{'word': '더글라스 엥겔바트를 비롯한 SRI 인터내셔널의 연구자', 'start': 878, 'end': 906, 'type': 'PER'}","{'word': 'NLS(On-line System)', 'start': 932, 'end': 950, 'type': 'COM'}",per:production
182,포트란(Fortran)은 1954년 IBM 704에서 과학적인 계산을 하기 위해 시작된 컴퓨터 프로그램 언어이다.,"{'word': 'IBM', 'start': 20, 'end': 22, 'type': 'ORG'}","{'word': '포트란(Fortran)', 'start': 0, 'end': 11, 'type': 'POH'}",org:production
183,"현재 J3는 WG5의 지시 하에 활동하고 있으며, WG5를 구성하는 가장 큰 부분이다.","{'word': 'WG5', 'start': 1231, 'end': 1233, 'type': 'ORG'}","{'word': 'J3', 'start': 1227, 'end': 1228, 'type': 'ORG'}",org:members
184,포트란(Fortran)은 1954년 IBM 704에서 과학적인 계산을 하기 위해 시작된 컴퓨터 프로그램 언어이다.,"{'word': '포트란(Fortran)', 'start': 0, 'end': 11, 'type': 'COM'}","{'word': '1954년', 'start': 14, 'end': 18, 'type': 'DAT'}",com:date_of_prod
185,"이후 1956년 첫 번째 포트란 매뉴얼이 발표되었고, 1957년 대중에 첫 포트란 컴파일러가 등장한다.","{'word': '포트란 매뉴얼', 'start': 1374, 'end': 1380, 'type': 'COM'}","{'word': '1956년', 'start': 1363, 'end': 1367, 'type': 'DAT'}",com:date_of_prod
186,"이후 1956년 첫 번째 포트란 매뉴얼이 발표되었고, 1957년 대중에 첫 포트란 컴파일러가 등장한다.","{'word': '포트란 컴파일러', 'start': 1402, 'end': 1409, 'type': 'COM'}","{'word': '1957년', 'start': 1390, 'end': 1394, 'type': 'DAT'}",com:date_of_prod
187,"이에 Business Equipment Manufacturers Association(BEMA)은 표준화에 대한 논의를 시작하며, ANSI에 표준 문법을 제출한다. 1966년 ANSI의 승인을 얻게 되며, 첫 미국 포트란 표준이 발표된다.","{'word': '포트란 표준', 'start': 1719, 'end': 1724, 'type': 'COM'}","{'word': '1966년', 'start': 1691, 'end': 1695, 'type': 'DAT'}",com:date_of_prod
188,위와 같이 특히 자연과학이나 공학에서의 중요한 거대한 계산문제들을 슈퍼컴퓨터들을 이용하여 해결하는 데 있어서 C언어와 같이 범용프로그래밍 언어에 속하는 프로그래밍언어들에 비해 탁월한 효율이 있는 과학계산 전문 언어이다.,"{'word': '범용프로그래밍 언어', 'start': 639, 'end': 648, 'type': 'COM'}","{'word': 'C언어', 'start': 631, 'end': 633, 'type': 'COM'}",com:sub_concept
189,"""최초의 고급 프로그래밍 언어""가 등장하게 되자, 여러 벤더에서 다양한 문법을 가진 포트란 컴파일러를 각자의 시스템에 맞게 제작하기 시작하였으며, 1960년대에도 40여가지의 포트란 컴파일러가 존재했다고 한다.","{'word': '포트란 컴파일러', 'start': 1528, 'end': 1535, 'type': 'COM'}","{'word': '다양한 문법', 'start': 1517, 'end': 1522, 'type': 'COM'}",com:sub_concept
190,ANSI FORTRAN 66 표준은 다음과 같은 문법을 포함하고 있다.,"{'word': 'ANSI FORTRAN 66 표준', 'start': 1931, 'end': 1948, 'type': 'COM'}","{'word': '문법', 'start': 1958, 'end': 1959, 'type': 'COM'}",com:sub_concept
191,한편 ANSI FORTRAN 77에 몇 가지 문법이 추가된 미국 국방성(Department of Defence: DoD) 포트란 표준이 발표된다.,"{'word': '미국 국방성(Department of Defence: DoD) 포트란 표준', 'start': 2400, 'end': 2440, 'type': 'COM'}","{'word': 'ANSI FORTRAN 77', 'start': 2370, 'end': 2384, 'type': 'COM'}",com:sub_concept
192,"FORTRAN은 수식(Formula) 변환기(Translation)의 약자이다.(IBM Mathematical ""For""mula ""Tran""slating System에서 유래.) 포트란은 알골과 함께 과학 계산용으로 주로 사용되는 언어이며, 당시 7명의 전문가가 약 2년 반 동안에 걸쳐 완성한 것이 포트란의 기본을 이루었고, 그 후 ANSI와 ISO에서 표준화하였다.","{'word': '수식(Formula) 변환기(Translation)', 'start': 73, 'end': 100, 'type': 'COM'}","{'word': 'FORTRAN', 'start': 64, 'end': 70, 'type': 'COM'}",com:alter_names
193,"Fortran90부터 현재에 까지 ISO, ANSI 모두 포트란에 대한 명칭은 ""Fortran""을 사용한다.","{'word': '포트란', 'start': 1021, 'end': 1023, 'type': 'COM'}","{'word': 'Fortran', 'start': 1034, 'end': 1040, 'type': 'COM'}",com:alter_names
194,"이 ANSI 표준은 FORTRAN 77 이란 이름으로 불리며, 그 공식 문서는 ANSI X3.9-1978이다.","{'word': 'ANSI 표준', 'start': 2199, 'end': 2205, 'type': 'COM'}","{'word': 'FORTRAN 77', 'start': 2208, 'end': 2217, 'type': 'COM'}",com:alter_names
195,"공식적인 표기가 FORTRAN에서 Fortran으로 바뀐 것을 포함하여, 다음과 같은 사항을 표준에 추가하였다.","{'word': 'FORTRAN', 'start': 3067, 'end': 3073, 'type': 'COM'}","{'word': 'Fortran', 'start': 3077, 'end': 3083, 'type': 'COM'}",com:alter_names
196,2017년 11월 12일 WG5의 투표에서 차기 포트란 표준의 이름을 Fortran 2015에서 Fortran 2018로 바꾸는 것이 가결되었다.,"{'word': 'Fortran 2015', 'start': 3990, 'end': 4001, 'type': 'COM'}","{'word': 'Fortran 2018', 'start': 4005, 'end': 4016, 'type': 'COM'}",com:alter_names
197,"1990년대까지 널리 사용되어 왔던 FORTRAN 77에서 현재 Fortran 90/95, Fortran 2003, Fortran 2008등으로 계속 진보하고 있다.","{'word': 'Fortran 90/95, Fortran 2003, Fortran 2008', 'start': 729, 'end': 769, 'type': 'COM'}","{'word': 'FORTRAN 77', 'start': 713, 'end': 722, 'type': 'COM'}",com:prior_tech
198,"FORTRAN77까지 초기의 버전은 그 이름에 대문자를 사용하였으나, 현재는 Fortran으로 첫 문자만을 대문자로 표기한다.","{'word': 'Fortran', 'start': 961, 'end': 967, 'type': 'COM'}","{'word': 'FORTRAN77', 'start': 918, 'end': 926, 'type': 'COM'}",com:prior_tech
199,"포트란 표준 위원회는 10년단위의 major update 와 5년 단기의 minor update를 계획하는데, Fortran 95는 Fortran 90에 대한 minor update로 계획된다.","{'word': 'Fortran 95', 'start': 3374, 'end': 3383, 'type': 'COM'}","{'word': 'Fortran 90', 'start': 3386, 'end': 3395, 'type': 'COM'}",com:prior_tech
200,그 이전엔 프로그래머들이 손수 어셈블리어를 이용해야 했다.,"{'word': '프로그래머', 'start': 1454, 'end': 1458, 'type': 'PER'}","{'word': '어셈블리어', 'start': 1465, 'end': 1469, 'type': 'COM'}",no_relation
201,포트란에 대한 ANSI 표준을 담당하는 위원회는 J3로 불린다.,"{'word': 'J3', 'start': 1151, 'end': 1152, 'type': 'ORG'}","{'word': '포트란', 'start': 1124, 'end': 1126, 'type': 'COM'}",no_relation
202,포트란에 대한 ISO 국제 표준을 담당하는 실무그룹은 ISO/IEC JTC1/SC22/WG5 로 WG5로 불린다.,"{'word': 'WG5', 'start': 1214, 'end': 1216, 'type': 'ORG'}","{'word': '포트란', 'start': 1160, 'end': 1162, 'type': 'COM'}",no_relation
203,"IBM이 가장 영향력이 높았으므로 표준화는 FORTRAN IV 컴파일러를 바탕으로 진행되었으며, 대중에게 FORTRAN IV와 FORTRAN 66은 혼용되어 불리게 된다.","{'word': 'IBM', 'start': 1733, 'end': 1735, 'type': 'ORG'}","{'word': 'FORTRAN IV 컴파일러', 'start': 1757, 'end': 1771, 'type': 'COM'}",no_relation
204,이후 ISO(국제 표준화 기구)에서는 1972년 이 ANSI FORTRAN 66을 그대로 받아들여 포트란 국제 표준으로 받아들인다.,"{'word': 'ISO(국제 표준화 기구', 'start': 1860, 'end': 1872, 'type': 'ORG'}","{'word': 'ANSI FORTRAN 66', 'start': 1886, 'end': 1900, 'type': 'COM'}",no_relation
205,ISO는 이 ANSI FORTRAN 77을 수용하여 포트란 국제 표준으로 받아들인다.,"{'word': 'ISO', 'start': 2259, 'end': 2261, 'type': 'ORG'}","{'word': 'ANSI FORTRAN 77', 'start': 2266, 'end': 2280, 'type': 'COM'}",no_relation
206,"다음은 데이터 카드(천공 카드나 천공 테이프)에서 삼각형의 세 변의 길이를 읽은 후, 헤론의 공식으로 넓이를 구하여 출력하는 예이다.","{'word': '데이터 카드(천공 카드나 천공 테이프)', 'start': 4037, 'end': 4057, 'type': 'COM'}","{'word': '헤론의 공식', 'start': 4081, 'end': 4086, 'type': 'POH'}",no_relation
207,"Fortran 90은 1991년에 ISO에서 먼저 승인을 얻었으며, ISO/IEC 1539:1991(E) 가 ISO Fortran90 이 된다.","{'word': 'Fortran 90', 'start': 2810, 'end': 2819, 'type': 'COM'}","{'word': '1991년', 'start': 2822, 'end': 2826, 'type': 'DAT'}",no_relation
208,"포트란은 산술 기호(+, -, *, / 등)를 그대로 사용할 수 있으며, 삼각함수·지수함수·대수함수 등과 같은 기초적인 수학 함수들을 자연스럽게 불러내어 쓸 수 있으며, 최근 첨단 과학계산에서 필수적인 벡터, 행렬계산기능 등이 내장되어 있는 과학 기술 전문언어이다.","{'word': '포트란', 'start': 271, 'end': 273, 'type': 'COM'}","{'word': '수학 함수', 'start': 338, 'end': 342, 'type': 'COM'}",no_relation
209,"포트란은 기후 및 기상예측, 자원탐사, 우주항공, 유체 및 구조해석, 계산화학, 양자 및 분자 동역학 계산, 천문학, 인공위성을 포함한 군사과학, 자동차 선박 설계, 반도체설계, 금융계산 등 거의 모든 산업분야의 초대형 과학계산 문제의 프로그래밍에 필수적인 언어이다.","{'word': '포트란', 'start': 420, 'end': 422, 'type': 'COM'}","{'word': '프로그래밍', 'start': 552, 'end': 556, 'type': 'COM'}",no_relation
210,다른 컴퓨터 프로그래밍 언어에서도 그렇듯이 ANSI (미국 국립 표준 협회) 와 ISO (국제 표준화 기구)의 두 표준이 통용된다.,"{'word': '컴퓨터 프로그래밍 언어', 'start': 1053, 'end': 1064, 'type': 'COM'}","{'word': 'ANSI (미국 국립 표준 협회)', 'start': 1074, 'end': 1091, 'type': 'COM'}",no_relation
211,FORTRAN 66에 비해서 FORTRAN 77표준은 다음과 같은 몇 가지 특징적인 기능을 포함하게 된다.,"{'word': 'FORTRAN 66', 'start': 2307, 'end': 2316, 'type': 'COM'}","{'word': 'FORTRAN 77표준', 'start': 2323, 'end': 2334, 'type': 'COM'}",no_relation
212,이 후 1980년대 이후에 전 미국에서 발표된 포트란 77 컴파일러 제품들은 대부분 ANSI 표준 뿐만 아니라 이 국방성 표준을 지원하도록 설계되었다.,"{'word': '포트란 77 컴파일러', 'start': 2475, 'end': 2485, 'type': 'COM'}","{'word': 'ANSI 표준', 'start': 2496, 'end': 2502, 'type': 'COM'}",no_relation
213,위 사항 중에서 INCLUDE 문법을 제외한 기능들이 이후 Fortran 90 포트란 표준에 추가된다.,"{'word': 'INCLUDE 문법', 'start': 2603, 'end': 2612, 'type': 'COM'}","{'word': 'Fortran 90 포트란 표준', 'start': 2627, 'end': 2643, 'type': 'COM'}",no_relation
214,컴퓨터 환경은 무어의 법칙이 지배하게 되면서 빠르게 변화되어가는 도중에 FORTRAN 77 표준에 대한 개정은 지지부진하게 되었다.,"{'word': '무어의 법칙', 'start': 2660, 'end': 2665, 'type': 'COM'}","{'word': 'FORTRAN 77 표준', 'start': 2692, 'end': 2704, 'type': 'COM'}",no_relation
215,"차기 버전이 나오기에 15년의 시간이 걸렸으며, 이 길었던 기간 동안 FORTRAN 77 표준은 포트란의 역사에서도 가장 중요한 표준이 되어 버렸다.","{'word': 'FORTRAN 77 표준', 'start': 2765, 'end': 2777, 'type': 'COM'}","{'word': '포트란', 'start': 2780, 'end': 2782, 'type': 'COM'}",no_relation
216,"이전 FORTRAN XX 표준의 의미가 ANSI를 칭하였던 것에 비해, Fortran XX 형태의 표기는 ISO 국제 표준을 의미하는 것으로 여겨지게 되었다.","{'word': 'FORTRAN XX 표준', 'start': 2894, 'end': 2906, 'type': 'COM'}","{'word': 'ISO 국제 표준', 'start': 2950, 'end': 2958, 'type': 'COM'}",no_relation
217,"포트란의 현대화가 진행된 표준이며, Ada와 같은 여러 다른 언어에서 많은 아이디어를 가져왔다.","{'word': '포트란', 'start': 3004, 'end': 3006, 'type': 'COM'}","{'word': 'Ada', 'start': 3024, 'end': 3026, 'type': 'COM'}",no_relation
218,Fortran 90 은 FORTRAN 77의 기존의 문법 중 몇 가지 사항을 Obsolescent로 분류하였다.,"{'word': 'Fortran 90', 'start': 3121, 'end': 3130, 'type': 'COM'}","{'word': 'FORTRAN 77', 'start': 3134, 'end': 3143, 'type': 'COM'}",no_relation
219,"즉, 모든 FORTRAN 77 표준 코드가 Fortran 90 표준에 부합하도록 정의되었다.","{'word': 'FORTRAN 77 표준 코드', 'start': 3245, 'end': 3260, 'type': 'COM'}","{'word': 'Fortran 90 표준', 'start': 3263, 'end': 3275, 'type': 'COM'}",no_relation
220,이는 Fortran 90에 대한 확장 기능을 제공하던 High Performance Fortran(HPFF) 프로젝트의 영향을 받아 병렬 프로그래밍에 대한 지원을 목적으로 한다.,"{'word': 'Fortran 90', 'start': 3454, 'end': 3463, 'type': 'COM'}","{'word': 'High Performance Fortran(HPFF) 프로젝트', 'start': 3481, 'end': 3515, 'type': 'COM'}",no_relation
221,Fortran 95에서는 Fortran 90에서 Obsolescent로 분류되었던 항목 중에서 몇몇 문법이 Deleted 항목으로 변화되었다.,"{'word': 'Fortran 95', 'start': 3572, 'end': 3581, 'type': 'COM'}","{'word': 'Fortran 90', 'start': 3586, 'end': 3595, 'type': 'COM'}",no_relation
222,"원래는 90에 대한 10년 단위 major update로 Fortran 2000이 계획되었으나, 합의가 늦어지고 Fortran 2003으로 발표된다.","{'word': 'Fortran 2000', 'start': 3684, 'end': 3695, 'type': 'COM'}","{'word': 'Fortran 2003', 'start': 3715, 'end': 3726, 'type': 'COM'}",no_relation
223,Fortran 2003은 ISO/IEC 1539-1:2004가 공식 문서이며이다.,"{'word': 'Fortran 2003', 'start': 3736, 'end': 3747, 'type': 'COM'}","{'word': 'ISO/IEC 1539-1:2004', 'start': 3750, 'end': 3768, 'type': 'COM'}",no_relation
224,Fortran 2008은 가장 최근에 발표된 표준으로 ISO/IEC 1539-1:2010가 공식 문서이다.,"{'word': 'Fortran 2008', 'start': 3805, 'end': 3816, 'type': 'COM'}","{'word': 'ISO/IEC 1539-1:2010', 'start': 3835, 'end': 3853, 'type': 'COM'}",no_relation
225,다음은 대화형으로 사용자의 숫자 입력을 받아서 평균을 출력하는 프로그램이다.,"{'word': '대화형', 'start': 4983, 'end': 4985, 'type': 'COM'}","{'word': '프로그램', 'start': 5014, 'end': 5017, 'type': 'COM'}",no_relation
226,"FORTRAN은 수식(Formula) 변환기(Translation)의 약자이다.(IBM Mathematical ""For""mula ""Tran""slating System에서 유래.) 포트란은 알골과 함께 과학 계산용으로 주로 사용되는 언어이며, 당시 7명의 전문가가 약 2년 반 동안에 걸쳐 완성한 것이 포트란의 기본을 이루었고, 그 후 ANSI와 ISO에서 표준화하였다.","{'word': '포트란', 'start': 164, 'end': 166, 'type': 'COM'}","{'word': '알골', 'start': 169, 'end': 170, 'type': 'COM'}",com:similar_tech
227,"전문적인 과학계산 문제를 풀기 위하여 프로그래밍하는 데 있어서 C보다 포트란이 훨씬 간단 명료하고 신속하게 프로그래밍을 작성할 수 있으며, 디버깅하는 데도 시간이 현저하게 단축될 뿐만 아니라, 그 계산속도 또한 일반적으로 훨씬 빠르다.","{'word': 'C', 'start': 821, 'end': 821, 'type': 'COM'}","{'word': '포트란', 'start': 825, 'end': 827, 'type': 'COM'}",com:similar_tech
228,"FORTRAN 66 표준이 발표된 이후에도, 각 컴파일러 벤더들은 표준에 포함되지 않는 각자의 부가적 확장 문법을 포함하는 포트란 컴파일러들을 출시하였으며, 이에 미 포트란 표준화 위원회(ANSI committee X3J3 - J3)가 1969년 결성되었으며, FORTRAN 66 표준에 대한 개정을 논의하기 시작했다.","{'word': '컴파일러 벤더', 'start': 1998, 'end': 2004, 'type': 'ORG'}","{'word': '포트란 컴파일러', 'start': 2040, 'end': 2047, 'type': 'COM'}",org:production
229,1953년 존 배커스(John Warner Backus) 가 IBM 704 메인프레임머신에 사용할 프로그래밍 언어로 어셈블리어에 대한 대안으로 제시하였다.,"{'word': '존 배커스(John Warner Backus)', 'start': 1279, 'end': 1303, 'type': 'PER'}","{'word': 'IBM', 'start': 1307, 'end': 1309, 'type': 'ORG'}",no_relation
230,"최종 안이 1977년에 확정되었으며, 1978년 4월 ANSI의 승인을 얻게 된다.","{'word': 'ANSI', 'start': 2180, 'end': 2183, 'type': 'ORG'}","{'word': '1977년', 'start': 2156, 'end': 2160, 'type': 'DAT'}",no_relation
231,ANSI의 승인은 1992년에 이루어진다.,"{'word': 'ANSI', 'start': 2980, 'end': 2983, 'type': 'ORG'}","{'word': '1992년', 'start': 2990, 'end': 2994, 'type': 'DAT'}",no_relation
232,소프트웨어와 이에 동반하는 소스 코드는 일반적으로 크게 자유 소프트웨어와 사유 소프트웨어 가운데 하나의 라이선스를 지닌다.,"{'word': '소프트웨어와 이에 동반하는 소스 코드', 'start': 184, 'end': 203, 'type': 'COM'}","{'word': '자유 소프트웨어와 사유 소프트웨어', 'start': 215, 'end': 232, 'type': 'COM'}",com:sub_concept
233,소스는 데이터베이스(예: 저장 프로시저) 등의 다른 곳에 저장할 수도 있다.,"{'word': '데이터베이스(', 'start': 627, 'end': 633, 'type': 'COM'}","{'word': '저장 프로시저', 'start': 637, 'end': 643, 'type': 'COM'}",com:sub_concept
234,이진 번역과 원본 플랫폼의 에뮬레이션과 같이 이용할 수 있는 포팅 옵션들이 있다.,"{'word': '포팅 옵션', 'start': 1003, 'end': 1007, 'type': 'COM'}","{'word': '원본 플랫폼의 에뮬레이션', 'start': 976, 'end': 988, 'type': 'COM'}",com:sub_concept
235,이진 번역과 원본 플랫폼의 에뮬레이션과 같이 이용할 수 있는 포팅 옵션들이 있다.,"{'word': '포팅 옵션', 'start': 1003, 'end': 1007, 'type': 'COM'}","{'word': '이진 번역', 'start': 969, 'end': 973, 'type': 'COM'}",com:sub_concept
236,일반적으로 이 파일들은 소스 트리(source tree)로 불리는 디렉터리 트리에 주의를 기울여 정렬된다.,"{'word': '디렉터리 트리', 'start': 600, 'end': 606, 'type': 'COM'}","{'word': '소스 트리(source tree)', 'start': 576, 'end': 593, 'type': 'COM'}",com:alter_names
237,"현대 소프트웨어 개발에서 기계어는 극히 일부 영역에서만 쓰이며, 대부분 고급 언어로 된 소스 코드를 컴파일하여 개발한다.","{'word': '소프트웨어', 'start': 119, 'end': 123, 'type': 'COM'}","{'word': '기계어', 'start': 130, 'end': 132, 'type': 'COM'}",com:made_of
238,"현대 소프트웨어 개발에서 기계어는 극히 일부 영역에서만 쓰이며, 대부분 고급 언어로 된 소스 코드를 컴파일하여 개발한다.","{'word': '소프트웨어', 'start': 119, 'end': 123, 'type': 'COM'}","{'word': '고급 언어로 된 소스 코드', 'start': 156, 'end': 169, 'type': 'COM'}",com:made_of
239,프로그래머는 프로그래밍 기술을 배우려면 기존에 있던 소스 코드를 살펴보는 것이 도움이 된다.,"{'word': '프로그래머', 'start': 779, 'end': 783, 'type': 'PER'}","{'word': '소스 코드', 'start': 808, 'end': 812, 'type': 'COM'}",no_relation
240,개발자들 사이의 소스 공유는 프로그래밍 기술의 발전에 기여하는 역할을 하며 자주 인용된다.,"{'word': '개발자', 'start': 831, 'end': 833, 'type': 'PER'}","{'word': '프로그래밍 기술', 'start': 847, 'end': 854, 'type': 'COM'}",no_relation
241,일부 사람들은 소스 코드를 풍부한 화재(그림의 소재)로 생각한다.,"{'word': '사람', 'start': 885, 'end': 886, 'type': 'PER'}","{'word': '소스 코드', 'start': 890, 'end': 894, 'type': 'COM'}",no_relation
242,IBM이 최초로 기계와 함께 작업할 소프트웨어를 제공했을 때 소스 코드는 무료로 제공되었다.,"{'word': 'IBM', 'start': 353, 'end': 355, 'type': 'ORG'}","{'word': '소스 코드', 'start': 387, 'end': 391, 'type': 'COM'}",no_relation
243,IBM이 최초로 기계와 함께 작업할 소프트웨어를 제공했을 때 소스 코드는 무료로 제공되었다.,"{'word': 'IBM', 'start': 353, 'end': 355, 'type': 'ORG'}","{'word': '소프트웨어', 'start': 373, 'end': 377, 'type': 'COM'}",no_relation
244,수십년 간 IBM은 1983년까지 소스 코드를 자사의 소프트웨어 제품 라이선스와 함께 배포하였다.,"{'word': 'IBM', 'start': 452, 'end': 454, 'type': 'ORG'}","{'word': '소스 코드', 'start': 465, 'end': 469, 'type': 'COM'}",no_relation
245,수십년 간 IBM은 1983년까지 소스 코드를 자사의 소프트웨어 제품 라이선스와 함께 배포하였다.,"{'word': 'IBM', 'start': 452, 'end': 454, 'type': 'ORG'}","{'word': '소프트웨어', 'start': 476, 'end': 480, 'type': 'COM'}",no_relation
246,"프로그래밍에서 설계도의 역할을 하며, 한 개, 또는 여러 개의 텍스트 파일로 구성되어 있다.","{'word': '프로그래밍', 'start': 64, 'end': 68, 'type': 'COM'}","{'word': '텍스트 파일', 'start': 99, 'end': 104, 'type': 'COM'}",no_relation
247,프로그램 내장식 컴퓨터를 위한 최초의 프로그램들은 컴퓨터의 전면 패널 스위치를 통해 바이너리 형태로 입력되었다.,"{'word': '프로그램', 'start': 274, 'end': 277, 'type': 'COM'}","{'word': '바이너리', 'start': 300, 'end': 303, 'type': 'COM'}",no_relation
248,1세대 프로그래밍 언어는 소스 코드와 기계어 간의 구별이 없었다.,"{'word': '소스 코드', 'start': 330, 'end': 334, 'type': 'COM'}","{'word': '기계어', 'start': 337, 'end': 339, 'type': 'COM'}",no_relation
249,당시 소프트웨어를 개발하고 지원하는 비용이 하드웨어의 가격에 포함되었다.,"{'word': '소프트웨어', 'start': 408, 'end': 412, 'type': 'COM'}","{'word': '하드웨어', 'start': 429, 'end': 432, 'type': 'COM'}",no_relation
250,프로그램을 구성하는 소스 코드는 일반적으로 컴퓨터의 하드 디스크에 저장된 하나 이상의 텍스트 파일에 위치한다.,"{'word': '소스 코드', 'start': 512, 'end': 516, 'type': 'COM'}","{'word': '하드 디스크', 'start': 530, 'end': 535, 'type': 'COM'}",no_relation
251,"소스 코드는 주로 실행 프로그램을 만드는 과정을 입력하는 데 이용된다. (이를테면 컴파일이나 해석 과정) 또, 사람들 사이에 알고리즘을 주고 받는 방식으로 이용되기도 한다. (이를테면 책의 코드 조각)","{'word': '소스 코드', 'start': 666, 'end': 670, 'type': 'COM'}","{'word': '실행 프로그램', 'start': 676, 'end': 682, 'type': 'COM'}",no_relation
252,"소스 코드는 주로 실행 프로그램을 만드는 과정을 입력하는 데 이용된다. (이를테면 컴파일이나 해석 과정) 또, 사람들 사이에 알고리즘을 주고 받는 방식으로 이용되기도 한다. (이를테면 책의 코드 조각)","{'word': '소스 코드', 'start': 666, 'end': 670, 'type': 'COM'}","{'word': '알고리즘', 'start': 736, 'end': 739, 'type': 'COM'}",no_relation
253,소프트웨어를 다른 컴퓨터 플랫폼에 포팅하는 것은 일반적으로 소스 코드 없이는 불가능하다.,"{'word': '소프트웨어', 'start': 919, 'end': 923, 'type': 'COM'}","{'word': '포팅', 'start': 938, 'end': 939, 'type': 'COM'}",no_relation
254,소스 코드() 또는 원시 코드란 컴퓨터 프로그램을 사람이 읽을 수 있는 프로그래밍 언어로 기술한 텍스트 파일이다.,"{'word': '소스 코드', 'start': 0, 'end': 4, 'type': 'COM'}","{'word': '원시 코드', 'start': 11, 'end': 15, 'type': 'COM'}",com:similar_tech
255,실행 프로그램의 디컴파일은 고급 언어에서나 어셈블리어로 소스 코드를 만들어내는 데 쓰인다.,"{'word': '고급 언어', 'start': 1030, 'end': 1034, 'type': 'COM'}","{'word': '어셈블리어', 'start': 1039, 'end': 1043, 'type': 'COM'}",com:similar_tech
256,"C 언어, 자바, 베이직 등 대부분의 프로그래밍 언어들은 고급언어에 속한다.","{'word': '고급언어', 'start': 173, 'end': 176, 'type': 'COM'}","{'word': '베이직', 'start': 151, 'end': 153, 'type': 'COM'}",com:sub_concept
257,"C 언어, 자바, 베이직 등 대부분의 프로그래밍 언어들은 고급언어에 속한다.","{'word': '고급언어', 'start': 173, 'end': 176, 'type': 'COM'}","{'word': '자바', 'start': 147, 'end': 148, 'type': 'COM'}",com:sub_concept
258,"C 언어, 자바, 베이직 등 대부분의 프로그래밍 언어들은 고급언어에 속한다.","{'word': '고급언어', 'start': 173, 'end': 176, 'type': 'COM'}","{'word': 'C 언어', 'start': 141, 'end': 144, 'type': 'COM'}",com:sub_concept
259,오토코드의 예는 코볼과 포트란이 있다.,"{'word': '오토코드', 'start': 268, 'end': 271, 'type': 'COM'}","{'word': '코볼', 'start': 277, 'end': 278, 'type': 'COM'}",com:sub_concept
260,오토코드의 예는 코볼과 포트란이 있다.,"{'word': '오토코드', 'start': 268, 'end': 271, 'type': 'COM'}","{'word': '포트란', 'start': 281, 'end': 283, 'type': 'COM'}",com:sub_concept
261,1960년대에 컴파일러를 이용한 고급 프로그래밍 언어들은 보통 오토코드라 불렀다.,"{'word': '고급 프로그래밍 언어', 'start': 240, 'end': 250, 'type': 'COM'}","{'word': '오토코드', 'start': 257, 'end': 260, 'type': 'COM'}",com:alter_names
262,"고급 프로그래밍 언어 또는 하이 레벨 프로그래밍 언어()란 사람이 이해하기 쉽게 작성된 프로그래밍 언어로서, 저급 프로그래밍 언어보다 가독성이 높고 다루기 간단하다는 장점이 있다.","{'word': '저급 프로그래밍 언어', 'start': 61, 'end': 71, 'type': 'COM'}","{'word': '하이 레벨 프로그래밍 언어', 'start': 15, 'end': 28, 'type': 'COM'}",no_relation
263,"고급 프로그래밍 언어 또는 하이 레벨 프로그래밍 언어()란 사람이 이해하기 쉽게 작성된 프로그래밍 언어로서, 저급 프로그래밍 언어보다 가독성이 높고 다루기 간단하다는 장점이 있다.","{'word': '저급 프로그래밍 언어', 'start': 61, 'end': 71, 'type': 'COM'}","{'word': '고급 프로그래밍 언어', 'start': 0, 'end': 10, 'type': 'COM'}",no_relation
264,추상화의 정도는 얼마나 프로그래밍 언어가 높은 수준인지를 정의한다.,"{'word': '추상화', 'start': 184, 'end': 186, 'type': 'COM'}","{'word': '프로그래밍 언어', 'start': 197, 'end': 204, 'type': 'COM'}",no_relation
265,"고급 프로그래밍 언어 또는 하이 레벨 프로그래밍 언어()란 사람이 이해하기 쉽게 작성된 프로그래밍 언어로서, 저급 프로그래밍 언어보다 가독성이 높고 다루기 간단하다는 장점이 있다.","{'word': '고급 프로그래밍 언어', 'start': 0, 'end': 10, 'type': 'COM'}","{'word': '하이 레벨 프로그래밍 언어', 'start': 15, 'end': 28, 'type': 'COM'}",com:similar_tech
266,컴파일러나 인터프리터에 의해 저급 프로그래밍 언어로 번역되어 실행된다.,"{'word': '컴파일러', 'start': 101, 'end': 104, 'type': 'COM'}","{'word': '인터프리터', 'start': 107, 'end': 111, 'type': 'COM'}",com:similar_tech
267,컴퓨터용으로 설계된 최초의 고급 프로그래밍 언어는 콘라트 추제가 개발한 플랑칼퀼(Plankalkül)이다.,"{'word': '콘라트 추제', 'start': 318, 'end': 323, 'type': 'PER'}","{'word': '플랑칼퀼(Plankalkül)', 'start': 330, 'end': 345, 'type': 'COM'}",per:production
268,그러나 이 언어는 추제의 기간 동안 구현되지는 않았으며 그의 초창기 기여는 제2차 세계 대전으로 인해 다른 개발로부터 상당 부분 분리된 상태였다.,"{'word': '언어', 'start': 356, 'end': 357, 'type': 'COM'}","{'word': '추제', 'start': 360, 'end': 361, 'type': 'PER'}",no_relation
269,영향력 있는 최초의 고급 언어는 포트란으로서 IBM의 초창기 오토코드 시스템의 기계 독립적 개발 언어였다.,"{'word': '포트란', 'start': 450, 'end': 452, 'type': 'COM'}","{'word': 'IBM', 'start': 457, 'end': 459, 'type': 'ORG'}",no_relation
270,"알골(ALGOL, Algorithmic Language의 준말)은 1950년대 미국에서 만들어진 포트란에 대항하여 유럽의 학자들을 중심으로 개발된 프로그래밍 언어이다.","{'word': '알골', 'start': 0, 'end': 1, 'type': 'COM'}","{'word': '1950년대', 'start': 37, 'end': 42, 'type': 'DAT'}",com:date_of_prod
271,1960년에 제안된 ALGOL 60 은 그 문법이 BNF 표기법으로 기술되었으며 구조화된 프로그래밍의 형태를 갖고 있었다.,"{'word': 'ALGOL 60', 'start': 297, 'end': 304, 'type': 'COM'}","{'word': '1960년', 'start': 286, 'end': 290, 'type': 'DAT'}",com:date_of_prod
272,1968년에는 ALGOL 68이 개발되었다.,"{'word': 'ALGOL 68', 'start': 641, 'end': 648, 'type': 'COM'}","{'word': '1968년', 'start': 633, 'end': 637, 'type': 'DAT'}",com:date_of_prod
273,1960년에 제안된 ALGOL 60 은 그 문법이 BNF 표기법으로 기술되었으며 구조화된 프로그래밍의 형태를 갖고 있었다.,"{'word': 'ALGOL 60', 'start': 297, 'end': 304, 'type': 'COM'}","{'word': '구조화된 프로그래밍의 형태', 'start': 331, 'end': 344, 'type': 'COM'}",com:sub_concept
274,ALGOL 60은 절차형 언어로는 최초로 재귀호출이 가능한 프로그래밍 언어였다.,"{'word': '절차형 언어', 'start': 365, 'end': 370, 'type': 'COM'}","{'word': 'ALGOL 60', 'start': 355, 'end': 362, 'type': 'COM'}",com:sub_concept
275,ALGOL 60은 절차형 언어로는 최초로 재귀호출이 가능한 프로그래밍 언어였다.,"{'word': 'ALGOL 60', 'start': 355, 'end': 362, 'type': 'COM'}","{'word': '재귀호출', 'start': 378, 'end': 381, 'type': 'COM'}",com:sub_concept
276,"인자 전달에 있어서 알골에 특징적이었던 ""이름 전달"" 방식도 이후의 언어에서는 거의 찾아볼 수 없게 되었다.","{'word': '알골', 'start': 477, 'end': 478, 'type': 'COM'}","{'word': '""이름 전달"" 방식', 'start': 488, 'end': 497, 'type': 'COM'}",com:sub_concept
277,ALGOL 68에서는 2단계 문법 Wijngaarden 표기법으로 문법이 기술되었다.,"{'word': 'ALGOL 68', 'start': 658, 'end': 665, 'type': 'COM'}","{'word': 'Wijngaarden 표기법', 'start': 677, 'end': 691, 'type': 'COM'}",com:sub_concept
278,"알골(ALGOL, Algorithmic Language의 준말)은 1950년대 미국에서 만들어진 포트란에 대항하여 유럽의 학자들을 중심으로 개발된 프로그래밍 언어이다.","{'word': '알골', 'start': 0, 'end': 1, 'type': 'COM'}","{'word': 'Algorithmic Language', 'start': 10, 'end': 29, 'type': 'COM'}",com:alter_names
279,ALGOL은 여러 ALGOL계 언어의 총칭으로 ALGOL이란 이름의 프로그래밍 언어는 존재하지 않는다.,"{'word': 'ALGOL계 언어', 'start': 150, 'end': 158, 'type': 'COM'}","{'word': 'ALGOL', 'start': 140, 'end': 144, 'type': 'COM'}",com:alter_names
280,"1958년 취리히에서 열린 국제회의에서 제안된 것이 그 기원으로 여겨진다. (이 언어는 후에 ALGOL 58로 불리게 되지만, 당초의 이름은 IAL이었다.)","{'word': 'ALGOL 58', 'start': 250, 'end': 257, 'type': 'COM'}","{'word': 'IAL', 'start': 277, 'end': 279, 'type': 'COM'}",com:prior_tech
281,"ALGOL 60의 후계 언어가 제정되기까지 파스칼을 설계한 Wirth의 ALGOL W를 비롯한 여러 후보자가 있었지만, 결국은 ALGOL 68이 후계로 지정되었다.","{'word': 'ALGOL 68', 'start': 777, 'end': 784, 'type': 'COM'}","{'word': 'ALGOL 60', 'start': 706, 'end': 713, 'type': 'COM'}",com:prior_tech
282,"알골(ALGOL, Algorithmic Language의 준말)은 1950년대 미국에서 만들어진 포트란에 대항하여 유럽의 학자들을 중심으로 개발된 프로그래밍 언어이다.","{'word': '포트란', 'start': 54, 'end': 56, 'type': 'COM'}","{'word': '알골', 'start': 0, 'end': 1, 'type': 'COM'}",no_relation
283,"알고리즘의 연구개발, 수치 계산과 논리 연산에 이용하기 위한 목적으로 만들어졌다.","{'word': '알고리즘', 'start': 94, 'end': 97, 'type': 'COM'}","{'word': '논리 연산', 'start': 113, 'end': 117, 'type': 'COM'}",no_relation
284,ALGOL은 여러 ALGOL계 언어의 총칭으로 ALGOL이란 이름의 프로그래밍 언어는 존재하지 않는다.,"{'word': 'ALGOL', 'start': 166, 'end': 170, 'type': 'COM'}","{'word': '프로그래밍 언어', 'start': 178, 'end': 185, 'type': 'COM'}",no_relation
285,표준으로 IFIP TC/WG2.1에서 ALGOL 60이 제정되었다.,"{'word': 'IFIP TC/WG2.1', 'start': 532, 'end': 544, 'type': 'COM'}","{'word': 'ALGOL 60', 'start': 548, 'end': 555, 'type': 'COM'}",no_relation
286,이후에는 이어지는 표준화 작업은 진행되지 않고 1984년에야 ALGOL 60에 상당하는 것이 ISO 표준으로 지정되었다.,"{'word': 'ALGOL 60', 'start': 599, 'end': 606, 'type': 'COM'}","{'word': 'ISO 표준', 'start': 617, 'end': 622, 'type': 'COM'}",no_relation
287,"그러나 너무 복잡하고 방대한 사양을 요구했기 때문에 ALGOL 68 컴파일러는 실제 구현이 어려웠고, Wijngaarden 표기법 또한 난해하여 실용적으로 보급되지 못했다.","{'word': 'ALGOL 68 컴파일러', 'start': 827, 'end': 839, 'type': 'COM'}","{'word': 'Wijngaarden 표기법', 'start': 855, 'end': 869, 'type': 'COM'}",no_relation
288,"다음은 n×m의 2 차원 배열 중 절대값이 가장 큰 요소를 찾아, 그 절대 값을 y에, 첨자를 i와 k에 저장하는 함수이다.","{'word': '배열', 'start': 909, 'end': 910, 'type': 'COM'}","{'word': '함수', 'start': 959, 'end': 960, 'type': 'COM'}",no_relation
289,"또한 PL/I, 파스칼, C 언어 등 이후 언어의 발전에 큰 영향을 주었다.","{'word': 'PL/I', 'start': 403, 'end': 406, 'type': 'COM'}","{'word': '파스칼', 'start': 409, 'end': 411, 'type': 'COM'}",com:similar_tech
290,"또한 PL/I, 파스칼, C 언어 등 이후 언어의 발전에 큰 영향을 주었다.","{'word': 'PL/I', 'start': 403, 'end': 406, 'type': 'COM'}","{'word': 'C 언어', 'start': 414, 'end': 417, 'type': 'COM'}",com:similar_tech
291,"알골(ALGOL, Algorithmic Language의 준말)은 1950년대 미국에서 만들어진 포트란에 대항하여 유럽의 학자들을 중심으로 개발된 프로그래밍 언어이다.","{'word': '유럽의 학자들', 'start': 64, 'end': 70, 'type': 'PER'}","{'word': '알골', 'start': 0, 'end': 1, 'type': 'COM'}",per:production
292,"ALGOL 60의 후계 언어가 제정되기까지 파스칼을 설계한 Wirth의 ALGOL W를 비롯한 여러 후보자가 있었지만, 결국은 ALGOL 68이 후계로 지정되었다.","{'word': 'Wirth', 'start': 739, 'end': 743, 'type': 'PER'}","{'word': '파스칼', 'start': 730, 'end': 732, 'type': 'COM'}",per:production
293,"ALGOL 60의 후계 언어가 제정되기까지 파스칼을 설계한 Wirth의 ALGOL W를 비롯한 여러 후보자가 있었지만, 결국은 ALGOL 68이 후계로 지정되었다.","{'word': 'Wirth', 'start': 739, 'end': 743, 'type': 'PER'}","{'word': 'ALGOL W', 'start': 746, 'end': 752, 'type': 'COM'}",per:production
294,많은 프로그래밍 언어는 컴파일러와 인터프리터 양쪽 모두 구현되어 있다.,"{'word': '프로그래밍 언어', 'start': 108, 'end': 115, 'type': 'COM'}","{'word': '컴파일러', 'start': 118, 'end': 121, 'type': 'COM'}",com:sub_concept
295,많은 프로그래밍 언어는 컴파일러와 인터프리터 양쪽 모두 구현되어 있다.,"{'word': '프로그래밍 언어', 'start': 108, 'end': 115, 'type': 'COM'}","{'word': '인터프리터', 'start': 124, 'end': 128, 'type': 'COM'}",com:sub_concept
296,"예를 들어 자바는 가상 머신을 위한 바이트코드로 컴파일될 수 있으며, 가상 머신의 인터프리터가 이를 처리한다.","{'word': '가상 머신', 'start': 184, 'end': 188, 'type': 'COM'}","{'word': '인터프리터', 'start': 191, 'end': 195, 'type': 'COM'}",com:sub_concept
297,인터프리트 언어()는 컴파일러를 거쳐서 기계어로 변환되지 않고 바로 실행되는 프로그래밍 언어를 말한다.,"{'word': '컴파일러', 'start': 12, 'end': 15, 'type': 'COM'}","{'word': '기계어', 'start': 22, 'end': 24, 'type': 'COM'}",no_relation
298,반대로 반드시 기계어로 컴파일되어야만 실행시킬 수 있는 언어를 컴파일 언어라 한다.,"{'word': '기계어', 'start': 66, 'end': 68, 'type': 'COM'}","{'word': '컴파일 언어', 'start': 93, 'end': 98, 'type': 'COM'}",no_relation
299,또한 JIT 컴파일을 통해 바이트코드가 네이티브 코드로 컴파일되기도 한다.,"{'word': 'JIT 컴파일', 'start': 210, 'end': 216, 'type': 'COM'}","{'word': '바이트코드', 'start': 222, 'end': 226, 'type': 'COM'}",no_relation
300,또한 JIT 컴파일을 통해 바이트코드가 네이티브 코드로 컴파일되기도 한다.,"{'word': 'JIT 컴파일', 'start': 210, 'end': 216, 'type': 'COM'}","{'word': '네이티브 코드', 'start': 229, 'end': 235, 'type': 'COM'}",no_relation
301,GCC는 리처드 스톨만이 1987년 GNU 프로젝트의 컴파일러로 작성했다.,"{'word': 'GCC', 'start': 266, 'end': 268, 'type': 'COM'}","{'word': '1987년', 'start': 280, 'end': 284, 'type': 'DAT'}",com:date_of_prod
302,"4.6 이후의 표준 컴파일러 릴리즈에는 C (codice_1), C++ (codice_2), 오브젝티브 C, 오브젝티브 C++, 포트란 (codice_3), 자바 (codice_4), 에이다 (GNAT), 고 (codice_5)를 위한 프론트엔드가 포함되어 있다.","{'word': '표준 컴파일러 릴리즈', 'start': 641, 'end': 651, 'type': 'COM'}","{'word': 'C (codice_1), C++ (codice_2), 오브젝티브 C, 오브젝티브 C++, 포트란 (codice_3), 자바 (codice_4), 에이다 (GNAT), 고 (codice_5)를 위한 프론트엔드', 'start': 655, 'end': 769, 'type': 'COM'}",com:sub_concept
303,새로운 버전에서 codice_9는 포트란 2003의 일부와 포트란 95를 지원하는 새로운 codice_3 프론트엔드를 선호하게 되면서 지원이 중단되었다.,"{'word': 'codice_3 프론트엔드', 'start': 1020, 'end': 1033, 'type': 'COM'}","{'word': '포트란 2003의 일부와 포트란 95', 'start': 989, 'end': 1008, 'type': 'COM'}",com:sub_concept
304,나중의 포트란 표준이 F77 표준을 포함하면서 표준 호환 F77 코드가 표준 호환 F90/95 코드가 되어 gfortran에서 문제 없이 컴파일이 가능하다.,"{'word': '포트란 표준', 'start': 1060, 'end': 1065, 'type': 'COM'}","{'word': 'F77 표준', 'start': 1068, 'end': 1073, 'type': 'COM'}",com:sub_concept
305,"일부 실험적인 브랜치들은 추가적인 언어들을 지원하기도 하는데, 이를테면 GCC UPC 컴파일러가 있다.","{'word': '실험적인 브랜치', 'start': 1186, 'end': 1193, 'type': 'COM'}","{'word': 'GCC UPC 컴파일러', 'start': 1223, 'end': 1234, 'type': 'COM'}",com:sub_concept
306,"GNU 컴파일러 모음(, 줄여서 GCC)는 GNU 프로젝트의 일환으로 개발되어 널리 쓰이고 있는 컴파일러이다.","{'word': 'GNU 컴파일러 모음', 'start': 0, 'end': 10, 'type': 'COM'}","{'word': 'GCC', 'start': 18, 'end': 20, 'type': 'COM'}",com:alter_names
307,"자유 소프트웨어 중에 가장 잘 알려진 것들 중 하나인 GCC는 원래 C만을 지원했던 컴파일러로 이름도 ""GNU C 컴파일러""였다.","{'word': 'GCC', 'start': 92, 'end': 94, 'type': 'COM'}","{'word': 'GNU C 컴파일러', 'start': 120, 'end': 129, 'type': 'COM'}",com:alter_names
308,이러한 까닭에 현재에도 GCC는 GNU 컴파일러 모음의 일부인 GNU C 컴파일러()의 줄임말로 쓰이기도 한다.,"{'word': 'GNU C 컴파일러', 'start': 170, 'end': 179, 'type': 'COM'}","{'word': 'GCC', 'start': 148, 'end': 150, 'type': 'COM'}",com:alter_names
309,GCC는 리처드 스톨만이 1987년 GNU 프로젝트의 컴파일러로 작성했다.,"{'word': 'GCC', 'start': 266, 'end': 268, 'type': 'COM'}","{'word': 'GNU 프로젝트의 컴파일러', 'start': 286, 'end': 299, 'type': 'COM'}",com:made_of
310,GNU 시스템의 공식 컴파일러이므로 GCC는 많은 컴파일러와 운영 체제를 만드는 데 사용되었다.,"{'word': '컴파일러와 운영 체제', 'start': 490, 'end': 500, 'type': 'COM'}","{'word': 'GCC', 'start': 482, 'end': 484, 'type': 'COM'}",com:made_of
311,포트란 프론트엔드는 포트란 77만 지원했던 버전 4.0 이전까지 codice_9였다.,"{'word': '버전 4.0', 'start': 946, 'end': 951, 'type': 'COM'}","{'word': 'codice_9', 'start': 958, 'end': 965, 'type': 'COM'}",com:prior_tech
312,나중의 포트란 표준이 F77 표준을 포함하면서 표준 호환 F77 코드가 표준 호환 F90/95 코드가 되어 gfortran에서 문제 없이 컴파일이 가능하다.,"{'word': '표준 호환 F90/95 코드', 'start': 1096, 'end': 1110, 'type': 'COM'}","{'word': '표준 호환 F77 코드', 'start': 1082, 'end': 1093, 'type': 'COM'}",com:prior_tech
313,GNU 프로젝트에 컴파일러가 없었기 때문에 이 개발은 자유 소프트웨어 재단이 후원하였다.,"{'word': 'GNU 프로젝트', 'start': 308, 'end': 315, 'type': 'COM'}","{'word': '컴파일러', 'start': 318, 'end': 321, 'type': 'COM'}",no_relation
314,"현재 GCC는 전 세계적으로 관리되고 있으며, 다양한 중앙 처리 장치를 처리할 수 있게 되었다.","{'word': 'GCC', 'start': 411, 'end': 413, 'type': 'COM'}","{'word': '중앙 처리 장치', 'start': 438, 'end': 445, 'type': 'COM'}",no_relation
315,"한편, 시스템 네이티브 컴파일러를 사용했을 때 비해서 GCC를 사용하면 같은 파서로 코드를 처리하므로 이식성을 향상시킬 수 있다.","{'word': '시스템 네이티브 컴파일러', 'start': 520, 'end': 532, 'type': 'COM'}","{'word': 'GCC', 'start': 546, 'end': 548, 'type': 'COM'}",no_relation
316,GCC는 상용 컴파일러에 비해서 느린 코드를 생성했지만 최근 많이 개선되었다.,"{'word': 'GCC', 'start': 589, 'end': 591, 'type': 'COM'}","{'word': '상용 컴파일러', 'start': 594, 'end': 600, 'type': 'COM'}",no_relation
317,CHILL을 위한 프론트엔드는 유지 보수 부족으로 개발이 중단되었다.,"{'word': 'CHILL', 'start': 1144, 'end': 1148, 'type': 'COM'}","{'word': '프론트엔드', 'start': 1154, 'end': 1158, 'type': 'COM'}",no_relation
318,버전 4.3을 기준으로 GCC는 다음의 프로세서 계열을 대상으로 한다:,"{'word': 'GCC', 'start': 1254, 'end': 1256, 'type': 'COM'}","{'word': '프로세서', 'start': 1263, 'end': 1266, 'type': 'COM'}",no_relation
319,"표준 릴리즈에서 지원되는, 위보다 잘 알려지지 않은 프로세서는 다음을 포함한다:","{'word': '표준 릴리즈', 'start': 1281, 'end': 1286, 'type': 'COM'}","{'word': '프로세서', 'start': 1310, 'end': 1313, 'type': 'COM'}",no_relation
320,FSF 버전과는 별개로 GCC 버전이 지원하고 있는 추가 프로세서들은 다음과 같다:,"{'word': 'FSF 버전', 'start': 1326, 'end': 1331, 'type': 'COM'}","{'word': 'GCC 버전', 'start': 1339, 'end': 1344, 'type': 'COM'}",no_relation
321,gcj 자바 컴파일러는 순수 기계어 아키텍처나 자바 가상 머신의 자바 바이트코드만을 대상으로 할 수 있다.,"{'word': 'gcj 자바 컴파일러', 'start': 1373, 'end': 1383, 'type': 'COM'}","{'word': '자바 가상 머신', 'start': 1399, 'end': 1406, 'type': 'COM'}",no_relation
322,새로운 플랫폼으로 GCC의 대상으로 변경할 때에는 bootstrap이 자주 쓰인다.,"{'word': 'GCC', 'start': 1443, 'end': 1445, 'type': 'COM'}","{'word': 'bootstrap', 'start': 1461, 'end': 1469, 'type': 'COM'}",no_relation
323,리눅스 및 일부 운영 체제용으로 개발된 대부분의 통합 개발 환경은 GCC를 지원한다.,"{'word': '통합 개발 환경', 'start': 1507, 'end': 1514, 'type': 'COM'}","{'word': 'GCC', 'start': 1517, 'end': 1519, 'type': 'COM'}",no_relation
324,"그러나 나중에 C++, 자바, 포트란, 에이다 등 여러 언어를 컴파일할 수 있게 되면서, 현재의 이름으로 바뀌게 되었다.","{'word': '여러 언어', 'start': 226, 'end': 230, 'type': 'COM'}","{'word': 'C++', 'start': 206, 'end': 208, 'type': 'COM'}",com:similar_tech
325,"그러나 나중에 C++, 자바, 포트란, 에이다 등 여러 언어를 컴파일할 수 있게 되면서, 현재의 이름으로 바뀌게 되었다.","{'word': '여러 언어', 'start': 226, 'end': 230, 'type': 'COM'}","{'word': '자바', 'start': 211, 'end': 212, 'type': 'COM'}",com:similar_tech
326,"그러나 나중에 C++, 자바, 포트란, 에이다 등 여러 언어를 컴파일할 수 있게 되면서, 현재의 이름으로 바뀌게 되었다.","{'word': '여러 언어', 'start': 226, 'end': 230, 'type': 'COM'}","{'word': '포트란', 'start': 215, 'end': 217, 'type': 'COM'}",com:similar_tech
327,"그러나 나중에 C++, 자바, 포트란, 에이다 등 여러 언어를 컴파일할 수 있게 되면서, 현재의 이름으로 바뀌게 되었다.","{'word': '여러 언어', 'start': 226, 'end': 230, 'type': 'COM'}","{'word': '에이다', 'start': 220, 'end': 222, 'type': 'COM'}",com:similar_tech
328,"또, 이용은 가능하지만 표준에는 포함되지 않은 것으로 파스칼 (codice_6), 머큐리, Modula-2, Modula-3, PL/I, D (codice_7), VHDL (codice_8)가 있다.","{'word': '파스칼 (codice_6)', 'start': 811, 'end': 824, 'type': 'COM'}","{'word': '머큐리', 'start': 827, 'end': 829, 'type': 'COM'}",com:similar_tech
329,"또, 이용은 가능하지만 표준에는 포함되지 않은 것으로 파스칼 (codice_6), 머큐리, Modula-2, Modula-3, PL/I, D (codice_7), VHDL (codice_8)가 있다.","{'word': '파스칼 (codice_6)', 'start': 811, 'end': 824, 'type': 'COM'}","{'word': 'Modula-2', 'start': 832, 'end': 839, 'type': 'COM'}",com:similar_tech
330,"또, 이용은 가능하지만 표준에는 포함되지 않은 것으로 파스칼 (codice_6), 머큐리, Modula-2, Modula-3, PL/I, D (codice_7), VHDL (codice_8)가 있다.","{'word': '파스칼 (codice_6)', 'start': 811, 'end': 824, 'type': 'COM'}","{'word': 'Modula-3', 'start': 842, 'end': 849, 'type': 'COM'}",com:similar_tech
331,"또, 이용은 가능하지만 표준에는 포함되지 않은 것으로 파스칼 (codice_6), 머큐리, Modula-2, Modula-3, PL/I, D (codice_7), VHDL (codice_8)가 있다.","{'word': '파스칼 (codice_6)', 'start': 811, 'end': 824, 'type': 'COM'}","{'word': 'PL/I', 'start': 852, 'end': 855, 'type': 'COM'}",com:similar_tech
332,"또, 이용은 가능하지만 표준에는 포함되지 않은 것으로 파스칼 (codice_6), 머큐리, Modula-2, Modula-3, PL/I, D (codice_7), VHDL (codice_8)가 있다.","{'word': '파스칼 (codice_6)', 'start': 811, 'end': 824, 'type': 'COM'}","{'word': 'D (codice_7)', 'start': 858, 'end': 869, 'type': 'COM'}",com:similar_tech
333,"또, 이용은 가능하지만 표준에는 포함되지 않은 것으로 파스칼 (codice_6), 머큐리, Modula-2, Modula-3, PL/I, D (codice_7), VHDL (codice_8)가 있다.","{'word': '파스칼 (codice_6)', 'start': 811, 'end': 824, 'type': 'COM'}","{'word': 'VHDL (codice_8)', 'start': 872, 'end': 886, 'type': 'COM'}",com:similar_tech
334,GCC는 리처드 스톨만이 1987년 GNU 프로젝트의 컴파일러로 작성했다.,"{'word': '리처드 스톨만', 'start': 271, 'end': 277, 'type': 'PER'}","{'word': 'GCC', 'start': 266, 'end': 268, 'type': 'COM'}",per:production

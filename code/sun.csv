id,sentence,subject_entity,object_entity,label,worker1,worker2
0,"컴퓨터 과학자이자 튜링상을 받은 에츠허르 데이크스트라는 ""코볼을 이용하는 일은 마음을 무력하게 만든다.","{'word': '에츠허르 데이크스트라', 'start': 80, 'end': 90, 'type': 'PER'}","{'word': '컴퓨터 과학자', 'start': 62, 'end': 68, 'type': 'POH'}",per:title,per:title,per:title
1,트래블러스 인슈런스(Travelers Insurance)의 CIO 조지프 T. 브로피는 막중한 프로그래밍 비용을 들이는 코볼 사용자들에게 새로운 표준의 구현을 알리는 일을 진두지휘하였다.,"{'word': '조지프 T. 브로피', 'start': 1298, 'end': 1307, 'type': 'PER'}","{'word': 'CIO', 'start': 1294, 'end': 1296, 'type': 'POH'}",per:title,per:title,per:title
2,"단기 위원회 구성원인 진 사멧은 ""전문 프로그래머에게 제공하려는 시도는 거의 없었다.","{'word': '진 사멧', 'start': 1838, 'end': 1841, 'type': 'PER'}","{'word': '구성원', 'start': 1833, 'end': 1835, 'type': 'POH'}",per:title,per:title,per:title
3,"CODASYL 코볼 위원회의 의장인 도널드 넬슨은 1984년에 ""학계가 ... 코볼을 싫어한다""고 말했고 컴퓨터 과학 동문들은 ""'코볼이 싫다'라는 것을 그들에게 주입시켰다""고 말했다.","{'word': '도널드 넬슨', 'start': 2572, 'end': 2577, 'type': 'PER'}","{'word': '의장', 'start': 2568, 'end': 2569, 'type': 'POH'}",per:title,per:title,per:title
4,"설계 과정이 효과적인지에 대한 의구심이 있었다. (가끔은 코볼에 참여한 사람들까지도) 단기 위원회 구성원 호워드 브롬버그는 개발 과정에서 통제가 거의 없었으며 ""소속 인원의 지속성이 없고 ... 재능의 부족으로 홍역을 치렀다""고 말했다.","{'word': '호워드 브롬버그', 'start': 2955, 'end': 2962, 'type': 'PER'}","{'word': '구성원', 'start': 2951, 'end': 2953, 'type': 'POH'}",per:title,per:title,per:title
5,트래블러스 인슈런스(Travelers Insurance)의 CIO 조지프 T. 브로피는 막중한 프로그래밍 비용을 들이는 코볼 사용자들에게 새로운 표준의 구현을 알리는 일을 진두지휘하였다.,"{'word': '트래블러스 인슈런스', 'start': 1261, 'end': 1270, 'type': 'ORG'}","{'word': '조지프 T. 브로피', 'start': 1298, 'end': 1307, 'type': 'ORG'}",no_relation,no_relation,no_relation
6,"단기 위원회 구성원인 진 사멧은 ""전문 프로그래머에게 제공하려는 시도는 거의 없었다.","{'word': '단기 위원회', 'start': 1826, 'end': 1831, 'type': 'ORG'}","{'word': '진 사멧', 'start': 1838, 'end': 1841, 'type': 'ORG'}",no_relation,no_relation,no_relation
7,"CODASYL 코볼 위원회의 의장인 도널드 넬슨은 1984년에 ""학계가 ... 코볼을 싫어한다""고 말했고 컴퓨터 과학 동문들은 ""'코볼이 싫다'라는 것을 그들에게 주입시켰다""고 말했다.","{'word': 'CODASYL 코볼 위원회', 'start': 2552, 'end': 2565, 'type': 'ORG'}","{'word': '도널드 넬슨', 'start': 2572, 'end': 2577, 'type': 'ORG'}",no_relation,no_relation,no_relation
8,"설계 과정이 효과적인지에 대한 의구심이 있었다. (가끔은 코볼에 참여한 사람들까지도) 단기 위원회 구성원 호워드 브롬버그는 개발 과정에서 통제가 거의 없었으며 ""소속 인원의 지속성이 없고 ... 재능의 부족으로 홍역을 치렀다""고 말했다.","{'word': '단기 위원회', 'start': 2944, 'end': 2949, 'type': 'ORG'}","{'word': '호워드 브롬버그', 'start': 2955, 'end': 2962, 'type': 'ORG'}",no_relation,no_relation,no_relation
9,"데이터와 코드의 추가적인 제어는 2002년에 도입되어 객체 지향 프로그래밍, 사용자 지정 함수, 사용자 지정 자료형이 포함되었다.","{'word': '데이터와 코드의 추가적인 제어', 'start': 1066, 'end': 1081, 'type': 'COM'}","{'word': '2002', 'start': 1084, 'end': 1087, 'type': 'DAT'}",com:date_of_prod,com:date_of_produced,com:date_of_produced
10,문을 코볼 코드에서 제거하려는 시도는 그러나 난해한 프로그램들을 만들고 코드 품질을 떨어트렸다.,"{'word': '프로그램', 'start': 283, 'end': 286, 'type': 'COM'}","{'word': '코드', 'start': 260, 'end': 261, 'type': 'COM'}",com:sub_concept,no_relation,no_relation
11,그러나 문은 오직 프로시저와 함께 쓰일 수 있으므로 반복문은 이들이 사용하는 곳에 위치되지 않아 프로그램을 이해하기 더 어렵게 만들게 된다.,"{'word': '프로그램', 'start': 441, 'end': 444, 'type': 'COM'}","{'word': '반복문', 'start': 416, 'end': 418, 'type': 'COM'}",com:sub_concept,no_relation,no_relation
12,코볼 코드는 프로시저를 통해서만 모듈성을 이룰 수 있어 대형 시스템에서는 부적절한 것으로 알려져 있었다.,"{'word': '코볼 코드', 'start': 506, 'end': 510, 'type': 'COM'}","{'word': '프로시저', 'start': 513, 'end': 516, 'type': 'COM'}",com:sub_concept,no_relation,no_relation
13,코볼 코드는 프로시저를 통해서만 모듈성을 이룰 수 있어 대형 시스템에서는 부적절한 것으로 알려져 있었다.,"{'word': '대형 시스템', 'start': 537, 'end': 542, 'type': 'COM'}","{'word': '코볼 코드', 'start': 506, 'end': 510, 'type': 'COM'}",com:sub_concept,no_relation,no_relation
14,"데이터로의 접근을 제한하는 것이 불가능하였는데, 다시 말해 프로시저 하나가 어떠한 데이터 항목이라도 접근하여 수정할 수 있었다.","{'word': '데이터 항목', 'start': 611, 'end': 616, 'type': 'COM'}","{'word': '프로시저', 'start': 598, 'end': 601, 'type': 'COM'}",com:sub_concept,no_relation,no_relation
15,"게다가 매개변수를 프로시저에 보내는 방법이 없었는데, 이를 빠트린 것을 두고 진 사멧은 위원회의 최대 실수로 간주하였다.","{'word': '프로시저', 'start': 647, 'end': 650, 'type': 'COM'}","{'word': '매개변수', 'start': 641, 'end': 644, 'type': 'COM'}",com:sub_concept,no_relation,no_relation
16,코볼-74는 하부 프로그램들을 추가하여 프로그래머들에게 각 프로그램 부분이 접근할 수 있는 데이터를 제어하는 기능을 제공하였다.,"{'word': '코볼-74', 'start': 914, 'end': 918, 'type': 'COM'}","{'word': '하부 프로그램', 'start': 921, 'end': 927, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
17,코볼-74는 하부 프로그램들을 추가하여 프로그래머들에게 각 프로그램 부분이 접근할 수 있는 데이터를 제어하는 기능을 제공하였다.,"{'word': '코볼-74', 'start': 914, 'end': 918, 'type': 'COM'}","{'word': '데이터를 제어하는 기능', 'start': 965, 'end': 976, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
18,그 뒤로 코볼-85는 내재형 하위 프로그램(nested subprogram)을 추가하여 프로그래머들이 하위 프로그램들을 숨길 수 있게 하였다.,"{'word': '코볼-85', 'start': 991, 'end': 995, 'type': 'COM'}","{'word': '내재형 하위 프로그램', 'start': 998, 'end': 1008, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
19,"데이터와 코드의 추가적인 제어는 2002년에 도입되어 객체 지향 프로그래밍, 사용자 지정 함수, 사용자 지정 자료형이 포함되었다.","{'word': '데이터와 코드의 추가적인 제어', 'start': 1066, 'end': 1081, 'type': 'COM'}","{'word': '객체 지향 프로그래밍', 'start': 1096, 'end': 1106, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
20,"데이터와 코드의 추가적인 제어는 2002년에 도입되어 객체 지향 프로그래밍, 사용자 지정 함수, 사용자 지정 자료형이 포함되었다.","{'word': '데이터와 코드의 추가적인 제어', 'start': 1066, 'end': 1081, 'type': 'COM'}","{'word': '사용자 지정 함수', 'start': 1109, 'end': 1117, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
21,"데이터와 코드의 추가적인 제어는 2002년에 도입되어 객체 지향 프로그래밍, 사용자 지정 함수, 사용자 지정 자료형이 포함되었다.","{'word': '데이터와 코드의 추가적인 제어', 'start': 1066, 'end': 1081, 'type': 'COM'}","{'word': '사용자 지정 자료형', 'start': 1120, 'end': 1129, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
22,동일 조사에서 60%가 코볼을 가르쳐야 한다고 생각함에도 불구하고 학계의 25%만이 그들의 교육과정에 코볼 프로그래밍이 있었다.,"{'word': '교육과정', 'start': 2805, 'end': 2808, 'type': 'COM'}","{'word': '코볼 프로그래밍', 'start': 2811, 'end': 2818, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
23,"반면, 2003년 코볼은 미국에서 정보 시스템 교육과정의 80%에 특별히 포함되었는데 이는 C++와 자바의 비율과 동일하다.","{'word': '정보 시스템 교육과정', 'start': 2845, 'end': 2855, 'type': 'COM'}","{'word': '코볼', 'start': 2836, 'end': 2837, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
24,"코볼의 자료 구조는 뒤에 나온 프로그래밍 언어들에 영향을 주었다. 레코드와 파일 구조는 PL/I과 파스칼에 영향을 주었고, 절은 파스칼의 변종 레코드의 이전 것이었다.","{'word': '코볼의 자료 구조', 'start': 3271, 'end': 3279, 'type': 'COM'}","{'word': '레코드', 'start': 3308, 'end': 3310, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
25,"코볼의 자료 구조는 뒤에 나온 프로그래밍 언어들에 영향을 주었다. 레코드와 파일 구조는 PL/I과 파스칼에 영향을 주었고, 절은 파스칼의 변종 레코드의 이전 것이었다.","{'word': '코볼의 자료 구조', 'start': 3271, 'end': 3279, 'type': 'COM'}","{'word': '파일 구조', 'start': 3313, 'end': 3317, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
26,"레코드와 파일 구조는 PL/I과 파스칼에 영향을 주었고, 절은 파스칼의 변종 레코드의 이전 것이었다.","{'word': '파스칼', 'start': 3343, 'end': 3345, 'type': 'COM'}","{'word': '변종 레코드', 'start': 3348, 'end': 3353, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
27,게다가 잘 정의된 디비전 구조는 ENVIRONMENT DIVISION의 외부 참조 정의를 제한함으로써 특히 플랫폼 변경을 단순화하는 일에 기여하였다.,"{'word': 'ENVIRONMENT DIVISION', 'start': 3589, 'end': 3608, 'type': 'COM'}","{'word': '외부 참조 정의', 'start': 3611, 'end': 3618, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
28,그 뒤로 코볼-85는 내재형 하위 프로그램(nested subprogram)을 추가하여 프로그래머들이 하위 프로그램들을 숨길 수 있게 하였다.,"{'word': '내재형 하위 프로그램', 'start': 998, 'end': 1008, 'type': 'COM'}","{'word': 'nested subprogram', 'start': 1010, 'end': 1026, 'type': 'COM'}",com:alter_names,com:alternative_names,com:alternative_names
29,코볼 표준들은 수차례 지연으로 인해 고통을 받아왔다: 코볼-85는 희망했던 날보다 5년은 더 늦었고,"{'word': '코볼-85', 'start': 3059, 'end': 3063, 'type': 'COM'}","{'word': '코볼 표준', 'start': 3029, 'end': 3033, 'type': 'COM'}",com:alter_names,com:similar_technology,no_relation
30,"코볼 표준들은 수차례 지연으로 인해 고통을 받아왔다: 코볼-85는 희망했던 날보다 5년은 더 늦었고 COBOL 2002도 5년이 늦었으며, COBOL 2014는 6년이 늦었다.","{'word': 'COBOL 2002', 'start': 3085, 'end': 3094, 'type': 'COM'}","{'word': '코볼 표준', 'start': 3029, 'end': 3033, 'type': 'COM'}",com:alter_names,com:similar_technology,no_relation
31,"코볼 표준들은 수차례 지연으로 인해 고통을 받아왔다: 코볼-85는 희망했던 날보다 5년은 더 늦었고 COBOL 2002도 5년이 늦었으며, COBOL 2014는 6년이 늦었다.","{'word': 'COBOL 2014', 'start': 3107, 'end': 3116, 'type': 'COM'}","{'word': '코볼 표준', 'start': 3029, 'end': 3033, 'type': 'COM'}",com:alter_names,com:similar_technology,no_relation
32,"코볼 사양은 새로운 배커스-나우르 표기법이 아닌, 고유한 표기법이나 메타 언어를 사용했는데 그 이유는 이를 들었던 위원회 구성원들이 얼마 없었기 때문이었다.","{'word': '코볼', 'start': 2262, 'end': 2263, 'type': 'COM'}","{'word': '메타 언어', 'start': 2300, 'end': 2304, 'type': 'COM'}",com:made_of,no_relation,com:sub_concept
33,"레코드와 파일 구조는 PL/I과 파스칼에 영향을 주었고, 절은 파스칼의 변종 레코드의 이전 것이었다.","{'word': '파스칼', 'start': 3326, 'end': 3328, 'type': 'COM'}","{'word': '파일 구조', 'start': 3313, 'end': 3317, 'type': 'COM'}",com:prior_tech,com:prior_technology,com:prior_technology
34,"레코드와 파일 구조는 PL/I과 파스칼에 영향을 주었고, 절은 파스칼의 변종 레코드의 이전 것이었다.","{'word': 'PL/I', 'start': 3320, 'end': 3323, 'type': 'COM'}","{'word': '레코드', 'start': 3308, 'end': 3310, 'type': 'COM'}",com:prior_tech,com:prior_technology,com:prior_technology
35,"또, 코볼은 프로그래머들이 배우고 쓰기 쉽게 하기 위해 만들어졌지만 관리자들과 같은 비기술 종사자들에게도 읽힌다.","{'word': '비기술 종사자', 'start': 1639, 'end': 1645, 'type': 'PER'}","{'word': '프로그래머', 'start': 1599, 'end': 1603, 'type': 'PER'}",no_relation,no_relation,no_relation
36,"이에 대한 교리는 범죄 공격으로 여겨진다.""고 강조하면서 편집장에게 보내는 ""어떻게 우리가 상처를 줄 수 있는 진실을 이야기하는가?""라는 제목의 1975년 편지에서 동시대 코볼의 일부를 비평하였다.","{'word': '코볼', 'start': 216, 'end': 217, 'type': 'PER'}","{'word': '편집장', 'start': 152, 'end': 154, 'type': 'COM'}",no_relation,no_relation,no_relation
37,"진 사멧은 우아하지 못함, 설계 과정에 참여할 영향력 있는 컴퓨터 과학자들의 부족, 사무용 데이터 처리를 업신여기는 것 때문에 코볼의 인기가 없던 것을 초기의 잘난체 반응 때문인 것으로 보았다.","{'word': '컴퓨터 과학자', 'start': 2186, 'end': 2192, 'type': 'PER'}","{'word': '사무용 데이터 처리', 'start': 2200, 'end': 2209, 'type': 'COM'}",no_relation,no_relation,no_relation
38,"CODASYL 코볼 위원회의 의장인 도널드 넬슨은 1984년에 ""학계가 ... 코볼을 싫어한다""고 말했고 컴퓨터 과학 동문들은 ""'코볼이 싫다'라는 것을 그들에게 주입시켰다""고 말했다.","{'word': '컴퓨터 과학 동문', 'start': 2611, 'end': 2619, 'type': 'PER'}","{'word': '코볼', 'start': 2596, 'end': 2597, 'type': 'COM'}",no_relation,no_relation,no_relation
39,코볼 공동체는 늘 컴퓨터 과학 공동체와는 분리되어 왔다.,"{'word': '컴퓨터 과학 공동체', 'start': 1984, 'end': 1993, 'type': 'ORG'}","{'word': '코볼 공동체', 'start': 1974, 'end': 1979, 'type': 'ORG'}",no_relation,no_relation,no_relation
40,위원회에 속한 전원이 상업 분야나 정부 쪽 출신이었다.,"{'word': '위원회', 'start': 2041, 'end': 2043, 'type': 'ORG'}","{'word': '정부', 'start': 2060, 'end': 2061, 'type': 'ORG'}",no_relation,no_relation,no_relation
41,마이크로 포커스의 2013년 조사에 따르면 대학 학계의 20%는 코볼은 구식이거나 죽었다고 생각했으며 55%는 그들의 학생들이 코볼이 구식이거나 죽었다고 생각하였다고 믿었다.,"{'word': '마이크로 포커스', 'start': 2656, 'end': 2663, 'type': 'ORG'}","{'word': '코볼', 'start': 2692, 'end': 2693, 'type': 'COM'}",no_relation,no_relation,no_relation
42,1970년대에 프로그래머들은 구조적이지 않은 스파게티 코드를 구조적 프로그래밍 패러다임으로 옮기기 시작하였다.,"{'word': '구조적 프로그래밍 패러다임', 'start': 34, 'end': 47, 'type': 'COM'}","{'word': '스파게티 코드', 'start': 25, 'end': 31, 'type': 'COM'}",no_relation,no_relation,no_relation
43,"문은 대체적으로 문과 프로시저로 대체되었는데 이로 말미암아 모듈식 프로그래밍을 촉진시켰고, 강력한 반복 기능으로 손쉬운 접근을 가능케 했다.","{'word': '프로시저', 'start': 320, 'end': 323, 'type': 'COM'}","{'word': '모듈식 프로그래밍', 'start': 341, 'end': 349, 'type': 'COM'}",no_relation,no_relation,no_relation
44,코볼 프로그램들은 이음매가 없고 모듈성이 결여된 점으로 악명이 높았다.,"{'word': '코볼 프로그램', 'start': 466, 'end': 472, 'type': 'COM'}","{'word': '모듈성', 'start': 484, 'end': 486, 'type': 'COM'}",no_relation,no_relation,no_relation
45,코볼-85는 그 이전의 버전들과 완전히 호환되지 못했고 이에 대한 개발은 논란이 있었다.,"{'word': '코볼-85', 'start': 1211, 'end': 1215, 'type': 'COM'}","{'word': '버전', 'start': 1224, 'end': 1225, 'type': 'COM'}",no_relation,no_relation,no_relation
46,지지자들은 이것이 코드를 자체 문서화하여 프로그램 유지보수를 쉽게 하기 위한 것이라고 말한다.,"{'word': '코드', 'start': 1549, 'end': 1550, 'type': 'COM'}","{'word': '프로그램', 'start': 1562, 'end': 1565, 'type': 'COM'}",no_relation,no_relation,no_relation
47,어떠한 학술 컴퓨터 과학자들도 코볼의 설계에 참여하지 않았다.,"{'word': '컴퓨터', 'start': 2013, 'end': 2015, 'type': 'COM'}","{'word': '코볼', 'start': 2023, 'end': 2024, 'type': 'COM'}",no_relation,no_relation,no_relation
48,"당시 컴퓨터 과학자들은 코볼 개발이 씨름하던 상용 파일 처리 문제 보다 수치 분석, 물리학, 시스템 프로그래밍과 같은 분야에 더 관심이 많았다.","{'word': '코볼', 'start': 2085, 'end': 2086, 'type': 'COM'}","{'word': '상용 파일 처리 문제', 'start': 2097, 'end': 2107, 'type': 'COM'}",no_relation,no_relation,no_relation
49,나중에 코볼은 코볼을 아우르는 자료의 부족으로 고통을 받았다.,"{'word': '코볼', 'start': 2373, 'end': 2374, 'type': 'COM'}","{'word': '자료', 'start': 2386, 'end': 2387, 'type': 'COM'}",no_relation,no_relation,no_relation
50,분명한 파일 구조 정의들은 데이터베이스 관리 시스템의 개발보다 앞섰고 수집된 데이터는 포트란의 배열보다 훨씬 더 앞선 것이었다.,"{'word': '데이터베이스 관리 시스템', 'start': 3380, 'end': 3392, 'type': 'COM'}","{'word': '포트란', 'start': 3413, 'end': 3415, 'type': 'COM'}",no_relation,no_relation,no_relation
51,이식성과 표준화에 초점을 둠에 따라 코볼로 작성된 프로그램들은 이식이 가능하였고 언어가 다양한 하드웨어 플랫폼과 운영 체제에 안착할 수 있었다.,"{'word': '하드웨어 플랫폼', 'start': 3543, 'end': 3550, 'type': 'COM'}","{'word': '운영 체제', 'start': 3553, 'end': 3557, 'type': 'COM'}",no_relation,no_relation,no_relation
52,게다가 잘 정의된 디비전 구조는 ENVIRONMENT DIVISION의 외부 참조 정의를 제한함으로써 특히 플랫폼 변경을 단순화하는 일에 기여하였다.,"{'word': '플랫폼 변경', 'start': 3631, 'end': 3636, 'type': 'COM'}","{'word': '디비전 구조', 'start': 3581, 'end': 3586, 'type': 'COM'}",no_relation,no_relation,no_relation
53,코볼 프로그램을 유지보수하는 사람들은 1984년까지는 이해하기 어려운 코드를 다루는데 고심해야 했으며 코볼-85의 주요 변경 사항들은 유지보수를 쉽게 할 수 있게 도와준다.,"{'word': '코볼 프로그램', 'start': 1729, 'end': 1735, 'type': 'COM'}","{'word': '코볼-85', 'start': 1786, 'end': 1790, 'type': 'COM'}",com:similar_tech,com:made_of,no_relation
54,"미국 의회도서관에는 포트란의 경우 코볼의 2배 분량의 서적이, 베이직의 경우 코볼의 4배 분량의 서적이 있었다.","{'word': '코볼', 'start': 2452, 'end': 2453, 'type': 'COM'}","{'word': '포트란', 'start': 2444, 'end': 2446, 'type': 'COM'}",com:similar_tech,com:similar_technology,no_relation
55,"미국 의회도서관에는 포트란의 경우 코볼의 2배 분량의 서적이, 베이직의 경우 코볼의 4배 분량의 서적이 있었다.","{'word': '코볼', 'start': 2476, 'end': 2477, 'type': 'COM'}","{'word': '베이직', 'start': 2468, 'end': 2470, 'type': 'COM'}",com:similar_tech,com:similar_technology,no_relation
56,"반면, 2003년 코볼은 미국에서 정보 시스템 교육과정의 80%에 특별히 포함되었는데 이는 C++와 자바의 비율과 동일하다.","{'word': '자바', 'start': 2882, 'end': 2883, 'type': 'COM'}","{'word': 'C++', 'start': 2877, 'end': 2879, 'type': 'COM'}",com:similar_tech,com:similar_technology,com:similar_technology
57,"코볼 표준들은 수차례 지연으로 인해 고통을 받아왔다: 코볼-85는 희망했던 날보다 5년은 더 늦었고 COBOL 2002도 5년이 늦었으며, COBOL 2014는 6년이 늦었다.","{'word': '코볼-85', 'start': 3059, 'end': 3063, 'type': 'COM'}","{'word': 'COBOL 2002', 'start': 3085, 'end': 3094, 'type': 'COM'}",com:similar_tech,com:similar_technology,com:similar_technology
58,"COBOL 2002도 5년이 늦었으며, COBOL 2014는 6년이 늦었다.","{'word': 'COBOL 2014', 'start': 3107, 'end': 3116, 'type': 'COM'}","{'word': 'COBOL 2002', 'start': 3085, 'end': 3094, 'type': 'COM'}",com:similar_tech,com:similar_technology,com:similar_technology
59,"코볼 표준들은 수차례 지연으로 인해 고통을 받아왔다: 코볼-85는 희망했던 날보다 5년은 더 늦었고 COBOL 2002도 5년이 늦었으며, COBOL 2014는 6년이 늦었다.","{'word': '코볼-85', 'start': 3059, 'end': 3063, 'type': 'COM'}","{'word': 'COBOL 2014', 'start': 3107, 'end': 3116, 'type': 'COM'}",com:similar_tech,com:similar_technology,com:similar_technology
60,그러나 일부 위원회 구성원들은 구현체와 표준의 잦은 수정 간에 따르는 비호환성에 대해 걱정을 드러냈다.,"{'word': '표준', 'start': 3235, 'end': 3236, 'type': 'COM'}","{'word': '구현체', 'start': 3230, 'end': 3232, 'type': 'COM'}",com:similar_tech,no_relation,no_relation
61,"코볼(COBOL, COmmon Business-Oriented Language, 사무 지향 보통 언어)은 사무용으로 설계된, 영어와 같은 컴퓨터 프로그래밍 언어이다.","{'word': '컴퓨터 프로그래밍 언어', 'start': 77, 'end': 88, 'type': 'COM'}","{'word': '코볼', 'start': 0, 'end': 1, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
62,"1997년 가트너 그룹은 총 200,000,000,000줄의 코볼이 현존하며 모든 비즈니스 프로그램의 80%를 실행한 것으로 예측하였다.","{'word': '비즈니스 프로그램', 'start': 215, 'end': 223, 'type': 'COM'}","{'word': '코볼', 'start': 203, 'end': 204, 'type': 'COM'}",com:sub_concept,com:made_of,no_relation
63,그러나 숙련된 코볼 프로그래머가 은퇴하고 인기가 시들어가면서 프로그램들은 새로운 플랫폼으로 이관돼 현대의 언어로 다시 작성되거나 소프트웨어 패키지로 대체되는 추세이다.,"{'word': '플랫폼', 'start': 366, 'end': 368, 'type': 'COM'}","{'word': '프로그램', 'start': 355, 'end': 358, 'type': 'COM'}",com:sub_concept,no_relation,com:sub_concept
64,"확장에는 구조적, 객체 지향 프로그래밍의 지원을 포함한다.","{'word': '확장', 'start': 688, 'end': 689, 'type': 'COM'}","{'word': '구조적', 'start': 693, 'end': 695, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
65,"확장에는 구조적, 객체 지향 프로그래밍의 지원을 포함한다.","{'word': '확장', 'start': 688, 'end': 689, 'type': 'COM'}","{'word': '객체 지향 프로그래밍의 지원', 'start': 698, 'end': 712, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
66,"코볼은 영어와 비슷한 문법을 갖고 있으며, 자체 문서화 및 높은 가독성을 염두에 두고 설계되었다. 그러나 문법이 장황하고 300개가 넘는 예약어를 사용한다.","{'word': '코볼', 'start': 749, 'end': 750, 'type': 'COM'}","{'word': '예약어', 'start': 826, 'end': 828, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
67,"처럼 현대의 간결한 문법과 달리, 코볼은 더욱 영어와 같은 문법을 갖고 있다. (이 경우 ). 코볼 코드는 4개의 디비전(IDENTIFICATION, ENVIRONMENT, DATA, PROCEDURE)으로 나뉘며 이 안에 엄격한 계층적 섹션, 문단, 문장들을 포함한다.","{'word': '코볼 코드', 'start': 890, 'end': 894, 'type': 'COM'}","{'word': '디비전', 'start': 901, 'end': 903, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
68,"처럼 현대의 간결한 문법과 달리, 코볼은 더욱 영어와 같은 문법을 갖고 있다. (이 경우 ). 코볼 코드는 4개의 디비전(IDENTIFICATION, ENVIRONMENT, DATA, PROCEDURE)으로 나뉘며 이 안에 엄격한 계층적 섹션, 문단, 문장들을 포함한다.","{'word': '디비전', 'start': 901, 'end': 903, 'type': 'COM'}","{'word': 'IDENTIFICATION', 'start': 905, 'end': 918, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
69,"처럼 현대의 간결한 문법과 달리, 코볼은 더욱 영어와 같은 문법을 갖고 있다. (이 경우 ). 코볼 코드는 4개의 디비전(IDENTIFICATION, ENVIRONMENT, DATA, PROCEDURE)으로 나뉘며 이 안에 엄격한 계층적 섹션, 문단, 문장들을 포함한다.","{'word': '디비전', 'start': 901, 'end': 903, 'type': 'COM'}","{'word': 'ENVIRONMENT', 'start': 921, 'end': 931, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
70,"처럼 현대의 간결한 문법과 달리, 코볼은 더욱 영어와 같은 문법을 갖고 있다. (이 경우 ). 코볼 코드는 4개의 디비전(IDENTIFICATION, ENVIRONMENT, DATA, PROCEDURE)으로 나뉘며 이 안에 엄격한 계층적 섹션, 문단, 문장들을 포함한다.","{'word': '디비전', 'start': 901, 'end': 903, 'type': 'COM'}","{'word': 'DATA', 'start': 934, 'end': 937, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
71,"처럼 현대의 간결한 문법과 달리, 코볼은 더욱 영어와 같은 문법을 갖고 있다. (이 경우 ). 코볼 코드는 4개의 디비전(IDENTIFICATION, ENVIRONMENT, DATA, PROCEDURE)으로 나뉘며 이 안에 엄격한 계층적 섹션, 문단, 문장들을 포함한다.","{'word': '디비전', 'start': 901, 'end': 903, 'type': 'COM'}","{'word': 'PROCEDURE', 'start': 940, 'end': 948, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
72,"처럼 현대의 간결한 문법과 달리, 코볼은 더욱 영어와 같은 문법을 갖고 있다. (이 경우 ). 코볼 코드는 4개의 디비전(IDENTIFICATION, ENVIRONMENT, DATA, PROCEDURE)으로 나뉘며 이 안에 엄격한 계층적 섹션, 문단, 문장들을 포함한다.","{'word': '디비전', 'start': 901, 'end': 903, 'type': 'COM'}","{'word': '계층적 섹션', 'start': 966, 'end': 971, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
73,"처럼 현대의 간결한 문법과 달리, 코볼은 더욱 영어와 같은 문법을 갖고 있다. (이 경우 ). 코볼 코드는 4개의 디비전(IDENTIFICATION, ENVIRONMENT, DATA, PROCEDURE)으로 나뉘며 이 안에 엄격한 계층적 섹션, 문단, 문장들을 포함한다.","{'word': '디비전', 'start': 901, 'end': 903, 'type': 'COM'}","{'word': '문단', 'start': 974, 'end': 975, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
74,학계의 컴퓨터 과학자들은 코볼이 만들어졌을 때 일반적으로 사무용 응용 프로그램들에 관심이 없었으며 설계에도 참여하지 않았다.,"{'word': '사무용 응용 프로그램', 'start': 1083, 'end': 1093, 'type': 'COM'}","{'word': '코볼', 'start': 1065, 'end': 1066, 'type': 'COM'}",com:sub_concept,no_relation,no_relation
75,"코볼은 문법의 장황함, 설계 과정, 구조화 프로그래밍 지원 부족으로 비판을 받아왔으며 이음매가 없고 이해하기 어려운 프로그램들을 만들어냈다.","{'word': '프로그램', 'start': 1186, 'end': 1189, 'type': 'COM'}","{'word': '코볼', 'start': 1121, 'end': 1122, 'type': 'COM'}",com:sub_concept,com:made_of,no_relation
76,코볼과 포트란은 프로그램밍 언어 역사에서 고급 기술언어의 원점이 되고 있다.,"{'word': '고급 기술언어의 원점', 'start': 1320, 'end': 1330, 'type': 'COM'}","{'word': '코볼', 'start': 1297, 'end': 1298, 'type': 'COM'}",com:sub_concept,com:alternative_names,no_relation
77,"코볼(COBOL, COmmon Business-Oriented Language, 사무 지향 보통 언어)은 사무용으로 설계된, 영어와 같은 컴퓨터 프로그래밍 언어이다.","{'word': '코볼', 'start': 0, 'end': 1, 'type': 'COM'}","{'word': 'COBOL', 'start': 3, 'end': 7, 'type': 'COM'}",com:alter_names,com:alternative_names,com:alternative_names
78,"코볼(COBOL, COmmon Business-Oriented Language, 사무 지향 보통 언어)은 사무용으로 설계된, 영어와 같은 컴퓨터 프로그래밍 언어이다.","{'word': '코볼', 'start': 0, 'end': 1, 'type': 'COM'}","{'word': 'COmmon Business-Oriented Language', 'start': 10, 'end': 42, 'type': 'COM'}",com:alter_names,com:alternative_names,com:alternative_names
79,"코볼(COBOL, COmmon Business-Oriented Language, 사무 지향 보통 언어)은 사무용으로 설계된, 영어와 같은 컴퓨터 프로그래밍 언어이다.","{'word': '코볼', 'start': 0, 'end': 1, 'type': 'COM'}","{'word': '사무 지향 보통 언어', 'start': 45, 'end': 55, 'type': 'COM'}",com:alter_names,com:alternative_names,com:alternative_names
80,코볼보다 먼저 개발된 포트란(FORTRAN)은 주로 과학기술 계산용인 반면 비슷한 시기에 탄생된 코볼은 대량 데이터 처리를 위한 업무처리 및 관리 분야용으로 자리잡게 된다.,"{'word': '포트란', 'start': 1212, 'end': 1214, 'type': 'COM'}","{'word': 'FORTRAN', 'start': 1216, 'end': 1222, 'type': 'COM'}",com:alter_names,com:alternative_names,com:alternative_names
81,"코볼은 1959년에 CODASYL이 설계하였으며 부분적으로는, 코볼의 어머니로 불리는 그레이스 호퍼의 이전 프로그래밍 언어 디자인을 기반으로 한다.","{'word': '코볼', 'start': 460, 'end': 461, 'type': 'COM'}","{'word': '이전 프로그래밍 언어 디자인', 'start': 517, 'end': 531, 'type': 'COM'}",com:prior_tech,com:prior_technology,com:prior_technology
82,코볼보다 먼저 개발된 포트란(FORTRAN)은 주로 과학기술 계산용인 반면 비슷한 시기에 탄생된 코볼은 대량 데이터 처리를 위한 업무처리 및 관리 분야용으로 자리잡게 된다.,"{'word': '코볼', 'start': 1200, 'end': 1201, 'type': 'COM'}","{'word': '포트란', 'start': 1212, 'end': 1214, 'type': 'COM'}",com:prior_tech,com:prior_technology,com:prior_technology
83,임시방편으로 의도했던 미국 국방부가 발빠르게 컴퓨터 제조업체에게 그것을 제공하도록 강제한 결과 널리 채택되었다.,"{'word': '제조업체', 'start': 626, 'end': 629, 'type': 'ORG'}","{'word': '미국 국방부', 'start': 609, 'end': 614, 'type': 'ORG'}",no_relation,no_relation,no_relation
84,"1997년 가트너 그룹은 총 200,000,000,000줄의 코볼이 현존하며 모든 비즈니스 프로그램의 80%를 실행한 것으로 예측하였다.","{'word': '가트너 그룹', 'start': 175, 'end': 180, 'type': 'ORG'}","{'word': '코볼', 'start': 203, 'end': 204, 'type': 'COM'}",no_relation,no_relation,no_relation
85,"절차적, 명령형 언어이고, 2002년부터는 객체 지향 언어이다.","{'word': '명령형 언어', 'start': 98, 'end': 103, 'type': 'COM'}","{'word': '객체 지향 언어', 'start': 117, 'end': 124, 'type': 'COM'}",no_relation,no_relation,no_relation
86,"코볼은 주로 비즈니스, 금융, 회사/정부 관리 시스템에 주로 사용된다.","{'word': '코볼', 'start': 129, 'end': 130, 'type': 'COM'}","{'word': '정부 관리 시스템', 'start': 149, 'end': 157, 'type': 'COM'}",no_relation,no_relation,no_relation
87,코볼은 지금도 메인프레임 컴퓨터의 레거시 응용 프로그램들에 사용되고 있으며 대용량 일괄 처리 및 트랜잭션 처리와 같은 작업에 쓰인다.,"{'word': '트랜잭션 처리', 'start': 300, 'end': 306, 'type': 'COM'}","{'word': '대용량 일괄 처리', 'start': 288, 'end': 296, 'type': 'COM'}",no_relation,com:similar_technology,com:similar_technology
88,그러나 숙련된 코볼 프로그래머가 은퇴하고 인기가 시들어가면서 프로그램들은 새로운 플랫폼으로 이관돼 현대의 언어로 다시 작성되거나 소프트웨어 패키지로 대체되는 추세이다.,"{'word': '코볼', 'start': 329, 'end': 330, 'type': 'COM'}","{'word': '소프트웨어', 'start': 393, 'end': 397, 'type': 'COM'}",no_relation,no_relation,no_relation
89,코볼 대부분의 프로그래밍은 순수하게 기존의 응용 프로그램들을 관리하는 데 있다.,"{'word': '코볼', 'start': 415, 'end': 416, 'type': 'COM'}","{'word': '프로그램', 'start': 442, 'end': 445, 'type': 'COM'}",no_relation,no_relation,no_relation
90,데이터 처리를 위해 이식 가능한 프로그래밍 언어를 만들려는 미국 국방부 노고의 일부이기도 하다.,"{'word': '프로그래밍', 'start': 561, 'end': 565, 'type': 'COM'}","{'word': '데이터', 'start': 543, 'end': 545, 'type': 'COM'}",no_relation,no_relation,no_relation
91,"대형 표준 라이브러리가 부족하며 이 표준은 43개의 문들과 87개의 함수, 그리고 하나의 클래스만을 규정한다.","{'word': '라이브러리', 'start': 995, 'end': 999, 'type': 'COM'}","{'word': '클래스', 'start': 1039, 'end': 1041, 'type': 'COM'}",no_relation,no_relation,no_relation
92,"코볼은 1959년에 CODASYL이 설계하였으며 부분적으로는, 코볼의 어머니로 불리는 그레이스 호퍼의 이전 프로그래밍 언어 디자인을 기반으로 한다.","{'word': 'CODASYL', 'start': 471, 'end': 477, 'type': 'PER'}","{'word': '코볼', 'start': 460, 'end': 461, 'type': 'COM'}",per:production,per:production,per:production
93,"코볼은 1959년에 CODASYL이 설계하였으며 부분적으로는, 코볼의 어머니로 불리는 그레이스 호퍼의 이전 프로그래밍 언어 디자인을 기반으로 한다.","{'word': '그레이스 호퍼', 'start': 508, 'end': 514, 'type': 'PER'}","{'word': '코볼', 'start': 495, 'end': 496, 'type': 'COM'}",per:production,per:production,per:production
94,코볼과 포트란은 프로그램밍 언어 역사에서 고급 기술언어의 원점이 되고 있다.,"{'word': '코볼', 'start': 1297, 'end': 1298, 'type': 'COM'}","{'word': '포트란', 'start': 1301, 'end': 1303, 'type': 'COM'}",com:similar_tech,com:similar_technology,com:similar_technology
95,"코볼은 영어와 같은 문법을 가지고 있으며, 프로그램 안의 거의 모든 것을 기술하는데 사용된다.","{'word': '프로그램', 'start': 24, 'end': 27, 'type': 'COM'}","{'word': '코볼', 'start': 0, 'end': 1, 'type': 'COM'}",com:sub_concept,no_relation,com:sub_concept
96,영어와 같은 문법을 지닌 코볼은 300개의 예약어가 있다.,"{'word': '코볼', 'start': 170, 'end': 171, 'type': 'COM'}","{'word': '예약어', 'start': 180, 'end': 182, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
97,"각 코볼 프로그램은 4개의 어휘 항목을 이룬다; 워드, 리터럴, 픽처(PICTURE) 문자, 구분자(separator). 워드에는 예약어와 사용자 정의 식별자를 포함한다.","{'word': '코볼 프로그램', 'start': 313, 'end': 319, 'type': 'COM'}","{'word': '어휘 항목', 'start': 326, 'end': 330, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
98,"각 코볼 프로그램은 4개의 어휘 항목을 이룬다; 워드, 리터럴, 픽처(PICTURE) 문자, 구분자(separator). 워드에는 예약어와 사용자 정의 식별자를 포함한다.","{'word': '어휘 항목', 'start': 326, 'end': 330, 'type': 'COM'}","{'word': '워드', 'start': 338, 'end': 339, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
99,"각 코볼 프로그램은 4개의 어휘 항목을 이룬다; 워드, 리터럴, 픽처(PICTURE) 문자, 구분자(separator). 워드에는 예약어와 사용자 정의 식별자를 포함한다.","{'word': '어휘 항목', 'start': 326, 'end': 330, 'type': 'COM'}","{'word': '리터럴', 'start': 342, 'end': 344, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
100,"각 코볼 프로그램은 4개의 어휘 항목을 이룬다; 워드, 리터럴, 픽처(PICTURE) 문자, 구분자(separator). 워드에는 예약어와 사용자 정의 식별자를 포함한다.","{'word': '어휘 항목', 'start': 326, 'end': 330, 'type': 'COM'}","{'word': '픽처', 'start': 347, 'end': 348, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
101,"각 코볼 프로그램은 4개의 어휘 항목을 이룬다; 워드, 리터럴, 픽처(PICTURE) 문자, 구분자(separator). 워드에는 예약어와 사용자 정의 식별자를 포함한다.","{'word': '어휘 항목', 'start': 326, 'end': 330, 'type': 'COM'}","{'word': '구분자', 'start': 363, 'end': 365, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
102,"각 코볼 프로그램은 4개의 어휘 항목을 이룬다; 워드, 리터럴, 픽처(PICTURE) 문자, 구분자(separator). 워드에는 예약어와 사용자 정의 식별자를 포함한다.","{'word': '워드', 'start': 379, 'end': 380, 'type': 'COM'}","{'word': '예약어', 'start': 384, 'end': 386, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
103,"각 코볼 프로그램은 4개의 어휘 항목을 이룬다; 워드, 리터럴, 픽처(PICTURE) 문자, 구분자(separator). 워드에는 예약어와 사용자 정의 식별자를 포함한다.","{'word': '워드', 'start': 379, 'end': 380, 'type': 'COM'}","{'word': '식별자', 'start': 396, 'end': 398, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
104,"각 코볼 프로그램은 4개의 어휘 항목을 이룬다; 워드, 리터럴, 픽처(PICTURE) 문자, 구분자(separator). 워드에는 예약어와 사용자 정의 식별자를 포함한다. 이들은 최대 31개 문자 길이로 되어 있으며 문자, 숫자, 하이픈(-), 언더바(_)를 포함할 수 있다.","{'word': '워드', 'start': 379, 'end': 380, 'type': 'COM'}","{'word': '문자 길이', 'start': 418, 'end': 422, 'type': 'COM'}",com:sub_concept,no_relation,com:sub_concept
105,"각 코볼 프로그램은 4개의 어휘 항목을 이룬다; 워드, 리터럴, 픽처(PICTURE) 문자, 구분자(separator). 워드에는 예약어와 사용자 정의 식별자를 포함한다. 이들은 최대 31개 문자 길이로 되어 있으며 문자, 숫자, 하이픈(-), 언더바(_)를 포함할 수 있다.","{'word': '워드', 'start': 379, 'end': 380, 'type': 'COM'}","{'word': '문자', 'start': 432, 'end': 433, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
106,"각 코볼 프로그램은 4개의 어휘 항목을 이룬다; 워드, 리터럴, 픽처(PICTURE) 문자, 구분자(separator). 워드에는 예약어와 사용자 정의 식별자를 포함한다. 이들은 최대 31개 문자 길이로 되어 있으며 문자, 숫자, 하이픈(-), 언더바(_)를 포함할 수 있다.","{'word': '워드', 'start': 379, 'end': 380, 'type': 'COM'}","{'word': '숫자', 'start': 436, 'end': 437, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
107,"각 코볼 프로그램은 4개의 어휘 항목을 이룬다; 워드, 리터럴, 픽처(PICTURE) 문자, 구분자(separator). 워드에는 예약어와 사용자 정의 식별자를 포함한다. 이들은 최대 31개 문자 길이로 되어 있으며 문자, 숫자, 하이픈(-), 언더바(_)를 포함할 수 있다.","{'word': '워드', 'start': 379, 'end': 380, 'type': 'COM'}","{'word': '하이픈', 'start': 440, 'end': 442, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
108,"각 코볼 프로그램은 4개의 어휘 항목을 이룬다; 워드, 리터럴, 픽처(PICTURE) 문자, 구분자(separator). 워드에는 예약어와 사용자 정의 식별자를 포함한다. 이들은 최대 31개 문자 길이로 되어 있으며 문자, 숫자, 하이픈(-), 언더바(_)를 포함할 수 있다.","{'word': '워드', 'start': 379, 'end': 380, 'type': 'COM'}","{'word': '언더바', 'start': 448, 'end': 450, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
109,리터럴은 숫자(예: 12)와 문자(예: 'Hello!')를 포함한다.,"{'word': '리터럴', 'start': 466, 'end': 468, 'type': 'COM'}","{'word': '숫자', 'start': 471, 'end': 472, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
110,리터럴은 숫자(예: 12)와 문자(예: 'Hello!')를 포함한다.,"{'word': '리터럴', 'start': 466, 'end': 468, 'type': 'COM'}","{'word': '문자', 'start': 482, 'end': 483, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
111,"구분자는 공백 문자와 콤마, 세미콜론을 포함하고 그 뒤에 공백이 온다.","{'word': '구분자', 'start': 505, 'end': 507, 'type': 'COM'}","{'word': '공백 문자', 'start': 510, 'end': 514, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
112,"구분자는 공백 문자와 콤마, 세미콜론을 포함하고 그 뒤에 공백이 온다.","{'word': '구분자', 'start': 505, 'end': 507, 'type': 'COM'}","{'word': '콤마', 'start': 517, 'end': 518, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
113,"구분자는 공백 문자와 콤마, 세미콜론을 포함하고 그 뒤에 공백이 온다.","{'word': '구분자', 'start': 505, 'end': 507, 'type': 'COM'}","{'word': '세미콜론', 'start': 521, 'end': 524, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
114,"코볼 프로그램은 4개의 구역으로 나뉜다: IDENTIFICATION DIVISION, ENVIRONMENT DIVISION, DATA DIVISION, PROCEDURE DIVISION. IDENTIFICATION DIVISION은 소스 요소의 이름과 종류를 정의하며 여기서 클래스와 인터페이스가 지정된다.","{'word': '코볼 프로그램', 'start': 545, 'end': 551, 'type': 'COM'}","{'word': 'IDENTIFICATION DIVISION', 'start': 568, 'end': 590, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
115,"코볼 프로그램은 4개의 구역으로 나뉜다: IDENTIFICATION DIVISION, ENVIRONMENT DIVISION, DATA DIVISION, PROCEDURE DIVISION. IDENTIFICATION DIVISION은 소스 요소의 이름과 종류를 정의하며 여기서 클래스와 인터페이스가 지정된다.","{'word': '코볼 프로그램', 'start': 545, 'end': 551, 'type': 'COM'}","{'word': 'ENVIRONMENT DIVISION', 'start': 593, 'end': 612, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
116,"코볼 프로그램은 4개의 구역으로 나뉜다: IDENTIFICATION DIVISION, ENVIRONMENT DIVISION, DATA DIVISION, PROCEDURE DIVISION. IDENTIFICATION DIVISION은 소스 요소의 이름과 종류를 정의하며 여기서 클래스와 인터페이스가 지정된다.","{'word': '코볼 프로그램', 'start': 545, 'end': 551, 'type': 'COM'}","{'word': 'DATA DIVISION', 'start': 615, 'end': 627, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
117,"코볼 프로그램은 4개의 구역으로 나뉜다: IDENTIFICATION DIVISION, ENVIRONMENT DIVISION, DATA DIVISION, PROCEDURE DIVISION. IDENTIFICATION DIVISION은 소스 요소의 이름과 종류를 정의하며 여기서 클래스와 인터페이스가 지정된다.","{'word': '코볼 프로그램', 'start': 545, 'end': 551, 'type': 'COM'}","{'word': 'PROCEDURE DIVISION', 'start': 630, 'end': 647, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
118,"코볼 프로그램은 4개의 구역으로 나뉜다: IDENTIFICATION DIVISION, ENVIRONMENT DIVISION, DATA DIVISION, PROCEDURE DIVISION. IDENTIFICATION DIVISION은 소스 요소의 이름과 종류를 정의하며 여기서 클래스와 인터페이스가 지정된다.","{'word': 'IDENTIFICATION DIVISION', 'start': 650, 'end': 672, 'type': 'COM'}","{'word': '소스 요소', 'start': 675, 'end': 679, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
119,"코볼 프로그램은 4개의 구역으로 나뉜다: IDENTIFICATION DIVISION, ENVIRONMENT DIVISION, DATA DIVISION, PROCEDURE DIVISION. IDENTIFICATION DIVISION은 소스 요소의 이름과 종류를 정의하며 여기서 클래스와 인터페이스가 지정된다.","{'word': '소스 요소', 'start': 675, 'end': 679, 'type': 'COM'}","{'word': '이름', 'start': 682, 'end': 683, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
120,"코볼 프로그램은 4개의 구역으로 나뉜다: IDENTIFICATION DIVISION, ENVIRONMENT DIVISION, DATA DIVISION, PROCEDURE DIVISION. IDENTIFICATION DIVISION은 소스 요소의 이름과 종류를 정의하며 여기서 클래스와 인터페이스가 지정된다.","{'word': '소스 요소', 'start': 675, 'end': 679, 'type': 'COM'}","{'word': '종류', 'start': 686, 'end': 687, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
121,"코볼 프로그램은 4개의 구역으로 나뉜다: IDENTIFICATION DIVISION, ENVIRONMENT DIVISION, DATA DIVISION, PROCEDURE DIVISION. IDENTIFICATION DIVISION은 소스 요소의 이름과 종류를 정의하며 여기서 클래스와 인터페이스가 지정된다.","{'word': 'IDENTIFICATION DIVISION', 'start': 650, 'end': 672, 'type': 'COM'}","{'word': '클래스', 'start': 699, 'end': 701, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
122,"코볼 프로그램은 4개의 구역으로 나뉜다: IDENTIFICATION DIVISION, ENVIRONMENT DIVISION, DATA DIVISION, PROCEDURE DIVISION. IDENTIFICATION DIVISION은 소스 요소의 이름과 종류를 정의하며 여기서 클래스와 인터페이스가 지정된다.","{'word': 'IDENTIFICATION DIVISION', 'start': 650, 'end': 672, 'type': 'COM'}","{'word': '인터페이스', 'start': 704, 'end': 708, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
123,"ENVIRONMENT DIVISION은 이를 실행하는 시스템에 의존하는 프로그램 기능을 정의하는데, 이를테면 파일과 문자 집합을 들 수 있다.","{'word': 'ENVIRONMENT DIVISION', 'start': 717, 'end': 736, 'type': 'COM'}","{'word': '프로그램 기능', 'start': 757, 'end': 763, 'type': 'COM'}",com:sub_concept,com:sub_concept,no_relation
124,"ENVIRONMENT DIVISION은 이를 실행하는 시스템에 의존하는 프로그램 기능을 정의하는데, 이를테면 파일과 문자 집합을 들 수 있다.","{'word': 'ENVIRONMENT DIVISION', 'start': 717, 'end': 736, 'type': 'COM'}","{'word': '파일', 'start': 778, 'end': 779, 'type': 'COM'}",com:sub_concept,com:sub_concept,no_relation
125,"ENVIRONMENT DIVISION은 이를 실행하는 시스템에 의존하는 프로그램 기능을 정의하는데, 이를테면 파일과 문자 집합을 들 수 있다.","{'word': 'ENVIRONMENT DIVISION', 'start': 717, 'end': 736, 'type': 'COM'}","{'word': '문자 집합', 'start': 782, 'end': 786, 'type': 'COM'}",com:sub_concept,com:sub_concept,no_relation
126,DATA DIVISION은 변수와 매개변수를 선언하는데 쓰인다.,"{'word': 'DATA DIVISION', 'start': 797, 'end': 809, 'type': 'COM'}","{'word': '변수', 'start': 812, 'end': 813, 'type': 'COM'}",com:sub_concept,com:sub_concept,no_relation
127,DATA DIVISION은 변수와 매개변수를 선언하는데 쓰인다.,"{'word': 'DATA DIVISION', 'start': 797, 'end': 809, 'type': 'COM'}","{'word': '매개변수', 'start': 816, 'end': 819, 'type': 'COM'}",com:sub_concept,com:sub_concept,no_relation
128,PROCEDURE DIVISION은 프로그램의 문을 포함한다.,"{'word': 'PROCEDURE DIVISION', 'start': 833, 'end': 850, 'type': 'COM'}","{'word': '프로그램의 문', 'start': 853, 'end': 859, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
129,각 구역은 섹션으로 다시 구분되며 섹션은 여러 문단으로 이루어진다.,"{'word': '구역', 'start': 870, 'end': 871, 'type': 'COM'}","{'word': '섹션', 'start': 874, 'end': 875, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
130,각 구역은 섹션으로 다시 구분되며 섹션은 여러 문단으로 이루어진다.,"{'word': '구역', 'start': 870, 'end': 871, 'type': 'COM'}","{'word': '여러 문단', 'start': 891, 'end': 895, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
131,각 구역은 섹션으로 다시 구분되며 섹션은 여러 문단으로 이루어진다.,"{'word': '섹션', 'start': 874, 'end': 875, 'type': 'COM'}","{'word': '여러 문단', 'start': 891, 'end': 895, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
132,"코볼은 두 가지 포맷으로 작성할 수 있다: 고정 포맷 (기본값), 자유(free) 포맷. 고정 포맷의 경우 코드는 특정 이름에 맞추어 정렬하여야 한다.","{'word': '코볼', 'start': 906, 'end': 907, 'type': 'COM'}","{'word': '포맷', 'start': 915, 'end': 916, 'type': 'COM'}",com:sub_concept,com:made_of,com:sub_concept
133,"코볼은 두 가지 포맷으로 작성할 수 있다: 고정 포맷 (기본값), 자유(free) 포맷. 고정 포맷의 경우 코드는 특정 이름에 맞추어 정렬하여야 한다.","{'word': '코볼', 'start': 906, 'end': 907, 'type': 'COM'}","{'word': '고정 포맷', 'start': 930, 'end': 934, 'type': 'COM'}",com:sub_concept,com:made_of,com:sub_concept
134,"코볼은 두 가지 포맷으로 작성할 수 있다: 고정 포맷 (기본값), 자유(free) 포맷. 고정 포맷의 경우 코드는 특정 이름에 맞추어 정렬하여야 한다.","{'word': '고정 포맷', 'start': 956, 'end': 960, 'type': 'COM'}","{'word': '코드', 'start': 966, 'end': 967, 'type': 'COM'}",com:sub_concept,no_relation,com:sub_concept
135,"코볼은 두 가지 포맷으로 작성할 수 있다: 고정 포맷 (기본값), 자유(free) 포맷. 고정 포맷의 경우 코드는 특정 이름에 맞추어 정렬하여야 한다. 코볼 2002까지는 아래와 같았다: 코볼 2002에서 영역 A와 B는 컬럼 255로 병합, 확장되었으며 프로그램 이름 영역은 제거되었다. 코볼 2002는 또한 자유 포맷 코드를 도입하였다.","{'word': '코볼', 'start': 906, 'end': 907, 'type': 'COM'}","{'word': '자유 포맷', 'start': 1080, 'end': 1084, 'type': 'COM'}",com:sub_concept,com:made_of,com:sub_concept
136,코볼 2002는 또한 자유 포맷 코드를 도입하였다.,"{'word': '코볼 2002', 'start': 1068, 'end': 1074, 'type': 'COM'}","{'word': '자유 포맷 코드', 'start': 1080, 'end': 1087, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
137,자유 포맷 코드는 마치 더 새로운 프로그래밍 언어들에서처럼 파일의 어느 열에나 위치할 수 있다.,"{'word': '파일', 'start': 1130, 'end': 1131, 'type': 'COM'}","{'word': '자유 포맷 코드', 'start': 1097, 'end': 1104, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
138,주석은 codice_2을 이용하여 지정하며 어느 곳에서 위치해도 되고 고정 포맷 소스 코드에도 사용할 수 있다.,"{'word': '고정 포맷 소스 코드', 'start': 1190, 'end': 1200, 'type': 'COM'}","{'word': '주석', 'start': 1151, 'end': 1152, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
139,"각 코볼 프로그램은 4개의 어휘 항목을 이룬다; 워드, 리터럴, 픽처(PICTURE) 문자, 구분자(separator). 워드에는 예약어와 사용자 정의 식별자를 포함한다.","{'word': '픽처', 'start': 347, 'end': 348, 'type': 'COM'}","{'word': 'PICTURE', 'start': 350, 'end': 356, 'type': 'COM'}",com:alter_names,com:alternative_names,com:alternative_names
140,"각 코볼 프로그램은 4개의 어휘 항목을 이룬다; 워드, 리터럴, 픽처(PICTURE) 문자, 구분자(separator). 워드에는 예약어와 사용자 정의 식별자를 포함한다.","{'word': '구분자', 'start': 363, 'end': 365, 'type': 'COM'}","{'word': 'separator', 'start': 367, 'end': 375, 'type': 'COM'}",com:alter_names,com:alternative_names,com:alternative_names
141,"이를테면 IN과 OF 키워드는 번갈아 사용할 수 있는데, 이는 IS와 ARE, VALUE와 VALUES도 그러하다.","{'word': 'OF 키워드', 'start': 255, 'end': 260, 'type': 'COM'}","{'word': 'IN', 'start': 251, 'end': 252, 'type': 'COM'}",no_relation,com:similar_technology,com:similar_technology
142,"이를테면 IN과 OF 키워드는 번갈아 사용할 수 있는데, 이는 IS와 ARE, VALUE와 VALUES도 그러하다.","{'word': 'ARE', 'start': 285, 'end': 287, 'type': 'COM'}","{'word': 'IS', 'start': 281, 'end': 282, 'type': 'COM'}",no_relation,com:similar_technology,com:similar_technology
143,"이를테면 IN과 OF 키워드는 번갈아 사용할 수 있는데, 이는 IS와 ARE, VALUE와 VALUES도 그러하다.","{'word': 'VALUES', 'start': 297, 'end': 302, 'type': 'COM'}","{'word': 'VALUE', 'start': 290, 'end': 294, 'type': 'COM'}",no_relation,com:similar_technology,com:similar_technology
144,"코볼 2002에서 영역 A와 B는 컬럼 255로 병합, 확장되었으며 프로그램 이름 영역은 제거되었다.","{'word': '코볼 2002', 'start': 1011, 'end': 1017, 'type': 'COM'}","{'word': '프로그램', 'start': 1049, 'end': 1052, 'type': 'COM'}",no_relation,no_relation,com:sub_concept
145,2015년 7월에 작성된 이 JCL은 제이 무슬리(Jay Moseley)의 허큘리스 강좌와 샘플에서 가져온 것이다.,"{'word': '제이 무슬리', 'start': 5896, 'end': 5901, 'type': 'PER'}","{'word': '허큘리스 강좌', 'start': 5917, 'end': 5923, 'type': 'POH'}",per:production,per:production,per:production
146,"지금은 유명한 《C 프로그래밍 언어》(The C Programming Language)라는 책의 Hello world 프로그램 예제가 1978년 첫 출판되었을 때, 비슷한 메인프레임 코볼 프로그램 예제가 80컬럼의 천공 카드와 천공 카드 리더를 사용할 가능성이 매우 높은 JCL을 통해 제출되었다.","{'word': 'C 프로그래밍 언어', 'start': 5637, 'end': 5646, 'type': 'COM'}","{'word': '1978년', 'start': 5703, 'end': 5707, 'type': 'DAT'}",com:date_of_prod,com:date_of_produced,com:date_of_produced
147,"지금은 유명한 《C 프로그래밍 언어》(The C Programming Language)라는 책의 Hello world 프로그램 예제가 1978년 첫 출판되었을 때, 비슷한 메인프레임 코볼 프로그램 예제가 80컬럼의 천공 카드와 천공 카드 리더를 사용할 가능성이 매우 높은 JCL을 통해 제출되었다.","{'word': 'Hello world 프로그램 예제', 'start': 5682, 'end': 5700, 'type': 'COM'}","{'word': '1978년', 'start': 5703, 'end': 5707, 'type': 'DAT'}",com:date_of_prod,com:date_of_produced,com:date_of_produced
148,"지금은 유명한 《C 프로그래밍 언어》(The C Programming Language)라는 책의 Hello world 프로그램 예제가 1978년 첫 출판되었을 때, 비슷한 메인프레임 코볼 프로그램 예제가 80컬럼의 천공 카드와 천공 카드 리더를 사용할 가능성이 매우 높은 JCL을 통해 제출되었다.","{'word': 'The C Programming Language', 'start': 5649, 'end': 5674, 'type': 'COM'}","{'word': '1978년', 'start': 5703, 'end': 5707, 'type': 'DAT'}",com:date_of_prod,com:date_of_produced,com:date_of_produced
149,표준 코볼은 다음의 자료형을 제공한다: 자료형 안전은 코볼 안에서 변칙적이다. 수치 데이터는 각기 다른 표현들과 크기들로 조용히 변환되며 영숫자 데이터는 숫자와 그룹 데이터를 포함하여 문자열로 저장될 수 있는 어떠한 데이터 항목에라도 올 수 있다.,"{'word': '표준 코볼', 'start': 0, 'end': 4, 'type': 'COM'}","{'word': '수치 데이터', 'start': 44, 'end': 49, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
150,표준 코볼은 다음의 자료형을 제공한다: 자료형 안전은 코볼 안에서 변칙적이다. 수치 데이터는 각기 다른 표현들과 크기들로 조용히 변환되며 영숫자 데이터는 숫자와 그룹 데이터를 포함하여 문자열로 저장될 수 있는 어떠한 데이터 항목에라도 올 수 있다.,"{'word': '표준 코볼', 'start': 0, 'end': 4, 'type': 'COM'}","{'word': '영숫자 데이터', 'start': 77, 'end': 83, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
151,수치 데이터는 각기 다른 표현들과 크기들로 조용히 변환되며 영숫자 데이터는 숫자와 그룹 데이터를 포함하여 문자열로 저장될 수 있는 어떠한 데이터 항목에라도 올 수 있다.,"{'word': '영숫자 데이터', 'start': 77, 'end': 83, 'type': 'COM'}","{'word': '숫자', 'start': 86, 'end': 87, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
152,수치 데이터는 각기 다른 표현들과 크기들로 조용히 변환되며 영숫자 데이터는 숫자와 그룹 데이터를 포함하여 문자열로 저장될 수 있는 어떠한 데이터 항목에라도 올 수 있다.,"{'word': '영숫자 데이터', 'start': 77, 'end': 83, 'type': 'COM'}","{'word': '그룹 데이터', 'start': 90, 'end': 95, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
153,그 밖의 PICTURE 문자들(삽입 및 편집 문자)은 어떻게 항목이 형식을 가져야 하는지를 지정한다.,"{'word': 'PICTURE 문자', 'start': 379, 'end': 388, 'type': 'COM'}","{'word': '삽입', 'start': 391, 'end': 392, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
154,그 밖의 PICTURE 문자들(삽입 및 편집 문자)은 어떻게 항목이 형식을 가져야 하는지를 지정한다.,"{'word': 'PICTURE 문자', 'start': 379, 'end': 388, 'type': 'COM'}","{'word': '편집 문자', 'start': 396, 'end': 400, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
155,"이를테면 는 와 같다. ()와 부호 ()만을 포함하는 PICTURE 사양들은 순수하게 숫자 데이터 항목들만 정의하고 있지만, 영문자()나 영숫자()를 포함하는 PICTURE 사양들은 영숫자 데이터 항목을 정의한다. 그 밖의 형식의 문자로는 편집된 숫자(edited numeric)나 편집된 영숫자(edited alphanumeric) 데이터 항목들로 정의된다.","{'word': 'PICTURE 사양', 'start': 669, 'end': 678, 'type': 'COM'}","{'word': '편집된 숫자', 'start': 773, 'end': 778, 'type': 'COM'}",com:sub_concept,no_relation,com:sub_concept
156,"이를테면 는 와 같다. ()와 부호 ()만을 포함하는 PICTURE 사양들은 순수하게 숫자 데이터 항목들만 정의하고 있지만, 영문자()나 영숫자()를 포함하는 PICTURE 사양들은 영숫자 데이터 항목을 정의한다. 그 밖의 형식의 문자로는 편집된 숫자(edited numeric)나 편집된 영숫자(edited alphanumeric) 데이터 항목들로 정의된다.","{'word': 'PICTURE 사양', 'start': 669, 'end': 678, 'type': 'COM'}","{'word': '편집된 영숫자', 'start': 797, 'end': 803, 'type': 'COM'}",com:sub_concept,no_relation,com:sub_concept
157,보고서 작성기(report writer)는 보고서를 작성하기 위한 선언형 기능이다.,"{'word': '보고서', 'start': 1000, 'end': 1002, 'type': 'COM'}","{'word': '보고서 작성기', 'start': 976, 'end': 982, 'type': 'COM'}",com:sub_concept,com:made_of,com:made_of
158,각 보고서는 DATA DIVISION의 REPORT SECTION에 정의된다.,"{'word': 'DATA DIVISION', 'start': 1227, 'end': 1239, 'type': 'COM'}","{'word': 'REPORT SECTION', 'start': 1242, 'end': 1255, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
159,이를테면 고객 주문이 상세히 적힌 보고서를 만들 때 프로그램이 다른 고객의 주문에 도달하게 되면 제어 차단이 일어난다.,"{'word': '프로그램', 'start': 1408, 'end': 1411, 'type': 'COM'}","{'word': '다른 고객의 주문', 'start': 1414, 'end': 1422, 'type': 'COM'}",com:sub_concept,no_relation,no_relation
160,PROCEDURE DIVISION(통틀어 프로시저로 호칭)에 위치한 섹션과 문단은 레이블과 단순한 함수로 사용할 수 있다.,"{'word': 'PROCEDURE DIVISION', 'start': 2431, 'end': 2448, 'type': 'COM'}","{'word': '섹션', 'start': 2469, 'end': 2470, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
161,PROCEDURE DIVISION(통틀어 프로시저로 호칭)에 위치한 섹션과 문단은 레이블과 단순한 함수로 사용할 수 있다.,"{'word': 'PROCEDURE DIVISION', 'start': 2431, 'end': 2448, 'type': 'COM'}","{'word': '문단', 'start': 2473, 'end': 2474, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
162,PROCEDURE DIVISION(통틀어 프로시저로 호칭)에 위치한 섹션과 문단은 레이블과 단순한 함수로 사용할 수 있다.,"{'word': '섹션', 'start': 2469, 'end': 2470, 'type': 'COM'}","{'word': '레이블', 'start': 2477, 'end': 2479, 'type': 'COM'}",com:sub_concept,no_relation,no_relation
163,PROCEDURE DIVISION(통틀어 프로시저로 호칭)에 위치한 섹션과 문단은 레이블과 단순한 함수로 사용할 수 있다.,"{'word': '문단', 'start': 2473, 'end': 2474, 'type': 'COM'}","{'word': '함수', 'start': 2486, 'end': 2487, 'type': 'COM'}",com:sub_concept,no_relation,no_relation
164,실행은 프로그램의 프로시저를 통해 종료가 될 때까지 내려간다.,"{'word': '프로그램', 'start': 2538, 'end': 2541, 'type': 'COM'}","{'word': '프로시저', 'start': 2544, 'end': 2547, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
165,"특이한 제어 흐름은 지뢰를 만들어낼 수 있는데, 여기서 지뢰는 수행된 프로시저의 제어권을 예측하지 못한 시간대에 예측하지 못한 장소로 돌아오는 문제를 야기한다.","{'word': '특이한 제어 흐름', 'start': 2647, 'end': 2655, 'type': 'COM'}","{'word': '지뢰', 'start': 2658, 'end': 2659, 'type': 'COM'}",com:sub_concept,com:sub_concept,no_relation
166,"지금은 유명한 《C 프로그래밍 언어》(The C Programming Language)라는 책의 Hello world 프로그램 예제가 1978년 첫 출판되었을 때, 비슷한 메인프레임 코볼 프로그램 예제가 80컬럼의 천공 카드와 천공 카드 리더를 사용할 가능성이 매우 높은 JCL을 통해 제출되었다.","{'word': 'C 프로그래밍 언어', 'start': 5637, 'end': 5646, 'type': 'COM'}","{'word': 'Hello world 프로그램 예제', 'start': 5682, 'end': 5700, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
167,"지금은 유명한 《C 프로그래밍 언어》(The C Programming Language)라는 책의 Hello world 프로그램 예제가 1978년 첫 출판되었을 때, 비슷한 메인프레임 코볼 프로그램 예제가 80컬럼의 천공 카드와 천공 카드 리더를 사용할 가능성이 매우 높은 JCL을 통해 제출되었다.","{'word': 'The C Programming Language', 'start': 5649, 'end': 5674, 'type': 'COM'}","{'word': 'Hello world 프로그램 예제', 'start': 5682, 'end': 5700, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
168,그 밖의 형식의 문자로는 편집된 숫자(edited numeric)나 편집된 영숫자(edited alphanumeric) 데이터 항목들로 정의된다.,"{'word': '편집된 숫자', 'start': 773, 'end': 778, 'type': 'COM'}","{'word': 'edited numeric', 'start': 780, 'end': 793, 'type': 'COM'}",com:alter_names,com:alternative_names,com:alternative_names
169,그 밖의 형식의 문자로는 편집된 숫자(edited numeric)나 편집된 영숫자(edited alphanumeric) 데이터 항목들로 정의된다.,"{'word': '편집된 영숫자', 'start': 797, 'end': 803, 'type': 'COM'}","{'word': 'edited alphanumeric', 'start': 805, 'end': 823, 'type': 'COM'}",com:alter_names,com:alternative_names,com:alternative_names
170,보고서 작성기(report writer)는 보고서를 작성하기 위한 선언형 기능이다.,"{'word': '보고서 작성기', 'start': 976, 'end': 982, 'type': 'COM'}","{'word': 'report writer', 'start': 984, 'end': 996, 'type': 'COM'}",com:alter_names,com:alternative_names,com:alternative_names
171,보고서들은 계층적 제어 차단(control break)을 두고 동작한다.,"{'word': '계층적 제어 차단', 'start': 1316, 'end': 1324, 'type': 'COM'}","{'word': 'control break', 'start': 1326, 'end': 1338, 'type': 'COM'}",com:alter_names,com:alternative_names,com:alternative_names
172,PROCEDURE DIVISION(통틀어 프로시저로 호칭)에 위치한 섹션과 문단은 레이블과 단순한 함수로 사용할 수 있다.,"{'word': 'PROCEDURE DIVISION', 'start': 2431, 'end': 2448, 'type': 'COM'}","{'word': '프로시저', 'start': 2454, 'end': 2457, 'type': 'COM'}",com:alter_names,com:alternative_names,com:alternative_names
173,아래는 DATA DIVISION이 비어있으며 MVS 3.8J이 구동되는 시스템/370 허큘리스 에뮬레이터와 GNU/리눅스를 통해 테스트되었다.,"{'word': 'MVS 3.8J', 'start': 5820, 'end': 5827, 'type': 'COM'}","{'word': '스템/370 허큘리스 에뮬레이터', 'start': 5836, 'end': 5852, 'type': 'COM'}",com:made_of,no_relation,no_relation
174,아래는 DATA DIVISION이 비어있으며 MVS 3.8J이 구동되는 시스템/370 허큘리스 에뮬레이터와 GNU/리눅스를 통해 테스트되었다.,"{'word': 'MVS 3.8J', 'start': 5820, 'end': 5827, 'type': 'COM'}","{'word': 'GNU/리눅스', 'start': 5855, 'end': 5861, 'type': 'COM'}",com:made_of,no_relation,no_relation
175,2015년 7월에 작성된 이 JCL은 제이 무슬리(Jay Moseley)의 허큘리스 강좌와 샘플에서 가져온 것이다.,"{'word': 'JCL', 'start': 5891, 'end': 5893, 'type': 'COM'}","{'word': '샘플', 'start': 5926, 'end': 5927, 'type': 'COM'}",com:made_of,com:sub_concept,no_relation
176,일부 PICTURE 문자들은 데이터의 종류 및 얼마나 많은 문자열이나 숫자들을 메모리에 차지하게 할 것인지를 지정한다.,"{'word': '데이터', 'start': 285, 'end': 287, 'type': 'COM'}","{'word': 'PICTURE 문자', 'start': 272, 'end': 281, 'type': 'COM'}",no_relation,no_relation,no_relation
177,"포인터와 오브젝트 참조를 선언하는데 사용할 수 있지만, 대개는 수치 자료형을 지정하기 위해 존재한다.","{'word': '포인터', 'start': 899, 'end': 901, 'type': 'COM'}","{'word': '오브젝트 참조', 'start': 904, 'end': 910, 'type': 'COM'}",no_relation,no_relation,com:similar_technology
178,"프로그래머는 보고서 레이아웃 및 보고서를 만들어내는데 필요한 데이터만 지정하면 되며, 페이지 나누기, 데이터 형식 지정, 머릿말과 꼬릿말과 같은 것들을 다루기 위해 코드를 작성할 필요는 없다.","{'word': '보고서 레이아웃', 'start': 1030, 'end': 1037, 'type': 'COM'}","{'word': '데이터', 'start': 1057, 'end': 1059, 'type': 'COM'}",no_relation,no_relation,com:sub_concept
179,제어 차단은 키 변수가 값을 변경할 때 발생한다.,"{'word': '키 변수', 'start': 1358, 'end': 1361, 'type': 'COM'}","{'word': '제어 차단', 'start': 1351, 'end': 1355, 'type': 'COM'}",no_relation,no_relation,no_relation
180,문은 조건이 참이 될 때까지 실행하는 반복문을 정의한다. (다른 언어들의 wihle과는 다름) 프로시저들이나 일정한 범위의 프로시저들을 호출하기 위해서도 쓰인다. (프로시저 단락 참고) 와 는 각각 하위 프로그램들과 메소드를 호출한다.,"{'word': '메소드', 'start': 3808, 'end': 3810, 'type': 'COM'}","{'word': '프로그램', 'start': 3801, 'end': 3804, 'type': 'COM'}",no_relation,no_relation,com:similar_technology
181,하위 프로그램/메소드의 이름은 리터럴이나 데이터 항목이 되는 문자열 안에 포함된다.,"{'word': '하위 프로그램', 'start': 3819, 'end': 3825, 'type': 'COM'}","{'word': '메소드', 'start': 3827, 'end': 3829, 'type': 'COM'}",no_relation,no_relation,com:similar_technology
182,매개변수들은 참조에 의해서나 내용을 통해서나(사본이 참조에 의해 전달될 때) 값에 의해(프로토타입을 이용할 수 있는 경우에만) 전달할 수 있다.,"{'word': '매개변수', 'start': 3866, 'end': 3869, 'type': 'COM'}","{'word': '프로토타입', 'start': 3915, 'end': 3919, 'type': 'COM'}",no_relation,no_relation,no_relation
183,"수많은 논리적 결함들이 코볼 60에 발견되었는데, GE의 찰스 캐츠는 이에 대해 모호하게 해석되지 않는다고 경고하였다.","{'word': '찰스 캐츠', 'start': 32, 'end': 36, 'type': 'PER'}","{'word': 'GE', 'start': 28, 'end': 29, 'type': 'POH'}",per:title,no_relation,no_relation
184,부사장이었던 William Rinehuls는 코볼 커뮤니티의 2/3이 위원회의 존재조차 모르고 있다고 불평하였다.,"{'word': 'William Rinehuls', 'start': 1285, 'end': 1300, 'type': 'PER'}","{'word': '부사장', 'start': 1278, 'end': 1280, 'type': 'POH'}",per:title,per:title,per:title
185,"1981년 1월, 트래블러스 인슈런스(Travelers Insurance)의 수석 부사장 조지프 T 브로피(Joseph T. Brophy)는 표준 위원회를 고소하겠다고 위협하였는데 그 까닭은 코볼-74와 상위 호환이 되지 않았기 때문이다.","{'word': '조지프 T 브로피', 'start': 1869, 'end': 1877, 'type': 'PER'}","{'word': '수석 부사장', 'start': 1862, 'end': 1867, 'type': 'POH'}",per:title,per:title,per:title
186,"1981년 1월, 트래블러스 인슈런스(Travelers Insurance)의 수석 부사장 조지프 T 브로피(Joseph T. Brophy)는 표준 위원회를 고소하겠다고 위협하였는데 그 까닭은 코볼-74와 상위 호환이 되지 않았기 때문이다. 브로피는 그들의 40,000,000줄이나 되는 코드의 변환을 ""비생산적""이고 ""프로그램 자원 중 완전한 쓰레기""라고 기술하였다.","{'word': '브로피', 'start': 1953, 'end': 1955, 'type': 'PER'}","{'word': '수석 부사장', 'start': 1862, 'end': 1867, 'type': 'POH'}",per:title,per:title,per:title
187,ANSI는 1968년 8월 《USA Standard COBOL X3.23》을 만듦으로써 차기 버전들의 주춧돌이 되었다.,"{'word': 'USA Standard COBOL X3.23', 'start': 758, 'end': 781, 'type': 'COM'}","{'word': '1968년 8월', 'start': 748, 'end': 755, 'type': 'DAT'}",com:date_of_prod,com:date_of_produced,com:date_of_produced
188,"1974년 ANSI는 (ANS) 코볼의 개정판을 출판하였으며, 여기에는 파일 조직, DELETE 문, 세그먼트 모듈과 같은 새로운 기능들이 포함되었다.","{'word': '코볼의 개정판', 'start': 1421, 'end': 1427, 'type': 'COM'}","{'word': '1974년', 'start': 1403, 'end': 1407, 'type': 'DAT'}",com:date_of_prod,com:date_of_produced,com:date_of_produced
189,1985년 말에 ANSI는 개정된 표준을 출판하였다.,"{'word': '개정된 표준', 'start': 2638, 'end': 2643, 'type': 'COM'}","{'word': '1985년 말', 'start': 2623, 'end': 2629, 'type': 'DAT'}",com:date_of_prod,com:date_of_produced,com:date_of_produced
190,초기에는 1997년에 이 리비전이 완수될 것으로 예측했으며 ISO 위원회 초안(Committee Draft)은 1997년에 이용이 가능하게 되었다.,"{'word': 'ISO 위원회 초안', 'start': 2983, 'end': 2992, 'type': 'COM'}","{'word': '1997년', 'start': 3012, 'end': 3016, 'type': 'DAT'}",com:date_of_prod,com:date_of_produced,com:date_of_produced
191,마지막으로 승인된 ISO 표준은 2002년 말에 승인되어 출판되었다.,"{'word': 'ISO 표준', 'start': 3109, 'end': 3114, 'type': 'COM'}","{'word': '2002년 말', 'start': 3117, 'end': 3123, 'type': 'DAT'}",com:date_of_prod,com:date_of_produced,com:date_of_produced
192,그 뒤 코볼-61 확장 사양으로 1963년에 대체되어 정렬 및 보고서 작성 기능이 도입되었다.,"{'word': '코볼-61', 'start': 481, 'end': 485, 'type': 'COM'}","{'word': '정렬', 'start': 507, 'end': 508, 'type': 'COM'}",com:sub_concept,com:sub_concept,no_relation
193,그 뒤 코볼-61 확장 사양으로 1963년에 대체되어 정렬 및 보고서 작성 기능이 도입되었다.,"{'word': '코볼-61', 'start': 481, 'end': 485, 'type': 'COM'}","{'word': '보고서 작성 기능', 'start': 512, 'end': 520, 'type': 'COM'}",com:sub_concept,com:sub_concept,no_relation
194,코볼 에디션 1965는 사양에 대해 더 명확히 하고 대용량 기억 장치의 파일들과 표를 다룰 수 있는 기능을 소개하였다.,"{'word': '코볼 에디션 1965', 'start': 583, 'end': 593, 'type': 'COM'}","{'word': '대용량 기억 장치의 파일', 'start': 612, 'end': 624, 'type': 'COM'}",com:sub_concept,no_relation,com:sub_concept
195,코볼 에디션 1965는 사양에 대해 더 명확히 하고 대용량 기억 장치의 파일들과 표를 다룰 수 있는 기능을 소개하였다.,"{'word': '코볼 에디션 1965', 'start': 583, 'end': 593, 'type': 'COM'}","{'word': '표', 'start': 628, 'end': 628, 'type': 'COM'}",com:sub_concept,no_relation,com:sub_concept
196,"1974년 ANSI는 (ANS) 코볼의 개정판을 출판하였으며, 여기에는 파일 조직, DELETE 문, 세그먼트 모듈과 같은 새로운 기능들이 포함되었다.","{'word': '코볼의 개정판', 'start': 1421, 'end': 1427, 'type': 'COM'}","{'word': '파일 조직', 'start': 1443, 'end': 1447, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
197,"1974년 ANSI는 (ANS) 코볼의 개정판을 출판하였으며, 여기에는 파일 조직, DELETE 문, 세그먼트 모듈과 같은 새로운 기능들이 포함되었다.","{'word': '코볼의 개정판', 'start': 1421, 'end': 1427, 'type': 'COM'}","{'word': 'DELETE 문', 'start': 1450, 'end': 1457, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
198,"1974년 ANSI는 (ANS) 코볼의 개정판을 출판하였으며, 여기에는 파일 조직, DELETE 문, 세그먼트 모듈과 같은 새로운 기능들이 포함되었다.","{'word': '코볼의 개정판', 'start': 1421, 'end': 1427, 'type': 'COM'}","{'word': '세그먼트 모듈', 'start': 1460, 'end': 1466, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
199,두 개의 개정안이 1989년(내장 함수 도입)과 1993년(기타 수정 사항 제공)에 공개되었다.,"{'word': '개정안', 'start': 2738, 'end': 2740, 'type': 'COM'}","{'word': '내장 함수 도입', 'start': 2749, 'end': 2756, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
200,두 개의 개정안이 1989년(내장 함수 도입)과 1993년(기타 수정 사항 제공)에 공개되었다.,"{'word': '개정안', 'start': 2738, 'end': 2740, 'type': 'COM'}","{'word': '기타 수정 사항 제공', 'start': 2766, 'end': 2776, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
201,"2003년과 2009년 사이에 3개의 기술 보고서가 생산되었으며, 코볼을 위한 오브젝트 완성(object finalization), XML 처리, 콜렉션 클래스를 기술하고 있다.","{'word': '기술 보고서', 'start': 3413, 'end': 3418, 'type': 'COM'}","{'word': 'object finalization', 'start': 3444, 'end': 3462, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
202,"2003년과 2009년 사이에 3개의 기술 보고서가 생산되었으며, 코볼을 위한 오브젝트 완성(object finalization), XML 처리, 콜렉션 클래스를 기술하고 있다.","{'word': '기술 보고서', 'start': 3413, 'end': 3418, 'type': 'COM'}","{'word': 'XML 처리', 'start': 3466, 'end': 3471, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
203,"2003년과 2009년 사이에 3개의 기술 보고서가 생산되었으며, 코볼을 위한 오브젝트 완성(object finalization), XML 처리, 콜렉션 클래스를 기술하고 있다.","{'word': '기술 보고서', 'start': 3413, 'end': 3418, 'type': 'COM'}","{'word': '콜렉션 클래스', 'start': 3474, 'end': 3480, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
204,"코볼 2002의 지원 수준은 매주 낮았다. 즉, 이 표준을 온전히 지원하는 컴파일러가 전무했다.","{'word': '코볼 2002', 'start': 3492, 'end': 3498, 'type': 'COM'}","{'word': '컴파일러', 'start': 3534, 'end': 3537, 'type': 'COM'}",com:sub_concept,no_relation,com:sub_concept
205,"코볼 프로그램들은 정부와 기업체에 고루 사용되며 z/OS, VME, 유닉스, 윈도우와 같은 다양한 운영 체제에서 구동된다.","{'word': '운영 체제', 'start': 3758, 'end': 3762, 'type': 'COM'}","{'word': 'VME', 'start': 3736, 'end': 3738, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
206,"코볼 프로그램들은 정부와 기업체에 고루 사용되며 z/OS, VME, 유닉스, 윈도우와 같은 다양한 운영 체제에서 구동된다.","{'word': '운영 체제', 'start': 3758, 'end': 3762, 'type': 'COM'}","{'word': '유닉스', 'start': 3741, 'end': 3743, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
207,"코볼 프로그램들은 정부와 기업체에 고루 사용되며 z/OS, VME, 유닉스, 윈도우와 같은 다양한 운영 체제에서 구동된다.","{'word': '운영 체제', 'start': 3758, 'end': 3762, 'type': 'COM'}","{'word': '윈도우', 'start': 3746, 'end': 3748, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
208,"코볼 프로그램들은 정부와 기업체에 고루 사용되며 z/OS, VME, 유닉스, 윈도우와 같은 다양한 운영 체제에서 구동된다.","{'word': '운영 체제', 'start': 3758, 'end': 3762, 'type': 'COM'}","{'word': 'z/OS', 'start': 3730, 'end': 3733, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
209,"2006년과 2012년에 컴퓨터월드 조사에 따르면 조직 중 60%가 코볼을 (C++, 비주얼 베이직 닷넷보다 더) 사용하였으며 코볼은 자사 내부 소프트웨어 다수에 사용되었다.","{'word': '소프트웨어', 'start': 4174, 'end': 4178, 'type': 'COM'}","{'word': '코볼', 'start': 4164, 'end': 4165, 'type': 'COM'}",com:sub_concept,com:made_of,com:sub_concept
210,이 버전은 ANS(American National Standard) 코볼로 알려져 있으며 1972년에 ISO에 채택되었다.,"{'word': 'ANS', 'start': 815, 'end': 817, 'type': 'COM'}","{'word': 'American National Standard', 'start': 819, 'end': 844, 'type': 'COM'}",com:alter_names,com:alternative_names,com:alternative_names
211,제안된 표준(일반적으로 코볼-80으로 알려져 있음)은 이전 것과는 상당히 달랐으므로 비호환성 및 변환 비용에 대한 걱정을 야기하였다.,"{'word': '표준', 'start': 1748, 'end': 1749, 'type': 'COM'}","{'word': '코볼-80', 'start': 1757, 'end': 1761, 'type': 'COM'}",com:alter_names,com:alternative_names,com:alternative_names
212,초기에는 1997년에 이 리비전이 완수될 것으로 예측했으며 ISO 위원회 초안(Committee Draft)은 1997년에 이용이 가능하게 되었다.,"{'word': 'ISO 위원회 초안', 'start': 2983, 'end': 2992, 'type': 'COM'}","{'word': 'Committee Draft', 'start': 2994, 'end': 3008, 'type': 'COM'}",com:alter_names,com:alternative_names,com:alternative_names
213,"2003년과 2009년 사이에 3개의 기술 보고서가 생산되었으며, 코볼을 위한 오브젝트 완성(object finalization), XML 처리, 콜렉션 클래스를 기술하고 있다.","{'word': '코볼을 위한 오브젝트', 'start': 3429, 'end': 3439, 'type': 'COM'}","{'word': 'object finalization', 'start': 3444, 'end': 3462, 'type': 'COM'}",com:alter_names,no_relation,com:alternative_names
214,"마이크로 포커스, 후지쯔, IBM을 포함한 일부 업체들은 완전한 리비전의 초안에 기반한 객체 지향 문법을 도입하였다.","{'word': '리비전의 초안', 'start': 3069, 'end': 3075, 'type': 'COM'}","{'word': '객체 지향 문법', 'start': 3082, 'end': 3089, 'type': 'COM'}",com:made_of,no_relation,no_relation
215,코볼-60은 1961년에 코볼-61으로 대체되었다.,"{'word': '코볼-61', 'start': 462, 'end': 466, 'type': 'COM'}","{'word': '코볼-60', 'start': 448, 'end': 452, 'type': 'COM'}",com:prior_tech,com:prior_technology,com:prior_technology
216,한 해 더 지나 코볼-80 컴파일러가 코볼-74 프로그램들의 변환에 일부 문제가 있었던 DEC VAX 사용자들에게 공개되었다.,"{'word': '코볼-80', 'start': 2490, 'end': 2494, 'type': 'COM'}","{'word': '코볼-74', 'start': 2502, 'end': 2506, 'type': 'COM'}",com:prior_tech,com:prior_technology,com:prior_technology
217,객체 지향 기능들은 C++과 스몰토크로부터 가져왔다.,"{'word': '객체 지향 기능', 'start': 2920, 'end': 2927, 'type': 'COM'}","{'word': 'C++', 'start': 2931, 'end': 2933, 'type': 'COM'}",com:prior_tech,com:sub_concept,com:prior_technology
218,객체 지향 기능들은 C++과 스몰토크로부터 가져왔다.,"{'word': '객체 지향 기능', 'start': 2920, 'end': 2927, 'type': 'COM'}","{'word': '스몰토크', 'start': 2936, 'end': 2939, 'type': 'COM'}",com:prior_tech,com:sub_concept,com:prior_technology
219,"기타 수많은 기능들이 있었으며, 이 가운데 다수가 《CODASYL COBOL Journal of Development since 1978》에 언급되었고 코볼-85에 포함될 기회는 놓치게 되었다.","{'word': '코볼-85', 'start': 3301, 'end': 3305, 'type': 'COM'}","{'word': 'CODASYL COBOL Journal of Development since 1978', 'start': 3245, 'end': 3291, 'type': 'COM'}",com:prior_tech,no_relation,no_relation
220,"수많은 논리적 결함들이 코볼 60에 발견되었는데, GE의 찰스 캐츠는 이에 대해 모호하게 해석되지 않는다고 경고하였다.","{'word': '찰스 캐츠', 'start': 32, 'end': 36, 'type': 'PER'}","{'word': '코볼 60', 'start': 13, 'end': 17, 'type': 'COM'}",no_relation,no_relation,no_relation
221,1962년 말 ISO와 미국 스탠더드(현재의 ANSI)는 표준을 만드는 그룹들을 설립하였다.,"{'word': 'ISO', 'start': 698, 'end': 700, 'type': 'ORG'}","{'word': '미국 스탠더드', 'start': 703, 'end': 709, 'type': 'ORG'}",no_relation,no_relation,no_relation
222,ANSI 위원회와 독립적으로 CODASYL 프로그래밍 언어 위원회는 언어 개선에 착수했다.,"{'word': 'CODASYL 프로그래밍 언어 위원회', 'start': 937, 'end': 956, 'type': 'ORG'}","{'word': 'ANSI 위원회', 'start': 921, 'end': 928, 'type': 'ORG'}",no_relation,no_relation,no_relation
223,"CODASYL이 ANSI 위원회와 독립적이었으나, ANSI는 《CODASYL Journal of Development》를 사용하여 구현을 보증하는데 충분히 대중적인 기능들을 식별하게 하였다.","{'word': 'ANSI 위원회', 'start': 1105, 'end': 1112, 'type': 'ORG'}","{'word': 'CODASYL', 'start': 1096, 'end': 1102, 'type': 'ORG'}",no_relation,no_relation,no_relation
224,프로그래밍 언어 위원회는 또한 ECMA와 일본 코볼 표준 위원회와도 연계하였다.,"{'word': 'ECMA', 'start': 1220, 'end': 1223, 'type': 'ORG'}","{'word': '프로그래밍 언어 위원회', 'start': 1203, 'end': 1214, 'type': 'ORG'}",no_relation,no_relation,no_relation
225,프로그래밍 언어 위원회는 또한 ECMA와 일본 코볼 표준 위원회와도 연계하였다.,"{'word': '일본 코볼 표준 위원회', 'start': 1226, 'end': 1237, 'type': 'ORG'}","{'word': '프로그래밍 언어 위원회', 'start': 1203, 'end': 1214, 'type': 'ORG'}",no_relation,no_relation,no_relation
226,부사장이었던 William Rinehuls는 코볼 커뮤니티의 2/3이 위원회의 존재조차 모르고 있다고 불평하였다.,"{'word': '코볼 커뮤니티', 'start': 1303, 'end': 1309, 'type': 'ORG'}","{'word': '위원회', 'start': 1317, 'end': 1319, 'type': 'ORG'}",no_relation,no_relation,no_relation
227,"1981년 1월, 트래블러스 인슈런스(Travelers Insurance)의 수석 부사장 조지프 T 브로피(Joseph T. Brophy)는 표준 위원회를 고소하겠다고 위협하였는데 그 까닭은 코볼-74와 상위 호환이 되지 않았기 때문이다.","{'word': '트래블러스 인슈런스', 'start': 1829, 'end': 1838, 'type': 'ORG'}","{'word': '표준 위원회', 'start': 1898, 'end': 1903, 'type': 'ORG'}",no_relation,no_relation,no_relation
228,마이크로 포커스는 그 이유를 새로운 기능에 대한 사용자 수요가 적고 컴파일러 적합성을 테스트하는데 쓰였던 미국 국립표준기술연구소(NIST) 테스트 제품군이 철폐되었기 때문으로 보았다.,"{'word': '마이크로 포커스', 'start': 3546, 'end': 3553, 'type': 'ORG'}","{'word': '미국 국립표준기술연구소', 'start': 3605, 'end': 3616, 'type': 'ORG'}",no_relation,no_relation,no_relation
229,마지못한 단기 위원회는 완전한 정리를 단행하였고 1963년 3월 코볼의 문법이 알골의 것처럼 정의가 가능해졌으나 의미적인 모호성(semantic ambiguities)은 여전히 남아있다고 보고되었다.,"{'word': '단기 위원회', 'start': 72, 'end': 77, 'type': 'ORG'}","{'word': '알골', 'start': 111, 'end': 112, 'type': 'COM'}",no_relation,no_relation,no_relation
230,1962년 미국 해군 평가는 분당 3-11개 문의 컴파일 속도를 지적했다.,"{'word': '미국 해군', 'start': 214, 'end': 218, 'type': 'ORG'}","{'word': '컴파일 속도', 'start': 236, 'end': 241, 'type': 'COM'}",no_relation,no_relation,no_relation
231,"그 해의 나중에 DPMA(Data Processing Management Association)는 이것은 새로운 표준에 강하게 반하는 것이며, 엄두도 못 낼 정도로 높은 변환 비용과 기능 강화가 사용자에게 강제되었다고 언급하였다.","{'word': 'DPMA', 'start': 2034, 'end': 2037, 'type': 'ORG'}","{'word': '표준', 'start': 2088, 'end': 2089, 'type': 'COM'}",no_relation,no_relation,no_relation
232,같은 해에 미국 국립표준국의 연구에 따르면 제안된 표준은 문제점이 거의 없을 것으로 결론을 내렸다.,"{'word': '미국 국립표준국', 'start': 2431, 'end': 2438, 'type': 'ORG'}","{'word': '표준', 'start': 2453, 'end': 2454, 'type': 'COM'}",no_relation,no_relation,no_relation
233,메모리가 늘어나면서 속도가 급격하게 빨라졌고 컴파일 비용이 다양해졌다.,"{'word': '메모리', 'start': 287, 'end': 289, 'type': 'COM'}","{'word': '컴파일', 'start': 312, 'end': 314, 'type': 'COM'}",no_relation,no_relation,no_relation
234,1962년 말에 IBM은 코볼이 그들의 주 개발 언어가 되고 COMTRAN의 개발은 중단할 것이라 선언하였다.,"{'word': 'COMTRAN', 'start': 390, 'end': 396, 'type': 'COM'}","{'word': '코볼', 'start': 370, 'end': 371, 'type': 'COM'}",no_relation,no_relation,no_relation
235,"NOTE 문, EXAMINE 문(INSPECT 문으로 대체), 구현자 정의 랜덤 액세스 모듈(새로운 순차 및 상대 입출력 모듈로 대체)과 같은 기능들이 제거되었다.","{'word': '구현자 정의 랜덤 액세스 모듈', 'start': 1523, 'end': 1538, 'type': 'COM'}","{'word': 'EXAMINE 문', 'start': 1496, 'end': 1504, 'type': 'COM'}",no_relation,com:similar_technology,no_relation
236,보고서 작성 기능은 혹평을 받아 코볼에서 물러났지만 표준이 출판되기 전에 복귀되었다.,"{'word': '보고서 작성 기능', 'start': 1632, 'end': 1640, 'type': 'COM'}","{'word': '코볼', 'start': 1650, 'end': 1651, 'type': 'COM'}",no_relation,com:sub_concept,no_relation
237,제안된 표준(일반적으로 코볼-80으로 알려져 있음)은 이전 것과는 상당히 달랐으므로 비호환성 및 변환 비용에 대한 걱정을 야기하였다.,"{'word': '변환 비용', 'start': 1798, 'end': 1802, 'type': 'COM'}","{'word': '비호환성', 'start': 1791, 'end': 1794, 'type': 'COM'}",no_relation,com:similar_technology,no_relation
238,그 밖의 응답들은 코볼-80이 그들의 시스템에 설치할 수 있는지의 상세한 영향도 분석에 대한 것이었다.,"{'word': '시스템', 'start': 2245, 'end': 2247, 'type': 'COM'}","{'word': '코볼-80', 'start': 2234, 'end': 2238, 'type': 'COM'}",no_relation,no_relation,no_relation
239,새로운 EVALUTE 문과 인라인 PERFORM이 단순해진 제어 흐름와 디버깅 덕분에 특히 잘 받아들여져 생산성이 향상되었다.,"{'word': '인라인 PERFORM', 'start': 2567, 'end': 2577, 'type': 'COM'}","{'word': 'EVALUTE 문', 'start': 2556, 'end': 2564, 'type': 'COM'}",no_relation,com:similar_technology,no_relation
240,새로운 EVALUTE 문과 인라인 PERFORM이 단순해진 제어 흐름와 디버깅 덕분에 특히 잘 받아들여져 생산성이 향상되었다.,"{'word': '디버깅', 'start': 2592, 'end': 2594, 'type': 'COM'}","{'word': '제어 흐름', 'start': 2585, 'end': 2589, 'type': 'COM'}",no_relation,com:similar_technology,no_relation
241,1990년대 초에 완전한 리비전의 차기 코볼에 객체 지향을 추가하는 작업이 시작되었다.,"{'word': '코볼', 'start': 2893, 'end': 2894, 'type': 'COM'}","{'word': '객체 지향', 'start': 2897, 'end': 2901, 'type': 'COM'}",no_relation,com:sub_concept,no_relation
242,마이크로 포커스는 그 이유를 새로운 기능에 대한 사용자 수요가 적고 컴파일러 적합성을 테스트하는데 쓰였던 미국 국립표준기술연구소(NIST) 테스트 제품군이 철폐되었기 때문으로 보았다.,"{'word': '테스트 제품군', 'start': 3624, 'end': 3630, 'type': 'COM'}","{'word': '컴파일러', 'start': 3584, 'end': 3587, 'type': 'COM'}",no_relation,no_relation,no_relation
243,"20세기 말 무렵, 2000년 문제(Y2K) 해결을 위해 코볼 프로그래밍 노력이 상당 부분 집중되었으며 가끔은 10년 전에 시스템을 개발했던 동일 프로그래머들에 의해 수행되었다.","{'word': '프로그래머', 'start': 3958, 'end': 3962, 'type': 'COM'}","{'word': '코볼 프로그래밍', 'start': 3908, 'end': 3915, 'type': 'COM'}",no_relation,no_relation,no_relation
244,"코볼 코드를 고치는데 필요한 일정 수준의 노력이 상당량의 비즈니스 지향 코볼에 전가되었는데, 사무 응용 프로그램들이 날짜를 사용하는 정도가 심했기 때문이다.","{'word': '코볼 코드', 'start': 3976, 'end': 3980, 'type': 'COM'}","{'word': '프로그램', 'start': 4034, 'end': 4037, 'type': 'COM'}",no_relation,no_relation,no_relation
245,일부 기업체는 그들의 코볼 프로그램들을 유지보수하면서도 그들의 시스템을 값비싼 메인프레임에서 더 값싼 더 현대적인 시스템으로 이관해오고 있다.,"{'word': '코볼 프로그램', 'start': 4271, 'end': 4277, 'type': 'COM'}","{'word': '메인프레임', 'start': 4303, 'end': 4307, 'type': 'COM'}",no_relation,no_relation,no_relation
246,"1974년 ANSI는 (ANS) 코볼의 개정판을 출판하였으며, 여기에는 파일 조직, DELETE 문, 세그먼트 모듈과 같은 새로운 기능들이 포함되었다.","{'word': 'ANSI', 'start': 1409, 'end': 1412, 'type': 'ORG'}","{'word': 'ANS', 'start': 1416, 'end': 1418, 'type': 'POH'}",org:production,no_relation,org:production
247,ANSI는 1968년 8월 《USA Standard COBOL X3.23》을 만듦으로써 차기 버전들의 주춧돌이 되었다.,"{'word': 'ANSI', 'start': 742, 'end': 745, 'type': 'ORG'}","{'word': 'USA Standard COBOL X3.23', 'start': 758, 'end': 781, 'type': 'COM'}",org:production,org:production,org:production
248,"CODASYL이 ANSI 위원회와 독립적이었으나, ANSI는 《CODASYL Journal of Development》를 사용하여 구현을 보증하는데 충분히 대중적인 기능들을 식별하게 하였다.","{'word': 'ANSI', 'start': 1124, 'end': 1127, 'type': 'ORG'}","{'word': 'CODASYL Journal of Development', 'start': 1131, 'end': 1160, 'type': 'COM'}",org:production,org:production,org:production
249,1985년 말에 ANSI는 개정된 표준을 출판하였다.,"{'word': 'ANSI', 'start': 2632, 'end': 2635, 'type': 'ORG'}","{'word': '개정된 표준', 'start': 2638, 'end': 2643, 'type': 'COM'}",org:production,org:production,org:production
250,"마이크로 포커스, 후지쯔, IBM을 포함한 일부 업체들은 완전한 리비전의 초안에 기반한 객체 지향 문법을 도입하였다.","{'word': '마이크로 포커스', 'start': 3033, 'end': 3040, 'type': 'ORG'}","{'word': '객체 지향 문법', 'start': 3082, 'end': 3089, 'type': 'COM'}",org:production,org:production,org:production
251,"마이크로 포커스, 후지쯔, IBM을 포함한 일부 업체들은 완전한 리비전의 초안에 기반한 객체 지향 문법을 도입하였다.","{'word': '후지쯔', 'start': 3043, 'end': 3045, 'type': 'ORG'}","{'word': '객체 지향 문법', 'start': 3082, 'end': 3089, 'type': 'COM'}",org:production,org:production,org:production
252,"마이크로 포커스, 후지쯔, IBM을 포함한 일부 업체들은 완전한 리비전의 초안에 기반한 객체 지향 문법을 도입하였다.","{'word': 'IBM', 'start': 3048, 'end': 3050, 'type': 'ORG'}","{'word': '객체 지향 문법', 'start': 3082, 'end': 3089, 'type': 'COM'}",org:production,org:production,org:production
253,"후지쯔/GT소프트웨어, 마이크로 포커스, 레인코드(RainCode)는 닷넷 프레임워크를 대상으로 한 객체 지향 코볼 컴파일러를 도입하였다.","{'word': '후지쯔/GT소프트웨어', 'start': 3138, 'end': 3148, 'type': 'ORG'}","{'word': '객체 지향 코볼 컴파일러', 'start': 3194, 'end': 3206, 'type': 'COM'}",org:production,org:production,org:production
254,"후지쯔/GT소프트웨어, 마이크로 포커스, 레인코드(RainCode)는 닷넷 프레임워크를 대상으로 한 객체 지향 코볼 컴파일러를 도입하였다.","{'word': '마이크로 포커스', 'start': 3151, 'end': 3158, 'type': 'ORG'}","{'word': '객체 지향 코볼 컴파일러', 'start': 3194, 'end': 3206, 'type': 'COM'}",org:production,org:production,org:production
255,"후지쯔/GT소프트웨어, 마이크로 포커스, 레인코드(RainCode)는 닷넷 프레임워크를 대상으로 한 객체 지향 코볼 컴파일러를 도입하였다.","{'word': '레인코드', 'start': 3161, 'end': 3164, 'type': 'ORG'}","{'word': '객체 지향 코볼 컴파일러', 'start': 3194, 'end': 3206, 'type': 'COM'}",org:production,org:production,org:production
256,"2006년과 2012년에 컴퓨터월드 조사에 따르면 조직 중 60%가 코볼을 (C++, 비주얼 베이직 닷넷보다 더) 사용하였으며 코볼은 자사 내부 소프트웨어 다수에 사용되었다.","{'word': 'C++', 'start': 4136, 'end': 4138, 'type': 'COM'}","{'word': '비주얼 베이직 닷넷', 'start': 4141, 'end': 4150, 'type': 'COM'}",com:similar_tech,com:similar_technology,com:similar_technology
257,41명의 사람들이 참석하였고 당시 의장은 필립스였다.,"{'word': '필립스', 'start': 118, 'end': 120, 'type': 'PER'}","{'word': '의장', 'start': 114, 'end': 115, 'type': 'POH'}",per:title,per:title,per:title
258,이 위원회의 위원장은 미국 국립표준국의 조지프 웨그스타인(Joseph Wegstein)이었다.,"{'word': '조지프 웨그스타인', 'start': 1130, 'end': 1138, 'type': 'PER'}","{'word': '위원장', 'start': 1115, 'end': 1117, 'type': 'POH'}",per:title,per:title,per:title
259,FLOW-MATIC의 발명가 그레이스 호퍼는 또한 그 위원회에 기술 고문 역할을 하였다.,"{'word': '그레이스 호퍼', 'start': 1393, 'end': 1399, 'type': 'PER'}","{'word': '기술 고문', 'start': 1412, 'end': 1416, 'type': 'POH'}",per:title,per:title,per:title
260,"한 사례로 COMTRAN 설명서의 저자이자 중기 위원회 구성원이었던 로이 골드핑거가 그의 언어를 지원하고 대수식 이용을 장려하기 위해 소위원회 회의에 참석했는데, 그 뒤 그레이스 호퍼는 단기 위원회에 메모를 보내면서 영어가 기반이 되는 언어를 만들겠다는 스페리 랜드의 노력을 재차 강조했다.","{'word': '로이 골드핑거', 'start': 1744, 'end': 1750, 'type': 'PER'}","{'word': '중기 위원회 구성원', 'start': 1730, 'end': 1739, 'type': 'POH'}",per:title,per:title,per:title
261,RCA 대표 하워드 브롬버그(Howard Bromberg) 또한 FACT를 차단함으로써 코볼 구현체에 대한 RCA의 노고가 물거품이 되지 않게 하였다.,"{'word': '하워드 브롬버그', 'start': 3198, 'end': 3205, 'type': 'PER'}","{'word': 'RCA 대표', 'start': 3191, 'end': 3196, 'type': 'POH'}",per:title,per:title,per:title
262,"한 사례로 COMTRAN 설명서의 저자이자 중기 위원회 구성원이었던 로이 골드핑거가 그의 언어를 지원하고 대수식 이용을 장려하기 위해 소위원회 회의에 참석했는데, 그 뒤 그레이스 호퍼는 단기 위원회에 메모를 보내면서 영어가 기반이 되는 언어를 만들겠다는 스페리 랜드의 노력을 재차 강조했다.","{'word': '그레이스 호퍼', 'start': 1801, 'end': 1807, 'type': 'PER'}","{'word': '스페리 랜드', 'start': 1848, 'end': 1853, 'type': 'PER'}",no_relation,no_relation,no_relation
263,"조지프 웨그스타인은 ""여기에 러프 스팟(rough spot)이 포함되어 있고 일부 추가가 필요하다""고 언급했고 나중에 밥 베머는 이들을 잡동사니로 기술하였다.","{'word': '조지프 웨그스타인', 'start': 2574, 'end': 2582, 'type': 'PER'}","{'word': '밥 베머', 'start': 2640, 'end': 2643, 'type': 'PER'}",no_relation,no_relation,no_relation
264,실망감을 느낀 하워드 브롬버그는 COBOL이라 새겨진 $15의 묘비를 구매하고 찰스 필립스에게 보내 그의 불만을 드러냈다.,"{'word': '하워드 브롬버그', 'start': 3319, 'end': 3326, 'type': 'PER'}","{'word': '찰스 필립스', 'start': 3355, 'end': 3360, 'type': 'PER'}",no_relation,no_relation,no_relation
265,"운영 위원회는 6월 4일 만나 협의회를 CODASYL(Committee on Data Systems Languages)라는 이름으로 정하고, 집행 위원회를 설립할 것을 동의하였다.","{'word': '운영 위원회', 'start': 762, 'end': 767, 'type': 'ORG'}","{'word': 'CODASYL', 'start': 784, 'end': 790, 'type': 'ORG'}",no_relation,no_relation,no_relation
266,"단기 위원회는 여섯 곳의 컴퓨터 제조업체와 세 군데의 정부 기관으로 이루어져 있었다. 여섯 곳의 제조업체들은 버로스(Burroughs), IBM, 미니애폴리스-하니웰 (하니웰 연구소), RCA, 스페리 랜드(Sperry Rand), 실베이니아 일렉트릭 프로덕츠였다.","{'word': '단기 위원회', 'start': 863, 'end': 868, 'type': 'ORG'}","{'word': '버로스', 'start': 924, 'end': 926, 'type': 'ORG'}",no_relation,no_relation,no_relation
267,"단기 위원회는 여섯 곳의 컴퓨터 제조업체와 세 군데의 정부 기관으로 이루어져 있었다. 여섯 곳의 제조업체들은 버로스(Burroughs), IBM, 미니애폴리스-하니웰 (하니웰 연구소), RCA, 스페리 랜드(Sperry Rand), 실베이니아 일렉트릭 프로덕츠였다.","{'word': '단기 위원회', 'start': 863, 'end': 868, 'type': 'ORG'}","{'word': 'IBM', 'start': 940, 'end': 942, 'type': 'ORG'}",no_relation,no_relation,no_relation
268,"단기 위원회는 여섯 곳의 컴퓨터 제조업체와 세 군데의 정부 기관으로 이루어져 있었다. 여섯 곳의 제조업체들은 버로스(Burroughs), IBM, 미니애폴리스-하니웰 (하니웰 연구소), RCA, 스페리 랜드(Sperry Rand), 실베이니아 일렉트릭 프로덕츠였다.","{'word': '단기 위원회', 'start': 863, 'end': 868, 'type': 'ORG'}","{'word': '미니애폴리스-하니웰', 'start': 945, 'end': 954, 'type': 'ORG'}",no_relation,no_relation,no_relation
269,"세 군데의 정부 기관들은 미국 공군, 해군의 데이비드 테일러 모델 베이슨(David Taylor Model Basin), 국립표준국(현재의 미국 국립표준기술연구소)이었다.","{'word': '정부 기관', 'start': 1018, 'end': 1022, 'type': 'ORG'}","{'word': '미국 공군', 'start': 1026, 'end': 1030, 'type': 'ORG'}",no_relation,no_relation,no_relation
270,"세 군데의 정부 기관들은 미국 공군, 해군의 데이비드 테일러 모델 베이슨(David Taylor Model Basin), 국립표준국(현재의 미국 국립표준기술연구소)이었다.","{'word': '정부 기관', 'start': 1018, 'end': 1022, 'type': 'ORG'}","{'word': '해군의 데이비드 테일러 모델 베이슨', 'start': 1033, 'end': 1051, 'type': 'ORG'}",no_relation,no_relation,no_relation
271,"세 군데의 정부 기관들은 미국 공군, 해군의 데이비드 테일러 모델 베이슨(David Taylor Model Basin), 국립표준국(현재의 미국 국립표준기술연구소)이었다.","{'word': '정부 기관', 'start': 1018, 'end': 1022, 'type': 'ORG'}","{'word': '국립표준국', 'start': 1080, 'end': 1084, 'type': 'ORG'}",no_relation,no_relation,no_relation
272,"소위원회는 사양을 만드는 일로 대부분을 보냈고, 최종 사양을 생산하기 앞서 단기 위원회가 그들의 일을 검토하고 수정하는 일을 맡았다.","{'word': '단기 위원회', 'start': 3470, 'end': 3475, 'type': 'ORG'}","{'word': '소위원회', 'start': 3428, 'end': 3431, 'type': 'ORG'}",no_relation,no_relation,no_relation
273,CODASYL 집행 위원회는 사용자들과 업체들로부터의 질문에 답하고 사양을 확장하고 개선할 목적으로 나중에 코볼 유지보수 위원회를 창설하였다.,"{'word': 'CODASYL 집행 위원회', 'start': 3693, 'end': 3706, 'type': 'ORG'}","{'word': '코볼 유지보수 위원회', 'start': 3753, 'end': 3763, 'type': 'ORG'}",no_relation,no_relation,no_relation
274,"9월까지 다섯 곳 이상의 제조업체가 CODASYL (벤딕스, 컨트롤 데이터 코퍼레이션, 제너럴 일렉트릭(GE), 내셔널 캐시 레지스터, 필코)에 참여하였고 대표되는 모든 제조업체들이 코볼 컴파일러를 발표하였다.","{'word': 'CODASYL', 'start': 3833, 'end': 3839, 'type': 'ORG'}","{'word': '벤딕스', 'start': 3842, 'end': 3844, 'type': 'ORG'}",no_relation,no_relation,no_relation
275,"9월까지 다섯 곳 이상의 제조업체가 CODASYL (벤딕스, 컨트롤 데이터 코퍼레이션, 제너럴 일렉트릭(GE), 내셔널 캐시 레지스터, 필코)에 참여하였고 대표되는 모든 제조업체들이 코볼 컴파일러를 발표하였다.","{'word': 'CODASYL', 'start': 3833, 'end': 3839, 'type': 'ORG'}","{'word': '컨트롤 데이터 코퍼레이션', 'start': 3847, 'end': 3859, 'type': 'ORG'}",no_relation,no_relation,no_relation
276,"9월까지 다섯 곳 이상의 제조업체가 CODASYL (벤딕스, 컨트롤 데이터 코퍼레이션, 제너럴 일렉트릭(GE), 내셔널 캐시 레지스터, 필코)에 참여하였고 대표되는 모든 제조업체들이 코볼 컴파일러를 발표하였다.","{'word': 'CODASYL', 'start': 3833, 'end': 3839, 'type': 'ORG'}","{'word': '제너럴 일렉트릭(GE)', 'start': 3862, 'end': 3873, 'type': 'ORG'}",no_relation,no_relation,no_relation
277,"9월까지 다섯 곳 이상의 제조업체가 CODASYL (벤딕스, 컨트롤 데이터 코퍼레이션, 제너럴 일렉트릭(GE), 내셔널 캐시 레지스터, 필코)에 참여하였고 대표되는 모든 제조업체들이 코볼 컴파일러를 발표하였다.","{'word': 'CODASYL', 'start': 3833, 'end': 3839, 'type': 'ORG'}","{'word': '내셔널 캐시 레지스터', 'start': 3876, 'end': 3886, 'type': 'ORG'}",no_relation,no_relation,no_relation
278,"9월까지 다섯 곳 이상의 제조업체가 CODASYL (벤딕스, 컨트롤 데이터 코퍼레이션, 제너럴 일렉트릭(GE), 내셔널 캐시 레지스터, 필코)에 참여하였고 대표되는 모든 제조업체들이 코볼 컴파일러를 발표하였다.","{'word': 'CODASYL', 'start': 3833, 'end': 3839, 'type': 'ORG'}","{'word': '필코', 'start': 3889, 'end': 3890, 'type': 'ORG'}",no_relation,no_relation,no_relation
279,미국 국방부는 각기 다른 컴퓨터에서 동일한 데이터 처리 프로그램들을 실행할 수 있는지에 대해 걱정하였다.,"{'word': '컴퓨터', 'start': 139, 'end': 141, 'type': 'COM'}","{'word': '프로그램', 'start': 156, 'end': 159, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
280,당시 유일한 주류 언어였던 포트란은 이러한 프로그램들 작성에 필요한 기능들이 부족했다.,"{'word': '프로그램', 'start': 208, 'end': 211, 'type': 'COM'}","{'word': '포트란', 'start': 199, 'end': 201, 'type': 'COM'}",com:sub_concept,no_relation,com:sub_concept
281,"FLOW-MATIC이 코볼에 기여한 주된 사항으로는 긴 변수 이름, 명령어를 위한 영어 낱말, 데이터 기술 및 명령의 구분이다.","{'word': 'FLOW-MATIC', 'start': 1427, 'end': 1436, 'type': 'COM'}","{'word': '긴 변수 이름', 'start': 1456, 'end': 1462, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
282,"FLOW-MATIC이 코볼에 기여한 주된 사항으로는 긴 변수 이름, 명령어를 위한 영어 낱말, 데이터 기술 및 명령의 구분이다.","{'word': 'FLOW-MATIC', 'start': 1427, 'end': 1436, 'type': 'COM'}","{'word': '명령어를 위한 영어 낱말', 'start': 1465, 'end': 1477, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
283,"FLOW-MATIC이 코볼에 기여한 주된 사항으로는 긴 변수 이름, 명령어를 위한 영어 낱말, 데이터 기술 및 명령의 구분이다.","{'word': 'FLOW-MATIC', 'start': 1427, 'end': 1436, 'type': 'COM'}","{'word': '데이터 기술 및 명령의 구분', 'start': 1480, 'end': 1494, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
284,"코볼에 포함된 COMTRAN의 기능들은 공식들, PICTURE 절, GO TO의 필요성을 제거하는 개선된 codice_1 문, 더 강력한 파일 관리 시스템을 포함하였다.","{'word': 'COMTRAN', 'start': 1960, 'end': 1966, 'type': 'COM'}","{'word': '공식들', 'start': 1974, 'end': 1976, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
285,"코볼에 포함된 COMTRAN의 기능들은 공식들, PICTURE 절, GO TO의 필요성을 제거하는 개선된 codice_1 문, 더 강력한 파일 관리 시스템을 포함하였다.","{'word': 'COMTRAN', 'start': 1960, 'end': 1966, 'type': 'COM'}","{'word': 'PICTURE 절', 'start': 1979, 'end': 1987, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
286,"코볼에 포함된 COMTRAN의 기능들은 공식들, PICTURE 절, GO TO의 필요성을 제거하는 개선된 codice_1 문, 더 강력한 파일 관리 시스템을 포함하였다.","{'word': 'COMTRAN', 'start': 1960, 'end': 1966, 'type': 'COM'}","{'word': '파일 관리 시스템', 'start': 2029, 'end': 2037, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
287,"이러한 기능들에는 불 대수, 공식, 테이블 서브스크립트(subscripts, indices)가 포함되었다.","{'word': '서브스크립트', 'start': 2304, 'end': 2309, 'type': 'COM'}","{'word': 'subscripts', 'start': 2311, 'end': 2320, 'type': 'COM'}",com:alter_names,com:alternative_names,com:alternative_names
288,"이러한 기능들에는 불 대수, 공식, 테이블 서브스크립트(subscripts, indices)가 포함되었다.","{'word': '서브스크립트', 'start': 2304, 'end': 2309, 'type': 'COM'}","{'word': 'indices', 'start': 2323, 'end': 2329, 'type': 'COM'}",com:alter_names,com:similar_technology,com:alternative_names
289,"조지프 웨그스타인은 ""여기에 러프 스팟(rough spot)이 포함되어 있고 일부 추가가 필요하다""고 언급했고 나중에 밥 베머는 이들을 잡동사니로 기술하였다.","{'word': 'rough spot', 'start': 2596, 'end': 2605, 'type': 'COM'}","{'word': '러프 스팟', 'start': 2590, 'end': 2594, 'type': 'COM'}",com:alter_names,com:alternative_names,com:alternative_names
290,"제안된 이름으로는 ""BUSY"" (비즈니스 시스템: Business System), ""INFOSYL""(정보 시스템 언어: Information System Language), ""COCOSYL""(공용 컴퓨터 시스템 언어: Common Computer Systems Language)를 포함하였다 코볼(COBOL)이라는 이름은 밥 베머가 제안하였다.","{'word': 'BUSY', 'start': 2740, 'end': 2743, 'type': 'COM'}","{'word': '비즈니스 시스템', 'start': 2747, 'end': 2754, 'type': 'COM'}",com:alter_names,com:alternative_names,com:alternative_names
291,"제안된 이름으로는 ""BUSY"" (비즈니스 시스템: Business System), ""INFOSYL""(정보 시스템 언어: Information System Language), ""COCOSYL""(공용 컴퓨터 시스템 언어: Common Computer Systems Language)를 포함하였다 코볼(COBOL)이라는 이름은 밥 베머가 제안하였다.","{'word': 'BUSY', 'start': 2740, 'end': 2743, 'type': 'COM'}","{'word': 'Business System', 'start': 2757, 'end': 2771, 'type': 'COM'}",com:alter_names,com:alternative_names,com:alternative_names
292,"제안된 이름으로는 ""BUSY"" (비즈니스 시스템: Business System), ""INFOSYL""(정보 시스템 언어: Information System Language), ""COCOSYL""(공용 컴퓨터 시스템 언어: Common Computer Systems Language)를 포함하였다 코볼(COBOL)이라는 이름은 밥 베머가 제안하였다.","{'word': 'INFOSYL', 'start': 2776, 'end': 2782, 'type': 'COM'}","{'word': 'Information System Language', 'start': 2796, 'end': 2822, 'type': 'COM'}",com:alter_names,com:alternative_names,com:alternative_names
293,"제안된 이름으로는 ""BUSY"" (비즈니스 시스템: Business System), ""INFOSYL""(정보 시스템 언어: Information System Language), ""COCOSYL""(공용 컴퓨터 시스템 언어: Common Computer Systems Language)를 포함하였다 코볼(COBOL)이라는 이름은 밥 베머가 제안하였다.","{'word': 'INFOSYL', 'start': 2776, 'end': 2782, 'type': 'COM'}","{'word': '정보 시스템 언어', 'start': 2785, 'end': 2793, 'type': 'COM'}",com:alter_names,com:alternative_names,com:alternative_names
294,"제안된 이름으로는 ""BUSY"" (비즈니스 시스템: Business System), ""INFOSYL""(정보 시스템 언어: Information System Language), ""COCOSYL""(공용 컴퓨터 시스템 언어: Common Computer Systems Language)를 포함하였다 코볼(COBOL)이라는 이름은 밥 베머가 제안하였다.","{'word': 'COCOSYL', 'start': 2827, 'end': 2833, 'type': 'COM'}","{'word': 'Common Computer Systems Language', 'start': 2851, 'end': 2882, 'type': 'COM'}",com:alter_names,com:alternative_names,com:alternative_names
295,"제안된 이름으로는 ""BUSY"" (비즈니스 시스템: Business System), ""INFOSYL""(정보 시스템 언어: Information System Language), ""COCOSYL""(공용 컴퓨터 시스템 언어: Common Computer Systems Language)를 포함하였다 코볼(COBOL)이라는 이름은 밥 베머가 제안하였다.","{'word': 'COCOSYL', 'start': 2827, 'end': 2833, 'type': 'COM'}","{'word': '공용 컴퓨터 시스템 언어', 'start': 2836, 'end': 2848, 'type': 'COM'}",com:alter_names,com:alternative_names,com:alternative_names
296,"제안된 이름으로는 ""BUSY"" (비즈니스 시스템: Business System), ""INFOSYL""(정보 시스템 언어: Information System Language), ""COCOSYL""(공용 컴퓨터 시스템 언어: Common Computer Systems Language)를 포함하였다 코볼(COBOL)이라는 이름은 밥 베머가 제안하였다.","{'word': '코볼', 'start': 2892, 'end': 2893, 'type': 'COM'}","{'word': 'COBOL', 'start': 2895, 'end': 2899, 'type': 'COM'}",com:alter_names,com:alternative_names,com:alternative_names
297,"FLOW-MATIC이 코볼에 기여한 주된 사항으로는 긴 변수 이름, 명령어를 위한 영어 낱말, 데이터 기술 및 명령의 구분이다.","{'word': '코볼', 'start': 1439, 'end': 1440, 'type': 'COM'}","{'word': 'FLOW-MATIC', 'start': 1427, 'end': 1436, 'type': 'COM'}",com:prior_tech,com:prior_technology,com:sub_concept
298,1980년에 그레이스 호퍼는 코볼 60이 95% FLOW-MATIC으로 되어 있으며 COMTRAN은 매우 적은 부분에서 영향을 주었다고 언급하였다.,"{'word': '코볼 60', 'start': 1885, 'end': 1889, 'type': 'COM'}","{'word': 'FLOW-MATIC', 'start': 1896, 'end': 1905, 'type': 'COM'}",com:prior_tech,com:made_of,com:sub_concept
299,"문맥에 의존적인 키워드들은 거부되었지만 이러한 접근은 나중에 PL/I에 사용되었고, 부분적으로는 2002년부터 코볼에 사용되었다.","{'word': '코볼', 'start': 2442, 'end': 2443, 'type': 'COM'}","{'word': '문맥에 의존적인 키워드', 'start': 2380, 'end': 2391, 'type': 'COM'}",com:prior_tech,com:sub_concept,com:sub_concept
300,"증명할만한 구현체 또한 부족하였으므로, FLOW-MATIC 기반 코볼의 지지자들이 이 결의안을 뒤집을 수 있었다.","{'word': '코볼', 'start': 3163, 'end': 3164, 'type': 'COM'}","{'word': 'FLOW-MATIC', 'start': 3149, 'end': 3158, 'type': 'COM'}",com:prior_tech,com:prior_technology,com:sub_concept
301,"취리히 알골 58 회의가 있은지 정확히 한 해 뒤인 1959년 5월 28, 29일에 펜타곤에서 회의가 열렸고 사무를 위한 공용 프로그래밍 언어를 만드는 것을 논의하였다.","{'word': '취리히 알골 58 회의', 'start': 0, 'end': 11, 'type': 'ORG'}","{'word': '펜타곤', 'start': 47, 'end': 49, 'type': 'ORG'}",no_relation,no_relation,no_relation
302,이 모임을 통해 운영 위원회와 중장기 위원회들이 설립되었다.,"{'word': '중장기 위원회', 'start': 477, 'end': 483, 'type': 'ORG'}","{'word': '운영 위원회', 'start': 469, 'end': 474, 'type': 'ORG'}",no_relation,no_relation,no_relation
303,RCA 대표 하워드 브롬버그(Howard Bromberg) 또한 FACT를 차단함으로써 코볼 구현체에 대한 RCA의 노고가 물거품이 되지 않게 하였다.,"{'word': 'RCA', 'start': 3251, 'end': 3253, 'type': 'ORG'}","{'word': 'FACT', 'start': 3227, 'end': 3230, 'type': 'COM'}",no_relation,no_relation,no_relation
304,최초의 코볼 프로그램은 8월 17일 RCA 501에서 수행되었다.,"{'word': 'RCA', 'start': 4136, 'end': 4138, 'type': 'ORG'}","{'word': '코볼', 'start': 4120, 'end': 4121, 'type': 'COM'}",no_relation,no_relation,no_relation
305,"12월 6일, 7일에 동일한 코볼 프로그램(사소한 변경사항이 있긴 하지만)이 RCA 컴퓨터, Remington-Rand 유니박 컴퓨터에서 실행되어 이들의 호환성을 입증하였다.","{'word': 'RCA 컴퓨터', 'start': 4196, 'end': 4202, 'type': 'ORG'}","{'word': '코볼 프로그램', 'start': 4169, 'end': 4175, 'type': 'COM'}",no_relation,no_relation,no_relation
306,"12월 6일, 7일에 동일한 코볼 프로그램(사소한 변경사항이 있긴 하지만)이 RCA 컴퓨터, Remington-Rand 유니박 컴퓨터에서 실행되어 이들의 호환성을 입증하였다.","{'word': 'Remington-Rand 유니박 컴퓨터', 'start': 4205, 'end': 4226, 'type': 'ORG'}","{'word': '코볼 프로그램', 'start': 4169, 'end': 4175, 'type': 'COM'}",no_relation,no_relation,no_relation
307,더 많은 사람들이 프로그래밍할 수 있어야 하고 새로운 언어는 동시대 기술의 제약을 받아서는 안 된다는 데 대하여 대표자 전원이 동의하였다.,"{'word': '프로그래밍', 'start': 314, 'end': 318, 'type': 'COM'}","{'word': '기술', 'start': 342, 'end': 343, 'type': 'COM'}",no_relation,no_relation,no_relation
308,"데이터 설명, 문(文), 기존의 응용 프로그램, 사용자 경험을 조사하면서 작업이 개시되었다.","{'word': '데이터', 'start': 1161, 'end': 1163, 'type': 'COM'}","{'word': '응용 프로그램', 'start': 1179, 'end': 1185, 'type': 'COM'}",no_relation,no_relation,no_relation
309,FLOW-MATIC의 발명가 그레이스 호퍼는 또한 그 위원회에 기술 고문 역할을 하였다.,"{'word': '그레이스 호퍼', 'start': 1393, 'end': 1399, 'type': 'PER'}","{'word': 'FLOW-MATIC', 'start': 1377, 'end': 1386, 'type': 'COM'}",per:production,per:production,per:production
310,밥 베머가 발명한 IBM의 COMTRAN 언어는 그레이스 호퍼의 동료들이 만든 단기 위원회에 의해 FLOW-MATIC의 경쟁 언어로 간주되었다.,"{'word': '밥 베머', 'start': 1499, 'end': 1502, 'type': 'PER'}","{'word': 'COMTRAN', 'start': 1514, 'end': 1520, 'type': 'COM'}",per:production,per:production,per:production
311,"한 사례로 COMTRAN 설명서의 저자이자 중기 위원회 구성원이었던 로이 골드핑거가 그의 언어를 지원하고 대수식 이용을 장려하기 위해 소위원회 회의에 참석했는데, 그 뒤 그레이스 호퍼는 단기 위원회에 메모를 보내면서 영어가 기반이 되는 언어를 만들겠다는 스페리 랜드의 노력을 재차 강조했다.","{'word': '로이 골드핑거', 'start': 1744, 'end': 1750, 'type': 'PER'}","{'word': 'COMTRAN 설명서', 'start': 1712, 'end': 1722, 'type': 'COM'}",per:production,per:production,per:production
312,"제안된 이름으로는 ""BUSY"" (비즈니스 시스템: Business System), ""INFOSYL""(정보 시스템 언어: Information System Language), ""COCOSYL""(공용 컴퓨터 시스템 언어: Common Computer Systems Language)를 포함하였다 코볼(COBOL)이라는 이름은 밥 베머가 제안하였다.","{'word': '밥 베머', 'start': 2909, 'end': 2912, 'type': 'PER'}","{'word': 'COBOL', 'start': 2895, 'end': 2899, 'type': 'COM'}",per:production,per:production,per:production
313,10월에 중기 위원회는 로이 넛이 만든 FACT 언어 사양의 사본을 받았다.,"{'word': '로이 넛', 'start': 2935, 'end': 2938, 'type': 'PER'}","{'word': 'FACT 언어', 'start': 2944, 'end': 2950, 'type': 'COM'}",per:production,per:production,per:production
314,밥 베머가 발명한 IBM의 COMTRAN 언어는 그레이스 호퍼의 동료들이 만든 단기 위원회에 의해 FLOW-MATIC의 경쟁 언어로 간주되었다.,"{'word': 'IBM', 'start': 1509, 'end': 1511, 'type': 'ORG'}","{'word': 'COMTRAN', 'start': 1514, 'end': 1520, 'type': 'COM'}",org:production,org:production,org:production
315,"1960년 1월 3일 집행 위원회는 이 사양을 승인하였고 정부 인쇄소에 전달되어 ""COBOL 60""으로 인쇄되었다.","{'word': '집행 위원회', 'start': 3515, 'end': 3520, 'type': 'ORG'}","{'word': 'COBOL 60', 'start': 3549, 'end': 3556, 'type': 'COM'}",org:production,no_relation,org:production
316,"9월까지 다섯 곳 이상의 제조업체가 CODASYL (벤딕스, 컨트롤 데이터 코퍼레이션, 제너럴 일렉트릭(GE), 내셔널 캐시 레지스터, 필코)에 참여하였고 대표되는 모든 제조업체들이 코볼 컴파일러를 발표하였다.","{'word': '벤딕스', 'start': 3842, 'end': 3844, 'type': 'ORG'}","{'word': '코볼 컴파일러', 'start': 3915, 'end': 3921, 'type': 'COM'}",org:production,org:production,org:production
317,"9월까지 다섯 곳 이상의 제조업체가 CODASYL (벤딕스, 컨트롤 데이터 코퍼레이션, 제너럴 일렉트릭(GE), 내셔널 캐시 레지스터, 필코)에 참여하였고 대표되는 모든 제조업체들이 코볼 컴파일러를 발표하였다.","{'word': '컨트롤 데이터 코퍼레이션', 'start': 3847, 'end': 3859, 'type': 'ORG'}","{'word': '코볼 컴파일러', 'start': 3915, 'end': 3921, 'type': 'COM'}",org:production,org:production,org:production
318,"9월까지 다섯 곳 이상의 제조업체가 CODASYL (벤딕스, 컨트롤 데이터 코퍼레이션, 제너럴 일렉트릭(GE), 내셔널 캐시 레지스터, 필코)에 참여하였고 대표되는 모든 제조업체들이 코볼 컴파일러를 발표하였다.","{'word': '제너럴 일렉트릭(GE)', 'start': 3862, 'end': 3873, 'type': 'ORG'}","{'word': '코볼 컴파일러', 'start': 3915, 'end': 3921, 'type': 'COM'}",org:production,org:production,org:production
319,"9월까지 다섯 곳 이상의 제조업체가 CODASYL (벤딕스, 컨트롤 데이터 코퍼레이션, 제너럴 일렉트릭(GE), 내셔널 캐시 레지스터, 필코)에 참여하였고 대표되는 모든 제조업체들이 코볼 컴파일러를 발표하였다.","{'word': '내셔널 캐시 레지스터', 'start': 3876, 'end': 3886, 'type': 'ORG'}","{'word': '코볼 컴파일러', 'start': 3915, 'end': 3921, 'type': 'COM'}",org:production,org:production,org:production
320,"9월까지 다섯 곳 이상의 제조업체가 CODASYL (벤딕스, 컨트롤 데이터 코퍼레이션, 제너럴 일렉트릭(GE), 내셔널 캐시 레지스터, 필코)에 참여하였고 대표되는 모든 제조업체들이 코볼 컴파일러를 발표하였다.","{'word': '필코', 'start': 3889, 'end': 3890, 'type': 'ORG'}","{'word': '코볼 컴파일러', 'start': 3915, 'end': 3921, 'type': 'COM'}",org:production,org:production,org:production
321,GE와 IBM은 코볼을 자신들의 언어들인 GECOM과 COMTRAN에 각각 통합하였다.,"{'word': 'GE', 'start': 3931, 'end': 3932, 'type': 'ORG'}","{'word': 'GECOM', 'start': 3954, 'end': 3958, 'type': 'COM'}",org:production,org:production,org:production
322,GE와 IBM은 코볼을 자신들의 언어들인 GECOM과 COMTRAN에 각각 통합하였다.,"{'word': 'IBM', 'start': 3935, 'end': 3937, 'type': 'ORG'}","{'word': 'COMTRAN', 'start': 3961, 'end': 3967, 'type': 'COM'}",org:production,org:production,org:production
323,"반면, 인터내셔널 컴퓨터스 앤드 태뷸레이터스(International Computers and Tabulators)는 그들의 언어인 CODEL을 코볼로 대체할 예정이었다.","{'word': '인터내셔널 컴퓨터스 앤드 태뷸레이터스', 'start': 3984, 'end': 4003, 'type': 'ORG'}","{'word': 'CODEL', 'start': 4054, 'end': 4058, 'type': 'COM'}",org:production,org:production,org:production
324,그 와중에 RCA와 스페리 랜드는 코볼 컴파일러를 만드는 일을 하였다.,"{'word': 'RCA', 'start': 4082, 'end': 4084, 'type': 'ORG'}","{'word': '코볼 컴파일러', 'start': 4095, 'end': 4101, 'type': 'COM'}",org:production,org:production,org:production
325,그 와중에 RCA와 스페리 랜드는 코볼 컴파일러를 만드는 일을 하였다.,"{'word': '스페리 랜드', 'start': 4087, 'end': 4092, 'type': 'ORG'}","{'word': '코볼 컴파일러', 'start': 4095, 'end': 4101, 'type': 'COM'}",org:production,org:production,org:production
326,"이 위원회는 주로 FLOW-MATIC, AIMACO, COMTRAN이라는 프로그래밍 언어들을 조사하였다.","{'word': 'COMTRAN', 'start': 1243, 'end': 1249, 'type': 'COM'}","{'word': 'AIMACO', 'start': 1235, 'end': 1240, 'type': 'COM'}",com:similar_tech,com:similar_technology,com:similar_technology
327,"이 위원회는 주로 FLOW-MATIC, AIMACO, COMTRAN이라는 프로그래밍 언어들을 조사하였다.","{'word': 'FLOW-MATIC', 'start': 1223, 'end': 1232, 'type': 'COM'}","{'word': 'AIMACO', 'start': 1235, 'end': 1240, 'type': 'COM'}",com:similar_tech,com:similar_technology,com:similar_technology
328,"이 위원회는 주로 FLOW-MATIC, AIMACO, COMTRAN이라는 프로그래밍 언어들을 조사하였다.","{'word': 'COMTRAN', 'start': 1243, 'end': 1249, 'type': 'COM'}","{'word': 'FLOW-MATIC', 'start': 1223, 'end': 1232, 'type': 'COM'}",com:similar_tech,com:similar_technology,com:similar_technology
329,FLOW-MATIC 언어는 특히 영향력이 있었는데 그 까닭은 그것이 내부에 구현되었기 때문이기도 하지만 그 밖의 이유로는 AMIACO가 단지 사소한 변경만으로 그것을 파생시켰기 때문이다.,"{'word': 'AMIACO', 'start': 1340, 'end': 1345, 'type': 'COM'}","{'word': 'FLOW-MATIC', 'start': 1272, 'end': 1281, 'type': 'COM'}",com:similar_tech,com:similar_technology,no_relation
330,밥 베머가 발명한 IBM의 COMTRAN 언어는 그레이스 호퍼의 동료들이 만든 단기 위원회에 의해 FLOW-MATIC의 경쟁 언어로 간주되었다.,"{'word': 'COMTRAN', 'start': 1514, 'end': 1520, 'type': 'COM'}","{'word': 'FLOW-MATIC', 'start': 1554, 'end': 1563, 'type': 'COM'}",com:similar_tech,com:similar_technology,com:similar_technology
331,IDENTIFICATION DIVISION은 다음의 코드 개체를 식별하고 클래스나 인터페이스의 정의를 포함한다.,"{'word': 'IDENTIFICATION DIVISION', 'start': 25, 'end': 47, 'type': 'COM'}","{'word': '코드 개체', 'start': 54, 'end': 58, 'type': 'COM'}",com:sub_concept,no_relation,com:sub_concept
332,IDENTIFICATION DIVISION은 다음의 코드 개체를 식별하고 클래스나 인터페이스의 정의를 포함한다.,"{'word': 'IDENTIFICATION DIVISION', 'start': 25, 'end': 47, 'type': 'COM'}","{'word': '클래스', 'start': 66, 'end': 68, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
333,IDENTIFICATION DIVISION은 다음의 코드 개체를 식별하고 클래스나 인터페이스의 정의를 포함한다.,"{'word': 'IDENTIFICATION DIVISION', 'start': 25, 'end': 47, 'type': 'COM'}","{'word': '인터페이스의 정의', 'start': 71, 'end': 79, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
334,클래스와 인터페이스라는 개념은 2002년 이후로 코볼에 포함되고 있다.,"{'word': '코볼', 'start': 115, 'end': 116, 'type': 'COM'}","{'word': '인터페이스', 'start': 93, 'end': 97, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
335,클래스와 인터페이스라는 개념은 2002년 이후로 코볼에 포함되고 있다.,"{'word': '코볼', 'start': 115, 'end': 116, 'type': 'COM'}","{'word': '클래스', 'start': 88, 'end': 90, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
336,"클래스에는 클래스 메소드와 변수, 인스턴스 오브젝트를 포함하는 팩토리 오브젝트(factory object)와 인스턴스 메소드와 변수를 포함하는 인스턴스 오브젝트(instance object)들을 갖고 있다.","{'word': '클래스', 'start': 128, 'end': 130, 'type': 'COM'}","{'word': '클래스 메소드', 'start': 134, 'end': 140, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
337,"클래스에는 클래스 메소드와 변수, 인스턴스 오브젝트를 포함하는 팩토리 오브젝트(factory object)와 인스턴스 메소드와 변수를 포함하는 인스턴스 오브젝트(instance object)들을 갖고 있다.","{'word': '클래스', 'start': 128, 'end': 130, 'type': 'COM'}","{'word': '변수', 'start': 143, 'end': 144, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
338,"클래스에는 클래스 메소드와 변수, 인스턴스 오브젝트를 포함하는 팩토리 오브젝트(factory object)와 인스턴스 메소드와 변수를 포함하는 인스턴스 오브젝트(instance object)들을 갖고 있다.","{'word': '클래스', 'start': 128, 'end': 130, 'type': 'COM'}","{'word': '인스턴스 오브젝트', 'start': 147, 'end': 155, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
339,"클래스에는 클래스 메소드와 변수, 인스턴스 오브젝트를 포함하는 팩토리 오브젝트(factory object)와 인스턴스 메소드와 변수를 포함하는 인스턴스 오브젝트(instance object)들을 갖고 있다.","{'word': '팩토리 오브젝트', 'start': 163, 'end': 170, 'type': 'COM'}","{'word': '클래스 메소드', 'start': 134, 'end': 140, 'type': 'COM'}",com:sub_concept,com:similar_technology,com:sub_concept
340,"클래스에는 클래스 메소드와 변수, 인스턴스 오브젝트를 포함하는 팩토리 오브젝트(factory object)와 인스턴스 메소드와 변수를 포함하는 인스턴스 오브젝트(instance object)들을 갖고 있다.","{'word': '팩토리 오브젝트', 'start': 163, 'end': 170, 'type': 'COM'}","{'word': '인스턴스 오브젝트', 'start': 147, 'end': 155, 'type': 'COM'}",com:sub_concept,com:similar_technology,com:sub_concept
341,"클래스에는 클래스 메소드와 변수, 인스턴스 오브젝트를 포함하는 팩토리 오브젝트(factory object)와 인스턴스 메소드와 변수를 포함하는 인스턴스 오브젝트(instance object)들을 갖고 있다.","{'word': '팩토리 오브젝트', 'start': 163, 'end': 170, 'type': 'COM'}","{'word': '변수', 'start': 143, 'end': 144, 'type': 'COM'}",com:sub_concept,com:similar_technology,com:sub_concept
342,"클래스에는 클래스 메소드와 변수, 인스턴스 오브젝트를 포함하는 팩토리 오브젝트(factory object)와 인스턴스 메소드와 변수를 포함하는 인스턴스 오브젝트(instance object)들을 갖고 있다.","{'word': '클래스', 'start': 128, 'end': 130, 'type': 'COM'}","{'word': '팩토리 오브젝트', 'start': 163, 'end': 170, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
343,"클래스에는 클래스 메소드와 변수, 인스턴스 오브젝트를 포함하는 팩토리 오브젝트(factory object)와 인스턴스 메소드와 변수를 포함하는 인스턴스 오브젝트(instance object)들을 갖고 있다.","{'word': '인스턴스 오브젝트', 'start': 208, 'end': 216, 'type': 'COM'}","{'word': '인스턴스 메소드', 'start': 189, 'end': 196, 'type': 'COM'}",com:sub_concept,com:similar_technology,com:sub_concept
344,"클래스에는 클래스 메소드와 변수, 인스턴스 오브젝트를 포함하는 팩토리 오브젝트(factory object)와 인스턴스 메소드와 변수를 포함하는 인스턴스 오브젝트(instance object)들을 갖고 있다.","{'word': '클래스', 'start': 128, 'end': 130, 'type': 'COM'}","{'word': '인스턴스 메소드', 'start': 189, 'end': 196, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
345,"클래스에는 클래스 메소드와 변수, 인스턴스 오브젝트를 포함하는 팩토리 오브젝트(factory object)와 인스턴스 메소드와 변수를 포함하는 인스턴스 오브젝트(instance object)들을 갖고 있다.","{'word': '인스턴스 오브젝트', 'start': 208, 'end': 216, 'type': 'COM'}","{'word': '변수', 'start': 199, 'end': 200, 'type': 'COM'}",com:sub_concept,com:similar_technology,com:sub_concept
346,"클래스에는 클래스 메소드와 변수, 인스턴스 오브젝트를 포함하는 팩토리 오브젝트(factory object)와 인스턴스 메소드와 변수를 포함하는 인스턴스 오브젝트(instance object)들을 갖고 있다.","{'word': '클래스', 'start': 128, 'end': 130, 'type': 'COM'}","{'word': '변수', 'start': 199, 'end': 200, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
347,"클래스에는 클래스 메소드와 변수, 인스턴스 오브젝트를 포함하는 팩토리 오브젝트(factory object)와 인스턴스 메소드와 변수를 포함하는 인스턴스 오브젝트(instance object)들을 갖고 있다.","{'word': '클래스', 'start': 128, 'end': 130, 'type': 'COM'}","{'word': '인스턴스 오브젝트', 'start': 208, 'end': 216, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
348,"제네릭 프로그래밍 지원은 매개변수 방식의 클래스들을 통해 제공되며, 클래스나 인터페이스를 사용하여 예를 들 수 있다.","{'word': '제네릭 프로그래밍 지원', 'start': 267, 'end': 278, 'type': 'COM'}","{'word': '클래스', 'start': 305, 'end': 307, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
349,"제네릭 프로그래밍 지원은 매개변수 방식의 클래스들을 통해 제공되며, 클래스나 인터페이스를 사용하여 예를 들 수 있다.","{'word': '제네릭 프로그래밍 지원', 'start': 267, 'end': 278, 'type': 'COM'}","{'word': '인터페이스', 'start': 310, 'end': 314, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
350,"제네릭 프로그래밍 지원은 매개변수 방식의 클래스들을 통해 제공되며, 클래스나 인터페이스를 사용하여 예를 들 수 있다.","{'word': '제네릭 프로그래밍 지원', 'start': 267, 'end': 278, 'type': 'COM'}","{'word': '매개변수 방식의 클래스', 'start': 281, 'end': 292, 'type': 'COM'}",com:sub_concept,com:made_of,com:sub_concept
351,"오브젝트들은 특정한 종류에 제한을 두기 위해 참조용으로 저장된다. 이른바 두 종류의 메소드가 있다.: 문 (과 매우 비슷하게 동작), 인라인 메소드 호출(함수를 사용하는 것과 비슷).","{'word': '오브젝트', 'start': 333, 'end': 336, 'type': 'COM'}","{'word': '인라인 메소드 호출', 'start': 408, 'end': 417, 'type': 'COM'}",com:sub_concept,no_relation,com:sub_concept
352,"이른바 두 종류의 메소드가 있다.: 문 (과 매우 비슷하게 동작), 인라인 메소드 호출(함수를 사용하는 것과 비슷).","{'word': '메소드', 'start': 380, 'end': 382, 'type': 'COM'}","{'word': '인라인 메소드 호출', 'start': 408, 'end': 417, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
353,"코볼은 메소드를 숨기는 방식은 제공하지 않는다. 클래스 데이터는 숨길 수 있지만, 사용자가 그것에 접근하지 못하도록 절 없이 선언한 경우에야 가능. 메소드 오버로드는 코볼 2014에 추가되었다.","{'word': '코볼', 'start': 517, 'end': 518, 'type': 'COM'}","{'word': '클래스 데이터', 'start': 544, 'end': 550, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
354,"클래스 데이터는 숨길 수 있지만, 사용자가 그것에 접근하지 못하도록 절 없이 선언한 경우에야 가능. 메소드 오버로드는 코볼 2014에 추가되었다.","{'word': '코볼 2014', 'start': 610, 'end': 616, 'type': 'COM'}","{'word': '메소드 오버로드', 'start': 600, 'end': 607, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
355,ENVIRONMENT DIVISION에는 CONFIGURATION SECTION과 INPUT-OUTPUT SECTION을 포함한다.,"{'word': 'ENVIRONMENT DIVISION', 'start': 648, 'end': 667, 'type': 'COM'}","{'word': 'CONFIGURATION SECTION', 'start': 671, 'end': 691, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
356,ENVIRONMENT DIVISION에는 CONFIGURATION SECTION과 INPUT-OUTPUT SECTION을 포함한다.,"{'word': 'ENVIRONMENT DIVISION', 'start': 648, 'end': 667, 'type': 'COM'}","{'word': 'INPUT-OUTPUT SECTION', 'start': 694, 'end': 713, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
357,"CONFIGURATION SECTION은 통화 기호, 로케일, 문자 집합과 같은 변수 기능들을 지정하는데 사용한다.","{'word': 'CONFIGURATION SECTION', 'start': 722, 'end': 742, 'type': 'COM'}","{'word': '통화 기호', 'start': 745, 'end': 749, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
358,"CONFIGURATION SECTION은 통화 기호, 로케일, 문자 집합과 같은 변수 기능들을 지정하는데 사용한다.","{'word': '변수 기능', 'start': 767, 'end': 771, 'type': 'COM'}","{'word': '통화 기호', 'start': 745, 'end': 749, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
359,"CONFIGURATION SECTION은 통화 기호, 로케일, 문자 집합과 같은 변수 기능들을 지정하는데 사용한다.","{'word': 'CONFIGURATION SECTION', 'start': 722, 'end': 742, 'type': 'COM'}","{'word': '로케일', 'start': 752, 'end': 754, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
360,"CONFIGURATION SECTION은 통화 기호, 로케일, 문자 집합과 같은 변수 기능들을 지정하는데 사용한다.","{'word': '변수 기능', 'start': 767, 'end': 771, 'type': 'COM'}","{'word': '로케일', 'start': 752, 'end': 754, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
361,"CONFIGURATION SECTION은 통화 기호, 로케일, 문자 집합과 같은 변수 기능들을 지정하는데 사용한다.","{'word': 'CONFIGURATION SECTION', 'start': 722, 'end': 742, 'type': 'COM'}","{'word': '문자 집합', 'start': 757, 'end': 761, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
362,"CONFIGURATION SECTION은 통화 기호, 로케일, 문자 집합과 같은 변수 기능들을 지정하는데 사용한다.","{'word': '변수 기능', 'start': 767, 'end': 771, 'type': 'COM'}","{'word': '문자 집합', 'start': 757, 'end': 761, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
363,"CONFIGURATION SECTION은 통화 기호, 로케일, 문자 집합과 같은 변수 기능들을 지정하는데 사용한다.","{'word': 'CONFIGURATION SECTION', 'start': 722, 'end': 742, 'type': 'COM'}","{'word': '변수 기능', 'start': 767, 'end': 771, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
364,"코볼은 세 개의 파일 포맷, 즉 오거나이제이션(organization)을 지원한다: 순차(sequential), 색인(indexed), 상대(relative). 순차 파일에서 레코드들은 연속적이며 순차적으로 가로질러야 하는데, 이는 마치 연결 리스트와 비슷하다.","{'word': '코볼', 'start': 825, 'end': 826, 'type': 'COM'}","{'word': '파일 포맷', 'start': 834, 'end': 838, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
365,"코볼은 세 개의 파일 포맷, 즉 오거나이제이션(organization)을 지원한다: 순차(sequential), 색인(indexed), 상대(relative). 순차 파일에서 레코드들은 연속적이며 순차적으로 가로질러야 하는데, 이는 마치 연결 리스트와 비슷하다.","{'word': '파일 포맷', 'start': 834, 'end': 838, 'type': 'COM'}","{'word': '오거나이제이션', 'start': 843, 'end': 849, 'type': 'COM'}",com:sub_concept,com:alternative_names,com:sub_concept
366,"코볼은 세 개의 파일 포맷, 즉 오거나이제이션(organization)을 지원한다: 순차(sequential), 색인(indexed), 상대(relative). 순차 파일에서 레코드들은 연속적이며 순차적으로 가로질러야 하는데, 이는 마치 연결 리스트와 비슷하다.","{'word': '파일 포맷', 'start': 834, 'end': 838, 'type': 'COM'}","{'word': '순차', 'start': 872, 'end': 873, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
367,"코볼은 세 개의 파일 포맷, 즉 오거나이제이션(organization)을 지원한다: 순차(sequential), 색인(indexed), 상대(relative). 순차 파일에서 레코드들은 연속적이며 순차적으로 가로질러야 하는데, 이는 마치 연결 리스트와 비슷하다.","{'word': '파일 포맷', 'start': 834, 'end': 838, 'type': 'COM'}","{'word': '색인', 'start': 888, 'end': 889, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
368,"코볼은 세 개의 파일 포맷, 즉 오거나이제이션(organization)을 지원한다: 순차(sequential), 색인(indexed), 상대(relative). 순차 파일에서 레코드들은 연속적이며 순차적으로 가로질러야 하는데, 이는 마치 연결 리스트와 비슷하다.","{'word': '파일 포맷', 'start': 834, 'end': 838, 'type': 'COM'}","{'word': '상대', 'start': 901, 'end': 902, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
369,"코볼은 세 개의 파일 포맷, 즉 오거나이제이션(organization)을 지원한다: 순차(sequential), 색인(indexed), 상대(relative). 순차 파일에서 레코드들은 연속적이며 순차적으로 가로질러야 하는데, 이는 마치 연결 리스트와 비슷하다.","{'word': '순차 파일', 'start': 915, 'end': 919, 'type': 'COM'}","{'word': '레코드', 'start': 923, 'end': 925, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
370,색인 파일들은 하나 이상의 색인을 갖고 있어서 레코드들이 임의 접근을 가능하게 하고 이들에 저장을 가능케 한다.,"{'word': '색인 파일', 'start': 972, 'end': 976, 'type': 'COM'}","{'word': '색인', 'start': 987, 'end': 988, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
371,각 레코드는 고유 키를 가지고 있어야 하지만 다른 대안이 되는 레코드 키들은 꼭 고유하지 않아도 된다.,"{'word': '레코드', 'start': 1037, 'end': 1039, 'type': 'COM'}","{'word': '고유 키', 'start': 1042, 'end': 1045, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
372,"색인 파일들의 구현체들은 업체에 따라 다르지만, C?ISAM와 VSAM과 같은 공통 구현체들은 IBM의 ISAM에 기반을 두고 있다.","{'word': '색인 파일', 'start': 1093, 'end': 1097, 'type': 'COM'}","{'word': '구현체', 'start': 1101, 'end': 1103, 'type': 'COM'}",com:sub_concept,no_relation,com:sub_concept
373,색인 파일들과 비슷한 상대 파일들은 고유 레코드 키를 가지고 있으나 대안 키들이 존재하지는 않는다.,"{'word': '상대 파일', 'start': 1180, 'end': 1184, 'type': 'COM'}","{'word': '고유 레코드 키', 'start': 1188, 'end': 1195, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
374,"상대 레코드의 키는 서열적인 위치를 지니는데, 이를테면 10번째 레코드는 10의 키를 가진다.","{'word': '10번째 레코드', 'start': 1255, 'end': 1262, 'type': 'COM'}","{'word': '10의 키', 'start': 1265, 'end': 1269, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
375,공통 비표준 확장으로 줄 단위의 순차 방식(line sequential organization)이 있으며 텍스트 파일을 처리하는데 쓰인다.,"{'word': '공통 비표준 확장', 'start': 1360, 'end': 1368, 'type': 'COM'}","{'word': '줄 단위의 순차 방식', 'start': 1372, 'end': 1382, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
376,파일 안의 레코드들은 새 줄 단위로 끝을 맺으며 그 길이는 다양하다.,"{'word': '파일', 'start': 1438, 'end': 1439, 'type': 'COM'}","{'word': '레코드', 'start': 1444, 'end': 1446, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
377,"DATA DIVISION은 여섯 개의 섹션으로 나뉘며 각기 다른 항목들을 선언한다. 파일 레코드의 경우 FILE SECTION, 정적 변수의 경우 WORKING-STORAGE SECTION, 매개변수와 반환값의 경우 LINKAGE SECTION, 텍스트 기반 사용자 인터페이스의 경우 REPORT SECTION과 SCREEN SECTION이 있다.","{'word': 'DATA DIVISION', 'start': 1477, 'end': 1489, 'type': 'COM'}","{'word': 'FILE SECTION', 'start': 1535, 'end': 1546, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
378,"DATA DIVISION은 여섯 개의 섹션으로 나뉘며 각기 다른 항목들을 선언한다. 파일 레코드의 경우 FILE SECTION, 정적 변수의 경우 WORKING-STORAGE SECTION, 매개변수와 반환값의 경우 LINKAGE SECTION, 텍스트 기반 사용자 인터페이스의 경우 REPORT SECTION과 SCREEN SECTION이 있다.","{'word': 'DATA DIVISION', 'start': 1477, 'end': 1489, 'type': 'COM'}","{'word': 'WORKING-STORAGE SECTION', 'start': 1559, 'end': 1581, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
379,"DATA DIVISION은 여섯 개의 섹션으로 나뉘며 각기 다른 항목들을 선언한다. 파일 레코드의 경우 FILE SECTION, 정적 변수의 경우 WORKING-STORAGE SECTION, 매개변수와 반환값의 경우 LINKAGE SECTION, 텍스트 기반 사용자 인터페이스의 경우 REPORT SECTION과 SCREEN SECTION이 있다.","{'word': 'DATA DIVISION', 'start': 1477, 'end': 1489, 'type': 'COM'}","{'word': 'LINKAGE SECTION', 'start': 1598, 'end': 1612, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
380,"DATA DIVISION은 여섯 개의 섹션으로 나뉘며 각기 다른 항목들을 선언한다. 파일 레코드의 경우 FILE SECTION, 정적 변수의 경우 WORKING-STORAGE SECTION, 매개변수와 반환값의 경우 LINKAGE SECTION, 텍스트 기반 사용자 인터페이스의 경우 REPORT SECTION과 SCREEN SECTION이 있다.","{'word': 'DATA DIVISION', 'start': 1477, 'end': 1489, 'type': 'COM'}","{'word': 'REPORT SECTION', 'start': 1636, 'end': 1649, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
381,"DATA DIVISION은 여섯 개의 섹션으로 나뉘며 각기 다른 항목들을 선언한다. 파일 레코드의 경우 FILE SECTION, 정적 변수의 경우 WORKING-STORAGE SECTION, 매개변수와 반환값의 경우 LINKAGE SECTION, 텍스트 기반 사용자 인터페이스의 경우 REPORT SECTION과 SCREEN SECTION이 있다.","{'word': 'DATA DIVISION', 'start': 1477, 'end': 1489, 'type': 'COM'}","{'word': 'SCREEN SECTION', 'start': 1652, 'end': 1665, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
382,코볼의 데이터 항목들은 데이터 항목이 다른 것의 일부인지를 지시하는 줄 번호를 사용하여 계층적으로 선언한다.,"{'word': '코볼', 'start': 1672, 'end': 1673, 'type': 'COM'}","{'word': '데이터 항목', 'start': 1676, 'end': 1681, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
383,"종속된 데이터 집합을 지닌 항목들은 그룹 항목(group item)이라고 하며, 이들을 기초 항목(elementary item)이라 부르지는 않는다.","{'word': '그룹 항목', 'start': 1833, 'end': 1837, 'type': 'COM'}","{'word': '종속된 데이터 집합', 'start': 1813, 'end': 1822, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
384,"위의 예에서 기초 항목 과 그룹 항목 는 레코드 에 종속되어 있지만 기초 항목 , , 은 그룹 항목 의 일부분이다.","{'word': '레코드', 'start': 2166, 'end': 2168, 'type': 'COM'}","{'word': '그룹 항목', 'start': 2158, 'end': 2162, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
385,"위의 예에서 기초 항목 과 그룹 항목 는 레코드 에 종속되어 있지만 기초 항목 , , 은 그룹 항목 의 일부분이다.","{'word': '레코드', 'start': 2166, 'end': 2168, 'type': 'COM'}","{'word': '기초 항목', 'start': 2150, 'end': 2154, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
386,"위의 예에서 기초 항목 과 그룹 항목 는 레코드 에 종속되어 있지만 기초 항목 , , 은 그룹 항목 의 일부분이다.","{'word': '그룹 항목', 'start': 2193, 'end': 2197, 'type': 'COM'}","{'word': '기초 항목', 'start': 2181, 'end': 2185, 'type': 'COM'}",com:sub_concept,com:sub_concept,com:sub_concept
387,"클래스에는 클래스 메소드와 변수, 인스턴스 오브젝트를 포함하는 팩토리 오브젝트(factory object)와 인스턴스 메소드와 변수를 포함하는 인스턴스 오브젝트(instance object)들을 갖고 있다.","{'word': '팩토리 오브젝트', 'start': 163, 'end': 170, 'type': 'COM'}","{'word': 'factory object', 'start': 172, 'end': 185, 'type': 'COM'}",com:alter_names,com:alternative_names,com:alternative_names
388,"클래스에는 클래스 메소드와 변수, 인스턴스 오브젝트를 포함하는 팩토리 오브젝트(factory object)와 인스턴스 메소드와 변수를 포함하는 인스턴스 오브젝트(instance object)들을 갖고 있다.","{'word': '인스턴스 오브젝트', 'start': 208, 'end': 216, 'type': 'COM'}","{'word': 'instance object', 'start': 218, 'end': 232, 'type': 'COM'}",com:alter_names,com:alternative_names,com:alternative_names
389,"코볼은 세 개의 파일 포맷, 즉 오거나이제이션(organization)을 지원한다: 순차(sequential), 색인(indexed), 상대(relative). 순차 파일에서 레코드들은 연속적이며 순차적으로 가로질러야 하는데, 이는 마치 연결 리스트와 비슷하다.","{'word': '오거나이제이션', 'start': 843, 'end': 849, 'type': 'COM'}","{'word': 'organization)', 'start': 851, 'end': 863, 'type': 'COM'}",com:alter_names,com:alternative_names,com:alternative_names
390,"코볼은 세 개의 파일 포맷, 즉 오거나이제이션(organization)을 지원한다: 순차(sequential), 색인(indexed), 상대(relative). 순차 파일에서 레코드들은 연속적이며 순차적으로 가로질러야 하는데, 이는 마치 연결 리스트와 비슷하다.","{'word': '순차', 'start': 872, 'end': 873, 'type': 'COM'}","{'word': 'sequential', 'start': 875, 'end': 884, 'type': 'COM'}",com:alter_names,com:alternative_names,com:alternative_names
391,"코볼은 세 개의 파일 포맷, 즉 오거나이제이션(organization)을 지원한다: 순차(sequential), 색인(indexed), 상대(relative). 순차 파일에서 레코드들은 연속적이며 순차적으로 가로질러야 하는데, 이는 마치 연결 리스트와 비슷하다.","{'word': '색인', 'start': 888, 'end': 889, 'type': 'COM'}","{'word': 'indexed', 'start': 891, 'end': 897, 'type': 'COM'}",com:alter_names,com:alternative_names,com:alternative_names
392,"코볼은 세 개의 파일 포맷, 즉 오거나이제이션(organization)을 지원한다: 순차(sequential), 색인(indexed), 상대(relative). 순차 파일에서 레코드들은 연속적이며 순차적으로 가로질러야 하는데, 이는 마치 연결 리스트와 비슷하다.","{'word': '상대', 'start': 901, 'end': 902, 'type': 'COM'}","{'word': 'relative', 'start': 904, 'end': 911, 'type': 'COM'}",com:alter_names,com:alternative_names,com:alternative_names
393,공통 비표준 확장으로 줄 단위의 순차 방식(line sequential organization)이 있으며 텍스트 파일을 처리하는데 쓰인다.,"{'word': '줄 단위의 순차 방식', 'start': 1372, 'end': 1382, 'type': 'COM'}","{'word': 'line sequential organization', 'start': 1384, 'end': 1411, 'type': 'COM'}",com:alter_names,com:alternative_names,com:alternative_names
394,번호 1을 가진 최상위 데이터 항목들은 레코드(record)라고 한다.,"{'word': '레코드', 'start': 1795, 'end': 1797, 'type': 'COM'}","{'word': 'record', 'start': 1799, 'end': 1804, 'type': 'COM'}",com:alter_names,com:alternative_names,com:alternative_names
395,"종속된 데이터 집합을 지닌 항목들은 그룹 항목(group item)이라고 하며, 이들을 기초 항목(elementary item)이라 부르지는 않는다.","{'word': '그룹 항목', 'start': 1833, 'end': 1837, 'type': 'COM'}","{'word': 'group item', 'start': 1839, 'end': 1848, 'type': 'COM'}",com:alter_names,com:alternative_names,com:alternative_names
396,"종속된 데이터 집합을 지닌 항목들은 그룹 항목(group item)이라고 하며, 이들을 기초 항목(elementary item)이라 부르지는 않는다.","{'word': '기초 항목', 'start': 1862, 'end': 1866, 'type': 'COM'}","{'word': 'elementary item', 'start': 1868, 'end': 1882, 'type': 'COM'}",com:alter_names,com:alternative_names,com:alternative_names
397,"색인 파일들의 구현체들은 업체에 따라 다르지만, C?ISAM와 VSAM과 같은 공통 구현체들은 IBM의 ISAM에 기반을 두고 있다.","{'word': 'ISAM', 'start': 1151, 'end': 1154, 'type': 'COM'}","{'word': 'C?ISAM', 'start': 1120, 'end': 1125, 'type': 'COM'}",com:prior_tech,com:similar_technology,com:similar_technology
398,"색인 파일들의 구현체들은 업체에 따라 다르지만, C?ISAM와 VSAM과 같은 공통 구현체들은 IBM의 ISAM에 기반을 두고 있다.","{'word': 'ISAM', 'start': 1151, 'end': 1154, 'type': 'COM'}","{'word': 'VSAM', 'start': 1128, 'end': 1131, 'type': 'COM'}",com:prior_tech,com:similar_technology,com:similar_technology
399,상속과 인터페이스들은 다형성을 제공한다.,"{'word': '상속', 'start': 244, 'end': 245, 'type': 'COM'}","{'word': '인터페이스', 'start': 248, 'end': 252, 'type': 'COM'}",no_relation,com:similar_technology,com:similar_technology
400,"또, 상대 파일들은 순차 및 임의 접근이 가능하다.","{'word': '순차', 'start': 1342, 'end': 1343, 'type': 'COM'}","{'word': '임의 접근', 'start': 1347, 'end': 1351, 'type': 'COM'}",no_relation,com:similar_technology,com:similar_technology
401,"파일 레코드의 경우 FILE SECTION, 정적 변수의 경우 WORKING-STORAGE SECTION, 매개변수와 반환값의 경우 LINKAGE SECTION, 텍스트 기반 사용자 인터페이스의 경우 REPORT SECTION과 SCREEN SECTION이 있다.","{'word': '매개변수', 'start': 1584, 'end': 1587, 'type': 'COM'}","{'word': '반환값', 'start': 1590, 'end': 1592, 'type': 'COM'}",no_relation,com:similar_technology,com:similar_technology
402,"색인 파일들의 구현체들은 업체에 따라 다르지만, C?ISAM와 VSAM과 같은 공통 구현체들은 IBM의 ISAM에 기반을 두고 있다.","{'word': 'IBM', 'start': 1146, 'end': 1148, 'type': 'ORG'}","{'word': 'ISAM', 'start': 1151, 'end': 1154, 'type': 'COM'}",org:production,org:production,org:production
403,"코볼은 세 개의 파일 포맷, 즉 오거나이제이션(organization)을 지원한다: 순차(sequential), 색인(indexed), 상대(relative). 순차 파일에서 레코드들은 연속적이며 순차적으로 가로질러야 하는데, 이는 마치 연결 리스트와 비슷하다.","{'word': '오거나이제이션', 'start': 843, 'end': 849, 'type': 'COM'}","{'word': '연결 리스트', 'start': 958, 'end': 963, 'type': 'COM'}",com:similar_tech,com:similar_technology,com:similar_technology
404,색인 파일들과 비슷한 상대 파일들은 고유 레코드 키를 가지고 있으나 대안 키들이 존재하지는 않는다.,"{'word': '색인 파일', 'start': 1168, 'end': 1172, 'type': 'COM'}","{'word': '상대 파일', 'start': 1180, 'end': 1184, 'type': 'COM'}",com:similar_tech,com:similar_technology,com:similar_technology
405,"대표단은 미국 국방부의 데이터 시스템 연구 스태프 총괄을 맡던 찰스 A. 필립스에게 감명을 주었는데, 그는 이들이 미국 국방부의 문제들을 꼼꼼하게 이해하였다고 생각하였다.","{'word': '찰스 A. 필립스', 'start': 497, 'end': 505, 'type': 'PER'}","{'word': '데이터 시스템 연구 스태프 총괄', 'start': 475, 'end': 491, 'type': 'POH'}",per:title,per:title,per:title
406,"대표단은 미국 국방부의 데이터 시스템 연구 스태프 총괄을 맡던 찰스 A. 필립스에게 감명을 주었는데, 그는 이들이 미국 국방부의 문제들을 꼼꼼하게 이해하였다고 생각하였다.","{'word': '미국 국방부', 'start': 526, 'end': 531, 'type': 'ORG'}","{'word': '데이터 시스템 연구 스태프', 'start': 475, 'end': 488, 'type': 'ORG'}",no_relation,no_relation,no_relation
407,"새로운 프로그래밍 언어들이 빠르게 확산되는 가운데, 동일 조사에서 하나로 통일된 사무 지향 언어가 사용된다면 변환은 훨씬 저렴해지고 빨라질 것이라는 결과가 나왔다.","{'word': '프로그래밍', 'start': 168, 'end': 172, 'type': 'COM'}","{'word': '사무 지향 언어', 'start': 209, 'end': 216, 'type': 'COM'}",com:sub_concept,no_relation,no_relation
408,필립스는 이 회의를 지원하는데 동의하였고 대표단에게 의제의 초안을 작성하는 일을 부여하였다.,"{'word': '필립스', 'start': 691, 'end': 693, 'type': 'PER'}","{'word': '대표단', 'start': 714, 'end': 716, 'type': 'ORG'}",no_relation,no_relation,no_relation
409,"1959년 4월 학계, 컴퓨터 사용자들, 제조업체들의 대표들이 펜실베니아 대학교에서 통일된 사무 언어에 대한 정식 회의를 조성하기에 이르렀다.","{'word': '펜실베니아 대학교', 'start': 291, 'end': 299, 'type': 'ORG'}","{'word': '제조업체', 'start': 279, 'end': 282, 'type': 'ORG'}",no_relation,no_relation,no_relation
410,"미국 국방부는 225대의 컴퓨터를 운영했고 추가로 175대를 주문하였으며 이 컴퓨터들 상에 프로그램을 구현하는데 $200,000,000를 지출하였다.","{'word': '미국 국방부', 'start': 558, 'end': 563, 'type': 'ORG'}","{'word': '컴퓨터', 'start': 572, 'end': 574, 'type': 'COM'}",no_relation,no_relation,no_relation
411,"1959년 4월 학계, 컴퓨터 사용자들, 제조업체들의 대표들이 펜실베니아 대학교에서 통일된 사무 언어에 대한 정식 회의를 조성하기에 이르렀다.","{'word': '사무 언어', 'start': 307, 'end': 311, 'type': 'COM'}","{'word': '컴퓨터 사용자', 'start': 269, 'end': 275, 'type': 'PER'}",no_relation,no_relation,no_relation
412,1950년대 말 컴퓨터 사용자와 제조업체는 프로그래밍의 비용이 치솟는 것을 걱정하기 시작했다.,"{'word': '컴퓨터', 'start': 9, 'end': 11, 'type': 'COM'}","{'word': '프로그래밍', 'start': 24, 'end': 28, 'type': 'COM'}",no_relation,no_relation,no_relation
413,"1959년 조사에 따르면 데이터 처리 설치에서 프로그래밍의 평균 비용은 $800,000 (미국 달러)이고 새로운 하드웨어에서 실행할 수 있도록 프로그램을 변환하는데 드는 비용은 $600,000였다.","{'word': '프로그래밍', 'start': 79, 'end': 83, 'type': 'COM'}","{'word': '데이터', 'start': 67, 'end': 69, 'type': 'COM'}",no_relation,no_relation,no_relation
414,"1959년 조사에 따르면 데이터 처리 설치에서 프로그래밍의 평균 비용은 $800,000 (미국 달러)이고 새로운 하드웨어에서 실행할 수 있도록 프로그램을 변환하는데 드는 비용은 $600,000였다.","{'word': '프로그램', 'start': 133, 'end': 136, 'type': 'COM'}","{'word': '하드웨어', 'start': 116, 'end': 119, 'type': 'COM'}",no_relation,no_relation,no_relation
415,"영어와 같은 데이터 처리 언어 FLOW-MATIC을 개발한 그레이스 호퍼를 포함하여 진 사멧, 솔 곤(Saul Gorn)이 대표로 참석했다.","{'word': '그레이스 호퍼', 'start': 369, 'end': 375, 'type': 'PER'}","{'word': 'FLOW-MATIC', 'start': 353, 'end': 362, 'type': 'COM'}",per:production,per:production,per:production

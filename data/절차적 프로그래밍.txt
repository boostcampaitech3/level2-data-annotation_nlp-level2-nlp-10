절차적 프로그래밍(節次的 프로그래밍, )은 절차지향 프로그래밍 혹은 절차지향적 프로그래밍이라고도 불리는 프로그래밍 패러다임의 일종으로서, 때때로 명령형 프로그래밍과 동의어로 쓰이기도 하지만, 프로시저 호출의 개념을 바탕으로 하고 있는 프로그래밍 패러다임을 의미하기도 한다.
프로시저는 루틴, 하위프로그램, 서브루틴, 메서드, 함수(수학적 함수와는 다르고 함수형 프로그래밍에 있는 함수와는 비슷한 의미이다.)라고도 하는데, 간단히 말하여 수행되어야 할 연속적인 계산 과정을 포함하고 있다.
프로그램의 아무 위치에서나 프로시저를 호출할 수 있는데, 다른 프로시저에서도 호출 가능하고 심지어는 자기 자신에서도 호출 가능하다.
절차적 프로그래밍은 복잡도가 지나치지 않고 유지보수하기 쉽기 때문에 단순한 순차적 프로그래밍이나 비구조적 프로그래밍보다 여러 상황에서 장점이 많다.
크고 복잡한 프로그램을 작성할 때 모듈성은 꼭 필요하다.
모듈성은 프로시저에 어떤 형태의 입력과 출력이 이루어지는지 명확한 규칙을 정하여 구현할 수 있다.
입력은 주로 "인수"(인자, 매개변수)의 형태로 문법적으로 지정하고, 출력은 "결과값"(반환값)으로 지정한다.
유효범위(스코프)는 프로시저가 모듈성을 잘 지킬 수 있게 해 준다.
이것은 프로시저가 다른 프로시저의 변수에 접근하거나 그 반대의 경우를 막아준다.
명시적인 허가를 하지 않으면 방금전의 자기 자신의 변수에도 접근할 수 없게 된다.
유효 범위는 서로 다른 장소에서 같은 이름의 변수를 사용하여 혼동되는 것을 막아주고, 다른 프로시저의 영역을 침해하는 것을 막아준다.
모듈성이 덜한 프로시저는 빨리 만든 간단한 프로그램에서 사용되기도 하는데 실행환경에서 많은 변수들과 소통하는 경향이 있고, 다른 프로시저가 변수값을 수정할 수 있을지도 모르게 된다.
여러 변수가 프로그램의 다양한 부분들 사이에서 관계가 있다면 이것은 모듈성을 약하게 한다.
더 간단하고, 독립적이고, 다시 사용할 수 있기 때문에 프로시저는 프로그램 라이브러리를 포함하여 서로 다른 사람들이나 단체에서 작성한 코드의 조각들을 담을 수 있는 훌륭한 그릇이다.
현재까지 남아있는 대부분의 절차적 프로그래밍 언어는 명령형 프로그래밍 언어이기도 한데, 이것은 실행 환경의 상태(state)로 명시적인 참조를 하기 때문이다.
이것은 "변수"(프로세서 레지스터에 대응될 수도 있다)로부터 시작해서 로고 프로그래밍 언어의 "거북이" 위치 같은 것(화면상의 커서부터 시작해서 방바닥 주변에 있는 장치들까지도)까지 어떤 것이든 될 수 있다.
객체지향 프로그래밍 같이, 일부 명령형 프로그래밍의 형태는 절차적이지 않은 것들도 있다.
객체지향 프로그래밍과의 비교.
좀 더 최근에 나온 객체지향 프로그래밍을 통하면 좀 더 세련된 형태의 모듈화를 할 수 있다.
프로시저와 프로시저의 입력과 출력을 다루는 대신에 객체지향 프로그램들은 "객체"를 다룬다.
연산은 객체에게 내부 프로시저 중에 하나(혹은 상속받은 것)를 수행하라고 요청하는 것으로 이루어지며 이런 방법으로 하여 내부 상태를 다룬다.
절차적 프로그래밍 언어들은 절차적 프로그래밍 접근 방식을 따름으로써 프로그래머의 작업을 수월하게 한다.
알골과 같은 언어가 절차적 프로그래밍 언어의 표준적인 예이다.
그 밖에 포트란, PL/I, 모듈라-2, 에이다, 베이직, C 등이 있다.
